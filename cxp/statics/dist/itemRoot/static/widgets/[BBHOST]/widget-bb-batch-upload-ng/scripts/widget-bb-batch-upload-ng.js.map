{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6****","webpack:///webpack/bootstrap 8cdceecee155e37df468?d533****","webpack:///./widget-bb-batch-upload-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114**","webpack:///external \"lib-bb-model-errors\"?7567*","webpack:///external \"model-bb-batch-ng\"?a65c","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-intent-ng\"?add1","webpack:///./widget-bb-batch-upload-ng/scripts/index.js","webpack:///external \"vendor-bb-ng-file-upload\"","webpack:///./widget-bb-batch-upload-ng/scripts/controller.js"],"names":["module","name","controller","run","bbIntent","init","BatchUploadController","widget","model","Promise","$ctrl","StatusType","SUCCESS","ERROR","errorMessages","Page","SELECT_TYPE","UPLOAD_FILES","state","status","files","uploadedFilesNumber","failedUploadFilesNumber","selectedUploadOption","step","config","maxFileSize","getStringPreference","getInvalidStatusMessage","valid","invalid","message","data","validCount","length","filesCount","invalidFormat","invalidMaxSize","forEach","file","$errorMessages","maxSize","push","invalidFormatCount","invalidMaxSizeCount","fileMaxSize","$errorParam","type","addFiles","invalidFiles","filesToAdd","map","uploading","uploaded","uploadFailed","progress","clearStatus","onUploadFinished","onUploadFailed","supressError","uploadError","error","code","uploadFile","resolve","uploadBatchFile","then","catch","finally","isUploading","some","uploadFiles","filesToUpload","filter","uploadPromises","all","number","removeFile","index","indexOf","splice","clearFiles","finishUploadSession","showSelectTypePage","Object","assign"],"mappings":"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","file":"widget-bb-batch-upload-ng/scripts/widget-bb-batch-upload-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"model-bb-batch-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-intent-ng\"), require(\"vendor-bb-ng-file-upload\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-batch-upload-ng\", [\"vendor-bb-angular\", \"lib-bb-model-errors\", \"model-bb-batch-ng\", \"lib-bb-widget-ng\", \"lib-bb-intent-ng\", \"vendor-bb-ng-file-upload\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-batch-upload-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"model-bb-batch-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-intent-ng\"), require(\"vendor-bb-ng-file-upload\"));\n\telse\n\t\troot[\"widget-bb-batch-upload-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-model-errors\"], root[\"model-bb-batch-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-intent-ng\"], root[\"vendor-bb-ng-file-upload\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_30__, __WEBPACK_EXTERNAL_MODULE_35__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8cdceecee155e37df468","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-batch-upload-ng/model.xml\n// module id = 0\n// module chunks = 5","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 19\n// module chunks = 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 22\n// module chunks = 2 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-batch-ng\"\n// module id = 27\n// module chunks = 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 28\n// module chunks = 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_30__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 30\n// module chunks = 4 5","/**\n * @module widget-bb-batch-upload-ng\n *\n * @description\n * Batch upload.\n *\n */\nimport angular from 'vendor-bb-angular';\nimport fileUpload from 'vendor-bb-ng-file-upload';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport modelModuleKey, { modelBatchKey } from 'model-bb-batch-ng';\n\nimport Controller from './controller';\n\n/**\n * @name default\n * @type {string}\n * @description Angular module name\n */\nexport default angular\n  .module('widget-bb-batch-upload-ng', [\n    widgetModuleKey,\n    modelModuleKey,\n    fileUpload.name,\n    bbIntentModuleKey,\n  ])\n\n  .controller('BatchUploadController', [\n    // dependencies to inject\n    widgetKey,\n    modelBatchKey,\n    '$q',\n    /* into */\n    Controller,\n  ])\n\n  .run([bbIntentKey, (bbIntent) => {\n    bbIntent.init();\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-batch-upload-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_35__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-ng-file-upload\"\n// module id = 35\n// module chunks = 5","/* eslint-disable no-param-reassign */\n\nimport {\n  E_AUTH,\n  E_CONNECTIVITY,\n  E_USER,\n  E_UNEXPECTED,\n} from 'lib-bb-model-errors';\n\nexport default function BatchUploadController(widget, model, Promise) {\n  /**\n   * @name BatchUploadController\n   * @ngkey BatchUploadController\n   * @type {object}\n   * @description\n   * Batch upload controller.\n   */\n  const $ctrl = this;\n\n  const StatusType = {\n    SUCCESS: 'SUCCESS',\n    ERROR: 'ERROR',\n  };\n\n  const errorMessages = {\n    [E_AUTH]: 'error.auth',\n    [E_CONNECTIVITY]: 'error.connectivity',\n    [E_USER]: 'error.user',\n    [E_UNEXPECTED]: 'error.unexpected',\n  };\n\n  /**\n   * @name  Page\n   * @description Defines widget page enumeration\n   * @enum {string}\n   * @type {object}\n   */\n  const Page = {\n    SELECT_TYPE: 'SELECT_TYPE',\n    UPLOAD_FILES: 'UPLOAD_FILES',\n  };\n\n  /**\n   * @name BatchUploadController#state\n   * @description Controller's state object\n   * @type {object}\n   * @property {object} status Controller's actions status\n   * @property {Array} files An array of queued files\n   * @property {number} uploadedFilesNumber Number of successfully uploaded files\n   * @property {number} filedUploadFilesNumber Number of unsuccessfully uploaded files\n   */\n  const state = {\n    status: null,\n    files: [],\n    uploadedFilesNumber: 0,\n    failedUploadFilesNumber: 0,\n    selectedUploadOption: null,\n    step: Page.SELECT_TYPE,\n  };\n\n  /**\n   * @name  BatchUploadController#config\n   * @description Configuration of the component that will select files to upload.\n   * @type {object}\n   * @property {string} maxFileSize The maximum file size allowed to upload.\n   *                                Represents a human readable string size\n   *                                like `1KB`, `2MB`, `3GB`, `4TB`.\n   */\n  const config = {\n    maxFileSize: widget.getStringPreference('maxFileSize'),\n  };\n\n\n  /**\n   * @name getInvalidStatusMessage\n   * @description Builds the error message and data to be shown in the message\n   * @typedef {function}\n   * @inner\n   * @param  {Array} valid   Collection of valid files\n   * @param  {Array} invalid Collection of invalid files\n   * @return {object}\n   */\n  const getInvalidStatusMessage = (valid, invalid) => {\n    let message;\n    const data = {\n      validCount: valid.length,\n      filesCount: valid.length + invalid.length,\n    };\n    const invalidFormat = [];\n    const invalidMaxSize = [];\n\n    invalid.forEach(file => {\n      if (file.$errorMessages.maxSize) {\n        invalidMaxSize.push(file);\n      } else {\n        invalidFormat.push(file);\n      }\n    });\n\n    if (invalidMaxSize.length && invalidFormat.length) {\n      message = 'error.invalid_files';\n      data.invalidFormatCount = invalidFormat.length;\n      data.invalidMaxSizeCount = invalidMaxSize.length;\n      data.fileMaxSize = invalidMaxSize[0].$errorParam;\n    } else if (invalidMaxSize.length) {\n      message = 'error.max_size_files';\n      data.invalidMaxSizeCount = invalidMaxSize.length;\n      data.fileMaxSize = invalidMaxSize[0].$errorParam;\n    } else {\n      message = 'error.invalid_format_files';\n      data.invalidFormatCount = invalidFormat.length;\n    }\n\n    return {\n      message,\n      data,\n      type: StatusType.ERROR,\n    };\n  };\n\n  /**\n   * @name BatchUploadController#addFiles\n   *\n   * @description\n   * Adds new files to the queue. Will set error status when invalid files added.\n   *\n   * @type {function}\n   * @param {Array} files New valid files\n   * @param {Array} invalidFiles Invalid files\n   */\n  const addFiles = (files, invalidFiles) => {\n    const filesToAdd = files.map(file => ({\n      data: file,\n      uploading: false,\n      uploaded: false,\n      uploadFailed: false,\n      progress: 0,\n    }));\n    state.files.push(...filesToAdd);\n\n    if (invalidFiles.length) {\n      state.status = getInvalidStatusMessage(files, invalidFiles);\n    }\n  };\n\n  /**\n   * @name BatchUploadController#clearStatus\n   * @description Clears controller status\n   * @type {function}\n   */\n  const clearStatus = () => {\n    state.status = null;\n  };\n\n  /**\n   * @name BatchUploadController#onUploadFinished\n   * @description Handles successfuly uploaded files\n   * @type {function}\n   * @param  {object} file Uploaded file\n   * @inner\n   */\n  const onUploadFinished = file => () => {\n    file.uploaded = true;\n    file.uploadFailed = false;\n    state.uploadedFilesNumber++;\n  };\n\n  /**\n   * @name BatchUploadController#onUploadFailed\n   * @description Handles unsuccessfuly uploaded files\n   * @type {function}\n   * @param  {object} file Uploaded file\n   * @param {boolean} supressError Error status will not be set if parameter set to true\n   * @inner\n   */\n  const onUploadFailed = (file, supressError) => error => {\n    if (!file.uploadFailed) {\n      file.uploadFailed = true;\n      state.failedUploadFilesNumber++;\n    }\n    file.uploadError = errorMessages[error.code];\n\n    if (!supressError) {\n      state.status = {\n        message: errorMessages[error.code],\n        type: StatusType.ERROR,\n      };\n    }\n  };\n\n  /**\n   * @description\n   * Uploads a single file to the server\n   *\n   * @name BatchUploadController#uploadFile\n   * @type {function}\n   * @param {object} file The file object to upload\n   * @param {boolean} supressError Error status will not be set if parameter set to true\n   * @return {object} An upload promise\n   */\n  const uploadFile = (file, supressError) => {\n    if (!file || file.uploading || file.uploaded) return Promise.resolve();\n\n    file.uploading = true;\n    file.uploaded = false;\n    file.progress = 0;\n\n    return model.uploadBatchFile('legalentityId', file.data)\n      .then(onUploadFinished(file))\n      .catch(onUploadFailed(file, supressError))\n      .finally(() => {\n        file.progress = 100;\n        file.uploading = false;\n      });\n  };\n\n  /**\n   * @name BatchUploadController#isUploading\n   * @description Indicates is any of the files in the queue are being uploaded at the moment\n   * @type {function}\n   * @return {boolean} Returns true if there are active uploads, false otherwise.\n   */\n  const isUploading = () => state.files.some(file => file.uploading);\n\n  /**\n   * @description\n   * Process a collection files to be uploaded\n   *\n   * @name BatchUploadController#uploadFiles\n   * @type {function}\n   * @return {Array} An upload promise\n   */\n  const uploadFiles = () => {\n    const filesToUpload = state.files.filter(file => !file.uploaded);\n    if ($ctrl.isUploading() || !filesToUpload.length) return Promise.resolve();\n\n    const uploadPromises = filesToUpload.map(file => $ctrl.uploadFile(file, true));\n    return Promise.all(uploadPromises)\n      .finally(() => {\n        if (state.failedUploadFilesNumber) {\n          const message = state.failedUploadFilesNumber === 1 ?\n            'error.upload_file_failed' :\n            'error.upload_files_failed';\n\n          state.status = {\n            message,\n            type: StatusType.ERROR,\n            data: {\n              number: state.failedUploadFilesNumber,\n            },\n          };\n        }\n      });\n  };\n\n  /**\n   * @description\n   * Removes a file from the upload queue.\n   * Mutates the internal files collection.\n   *\n   * @name  BatchUploadController#removeFile\n   * @type {function}\n   * @param  {object} file File to be removed\n   */\n  const removeFile = file => {\n    if (file.uploading) return;\n\n    const index = state.files.indexOf(file);\n    if (index === -1) return;\n\n    state.files.splice(index, 1);\n    if (file.uploaded) {\n      state.uploadedFilesNumber--;\n    } else if (file.uploadFailed) {\n      state.failedUploadFilesNumber--;\n    }\n    if (!state.files.length) {\n      clearStatus();\n    }\n  };\n\n  /**\n   * @name BatchUploadController#clearFiles\n   * @description Completely clears files upload queue\n   * @type {function}\n   */\n  const clearFiles = () => {\n    if ($ctrl.isUploading()) return;\n\n    state.files = [];\n    state.uploadedFilesNumber = 0;\n    state.failedUploadFilesNumber = 0;\n  };\n\n  /**\n   * @name BatchUploadController#finishUploadSession\n   * @description Finishes current upload session by clearing upload queue\n   * @type {function}\n   */\n  const finishUploadSession = () => {\n    $ctrl.clearFiles();\n    $ctrl.clearStatus();\n  };\n\n  /**\n   * @name BatchUploadController#showSelectTypePage\n   * @description Show select type page\n   * @type {function}\n   */\n  const showSelectTypePage = () => {\n    $ctrl.state.step = Page.SELECT_TYPE;\n    $ctrl.state.files = [];\n  };\n\n  Object.assign($ctrl, {\n    state,\n    config,\n    addFiles,\n    uploadFiles,\n    uploadFile,\n    removeFile,\n    clearStatus,\n    clearFiles,\n    isUploading,\n    finishUploadSession,\n    showSelectTypePage,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-batch-upload-ng/scripts/controller.js"],"sourceRoot":""}