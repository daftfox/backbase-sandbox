{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***********************************","webpack:///webpack/bootstrap d0309a746b17cd403690?c295***********************************","webpack:///./widget-wm-positions-ng/model.xml","webpack:///external \"lib-bb-state-container-ng\"?8d56********","webpack:///external \"lib-wm-portfolio-view-model-helper\"?8f7a********","webpack:///external \"vendor-bb-angular\"?a114**************","webpack:///external \"lib-bb-event-bus-ng\"?8215**","webpack:///external \"lib-bb-widget-extension-ng\"?b547*******","webpack:///external \"model-wm-portfolio-summary-ng\"?e4f4*******","webpack:///external \"lib-bb-intent-ng\"?add1***","webpack:///./widget-wm-positions-ng/scripts/index.js","webpack:///./widget-wm-positions-ng/scripts/controller.js","webpack:///./widget-wm-positions-ng/scripts/constants.js","webpack:///./widget-wm-positions-ng/scripts/view-model.js","webpack:///./widget-wm-positions-ng/scripts/service.js"],"names":["viewModelKey","serviceKey","angular","module","modelPortfolioSummaryModuleKey","stateContainerModuleKey","eventBusModuleKey","bbIntentModuleKey","factory","bbStateContainerKey","ViewModel","modelPortfolioSummaryKey","Service","extensionContextKey","service","controller","eventBusKey","bbIntentKey","Controller","run","viewModel","init","name","PositionsController","eventBus","bbIntents","viewTransactionsIntent","create","Intent","TRANSACTION_LIST","postponedTasks","invokePostponedTasks","forEach","task","length","addToPostponedTasks","push","tryOpenAssetClass","assetClass","getState","initialLoading","openAssetClass","initIntents","handle","ASSETS_IN_POSITIONS","viewTransactions","portfolioId","positionId","positionInstrumentName","params","publish","Event","loadPositions","$onInit","then","onFinishScroll","onScrollToAssetClassFinished","state","errors","initialState","positions","data","accounts","assetClasses","regions","countries","loading","positionsError","stateContainer","beforeLoadPositions","afterLoadPositionsSuccess","raw","afterLoadPositionsError","error","code","assetClassName","openAccountIds","map","isOpen","accountId","account","find","id","assetToScrollTo","model","getSelectedPortfolioId","loadPortfolioPositions","catch"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,2C;;;;;;;ACAA,iD;;;;;;;ACAA,iD;;;;;;;ACAA,iD;;;;;;;ACAA,kD;;;;;;;ACAA,kD;;;;;;;ACAA,kD;;;;;;;ACAA,kD;;;;;;;;;;;;;ACcA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,KAAMA,eAAe,kCAArB,C,CAzBA;;;;;;;;;;;;;;;AA0BA,KAAMC,aAAa,gCAAnB;;AAEA;;;;;mBAKeC,0BACZC,MADY,CACL,wBADK,EACqB,CAChCC,mCADgC,EAEhCC,+BAFgC,EAGhCC,yBAHgC,EAIhCC,uBAJgC,CADrB,EAQZC,OARY,CAQJR,YARI,EAQU,CAACS,0CAAD,EAAsBC,mBAAtB,CARV,EASZF,OATY,CASJP,UATI,EASQ,CAACU,mDAAD,EAA2BX,YAA3B,EAAyCY,iBAAzC,CATR,EAUZJ,OAVY,CAUJK,2CAVI,EAUiB,CAC5BZ,UAD4B,EAE5B;AAAA,UAAY,EAAEa,gBAAF,EAAZ;AAAA,EAF4B,CAVjB,EAeZC,UAfY,CAeD,qBAfC,EAesB,CACjCf,YADiC,EAEjCC,UAFiC,EAGjCe,4BAHiC,EAIjCC,0BAJiC;AAKjC;AACAC,qBANiC,CAftB,EAwBZC,GAxBY,CAwBR,CAACnB,YAAD,EAAe,qBAAa;AAC/BoB,aAAUC,IAAV;AACD,EAFI,CAxBQ,EA2BZC,I;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBCpDsBC,mB;;AAVxB;;AAEA;;;;;;;;AAQe,UAASA,mBAAT,CACbH,SADa,EAEbN,OAFa,EAGbU,QAHa,EAIbC,SAJa,EAKb;AACA,OAAMC,yBAAyBD,UAAUE,MAAV,CAAiBC,kBAAOC,gBAAxB,CAA/B;;AAEA;;;;;;;AAOA,OAAMC,iBAAiB,EAAvB;;AAEA;;;;;;;;AAQA,OAAMC,uBAAuB,SAAvBA,oBAAuB,GAAM;AACjCD,oBAAeE,OAAf,CAAuB;AAAA,cAAQC,MAAR;AAAA,MAAvB;AACAH,oBAAeI,MAAf,GAAwB,CAAxB;AACD,IAHD;;AAKA;;;;;;;;AAQA,OAAMC,sBAAsB,SAAtBA,mBAAsB,CAACF,IAAD;AAAA,YAAUH,eAAeM,IAAf,CAAoBH,IAApB,CAAV;AAAA,IAA5B;;AAEA;;;;;;;;AAQA,OAAMI,oBAAoB,SAApBA,iBAAoB,CAACC,UAAD,EAAgB;AACxC,SAAI,CAAClB,UAAUmB,QAAV,GAAqBC,cAA1B,EAA0C;AACxCpB,iBAAUqB,cAAV,CAAyBH,UAAzB;AACD,MAFD,MAEO;AACLH,2BAAoB;AAAA,gBAAMf,UAAUqB,cAAV,CAAyBH,UAAzB,CAAN;AAAA,QAApB;AACD;AACF,IAND;;AAQA;;;;;;AAMA,OAAMI,cAAc,SAAdA,WAAc,GAAM;AACxBjB,eAAUkB,MAAV,CAAiBf,kBAAOgB,mBAAxB,EAA6CP,iBAA7C;AACAZ,eAAUJ,IAAV,CAAe;AAAA,cAAM,IAAN;AAAA,MAAf;AACD,IAHD;;AAKA;;;;;;;;;;;;AAYA,OAAMwB,mBAAmB,SAAnBA,gBAAmB,CAACC,WAAD,EAAcC,UAAd,EAA0BC,sBAA1B,EAAqD;AAC5E;;;;;;;AAOA,SAAMC,SAAS;AACbH,+BADa;AAEbC,6BAFa;AAGbC;AAHa,MAAf;;AAMA;AACA;AACAxB,cAAS0B,OAAT,CAAiBC,iBAAMtB,gBAAvB,EAAyCoB,MAAzC;;AAEAvB,4BAAuBuB,MAAvB;AACD,IAnBD;;AAqBA;;;;;;;;;;AAUA,OAAMG,gBAAgB,SAAhBA,aAAgB;AAAA,YAAMtC,QAAQsC,aAAR,EAAN;AAAA,IAAtB;;AAEA;;;;;AAKA,OAAMC,UAAU,SAAVA,OAAU,GAAM;AACpBX;AACA,YAAOU,gBACJE,IADI,CACCvB,oBADD,CAAP;AAED,IAJD;;AAMA;;;;;AAKA,OAAMwB,iBAAiB,SAAjBA,cAAiB,GAAM;AAC3BnC,eAAUoC,4BAAV;AACD,IAFD;;AAIA,UAAO;AACLH,qBADK;AAELD,iCAFK;AAGLP,uCAHK;AAILU,mCAJK;AAKL,SAAIE,KAAJ,GAAY;AACV,cAAOrC,UAAUmB,QAAV,EAAP;AACD,MAPI;AAQL,SAAImB,MAAJ,GAAa;AACX,cAAOtC,UAAUmB,QAAV,GAAqBmB,MAA5B;AACD;AAVI,IAAP;AAYD,E;;;;;;;;;;;;AC1JD;;;;;;;;;;AAUO,KAAM9B,0BAAS;AACpBC,qBAAkB,mBADE;AAEpBe,wBAAqB;AAFD,EAAf;;AAKP;;;;;;;;;;AAUO,KAAMO,wBAAQ;AACnBtB,qBAAkB;AADC,EAAd,C;;;;;;;;;;;;;ACzBP;;AAEA;;;;;;;;AAQA,KAAM8B,eAAe;AACnBC,cAAW;AACTC,WAAM;AACJC,iBAAU,EADN;AAEJC,qBAAc,EAFV;AAGJC,gBAAS,EAHL;AAIJC,kBAAW,EAJP;AAKJL,kBAAW;AALP,MADG;AAQTM,cAAS;AARA,IADQ;AAWnBR,WAAQ;AACNS,qBAAgB;AADV,IAXW;AAcnB3B,mBAAgB;AAdG,EAArB;;mBAiBe,UAAC4B,cAAD;AAAA;AACb7B,eAAU6B,eAAe7B;AADZ,MAEV,gDAAY6B,cAAZ,EAA4B;AAC7B/C,WAAM;AAAA,WAACoC,KAAD,uEAASE,YAAT;AAAA,cAA0BF,KAA1B;AAAA,MADuB;AAE7BY,0BAAqB;AAAA,cAAO;AAC1B7B,yBAAgB,IADU;AAE1BoB,oBAAW;AACTM,oBAAS;AADA;AAFe,QAAP;AAAA,MAFQ;AAQ7BI,gCAA2B,mCAACb,KAAD,EAAQc,GAAR;AAAA,cAAiB;AAC1C/B,yBAAgB,KAD0B;AAE1CoB,oBAAW;AACTM,oBAAS,KADA;AAETL,iBAAMU,IAAIV;AAFD,UAF+B;AAM1CH,iBAAQ;AACNS,2BAAgB;AADV;AANkC,QAAjB;AAAA,MARE;AAkB7BK,8BAAyB,iCAACf,KAAD,EAAQgB,KAAR;AAAA,cAAmB;AAC1CjC,yBAAgB,KAD0B;AAE1CoB,oBAAW;AACTM,oBAAS,KADA;AAETL,iBAAM;AAFG,UAF+B;AAM1CH,iBAAQ;AACNS,2BAAgBM,MAAMC;AADhB;AANkC,QAAnB;AAAA,MAlBI;AA4B7BjC,qBAAgB,wBAACgB,KAAD,QAA+B;AAAA,WAArBkB,cAAqB,QAArBA,cAAqB;;AAC7C,WAAIb,WAAWL,MAAMG,SAAN,CAAgBC,IAAhB,CAAqBC,QAApC;AACA,WAAIC,eAAeN,MAAMG,SAAN,CAAgBC,IAAhB,CAAqBE,YAAxC;;AAEA,WAAI,CAACA,YAAD,IAAiB,CAACA,aAAa7B,MAAnC,EAA2C;AACzC,gBAAOuB,KAAP;AACD;;AAED,WAAMmB,iBAAiB,EAAvB;;AAEAb,sBAAeA,aAAac,GAAb,CAAiB,sBAAc;AAC5C,aAAIC,SAAS,KAAb;AACA,aAAIxC,WAAWhB,IAAX,KAAoBqD,cAAxB,EAAwC;AACtCG,oBAAS,IAAT;AACAF,0BAAexC,IAAf,CAAoBE,WAAWyC,SAA/B;AACD;;AAED,kCACKzC,UADL;AAEEwC;AAFF;AAID,QAXc,CAAf;;AAaAhB,kBAAWA,SAASe,GAAT,CAAa;AAAA,kCACnBG,OADmB;AAEtBF,mBAAQ,CAAC,CAACF,eAAeK,IAAf,CAAoB;AAAA,oBAAMC,OAAOF,QAAQE,EAArB;AAAA,YAApB;AAFY;AAAA,QAAb,CAAX;;AAKA,cAAO;AACLtB,oBAAW;AACTuB,4BAAiBR,cADR;AAETd,iBAAM;AACJC,+BADI;AAEJC;AAFI;AAFG;AADN,QAAP;AASD,MAjE4B;AAkE7BP,mCAA8B;AAAA,cAAO;AACnCI,oBAAW;AACTuB,4BAAiB;AADR;AADwB,QAAP;AAAA;AAlED,IAA5B,CAFU;AAAA,E;;;;;;;;;;;;;mBC3BA,UAACC,KAAD,EAAQhE,SAAR;AAAA,UAAuB;AACpC;;;;;;;;;AASAgC,oBAAe,yBAAM;AACnBhC,iBAAUiD,mBAAV;AACA,cAAOe,MAAMC,sBAAN,GACJ/B,IADI,CACC;AAAA,gBAAe8B,MAAME,sBAAN,CAA6BxC,WAA7B,CAAf;AAAA,QADD,EAEJQ,IAFI,CAEClC,UAAUkD,yBAFX,EAGJiB,KAHI,CAGEnE,UAAUoD,uBAHZ,CAAP;AAID;AAhBmC,IAAvB;AAAA,E","file":"widget-wm-positions-ng/scripts/widget-wm-positions-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lib-bb-state-container-ng\"), require(\"lib-wm-portfolio-view-model-helper\"), require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-wm-portfolio-summary-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-wm-positions-ng\", [\"lib-bb-state-container-ng\", \"lib-wm-portfolio-view-model-helper\", \"vendor-bb-angular\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"model-wm-portfolio-summary-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-wm-positions-ng\"] = factory(require(\"lib-bb-state-container-ng\"), require(\"lib-wm-portfolio-view-model-helper\"), require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-wm-portfolio-summary-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"widget-wm-positions-ng\"] = factory(root[\"lib-bb-state-container-ng\"], root[\"lib-wm-portfolio-view-model-helper\"], root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-wm-portfolio-summary-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_86__, __WEBPACK_EXTERNAL_MODULE_88__, __WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_120__, __WEBPACK_EXTERNAL_MODULE_125__, __WEBPACK_EXTERNAL_MODULE_126__, __WEBPACK_EXTERNAL_MODULE_129__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0309a746b17cd403690","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-wm-positions-ng/model.xml\n// module id = 0\n// module chunks = 36","module.exports = __WEBPACK_EXTERNAL_MODULE_86__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 86\n// module chunks = 19 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_88__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-wm-portfolio-view-model-helper\"\n// module id = 88\n// module chunks = 19 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 93\n// module chunks = 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_120__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 120\n// module chunks = 27 28 35 36","module.exports = __WEBPACK_EXTERNAL_MODULE_125__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 125\n// module chunks = 28 29 30 31 32 33 34 35 36","module.exports = __WEBPACK_EXTERNAL_MODULE_126__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-wm-portfolio-summary-ng\"\n// module id = 126\n// module chunks = 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_129__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 129\n// module chunks = 28 33 34 35 36","/**\n * @module widget-wm-positions-ng\n *\n * @description\n * Positions widget.\n *\n *\n * @example\n *  <div ng-controller=\"PositionsController as $ctrl\">\n *    <ul>\n *       <li ng-repeat=\"position in $ctrl.positions\">{{position.id}}</li>\n *    </ul>\n *  </div>\n */\nimport angular from 'vendor-bb-angular';\nimport { extensionContextKey } from 'lib-bb-widget-extension-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport modelPortfolioSummaryModuleKey, { modelPortfolioSummaryKey }\n       from 'model-wm-portfolio-summary-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport Controller from './controller';\nimport ViewModel from './view-model';\nimport Service from './service';\n\nconst viewModelKey = 'widget-wm-positions-ng:viewModel';\nconst serviceKey = 'widget-wm-positions-ng:service';\n\n/**\n * @name default\n * @type {string}\n * @description Angular module name\n */\nexport default angular\n  .module('widget-wm-positions-ng', [\n    modelPortfolioSummaryModuleKey,\n    stateContainerModuleKey,\n    eventBusModuleKey,\n    bbIntentModuleKey,\n  ])\n\n  .factory(viewModelKey, [bbStateContainerKey, ViewModel])\n  .factory(serviceKey, [modelPortfolioSummaryKey, viewModelKey, Service])\n  .factory(extensionContextKey, [\n    serviceKey,\n    service => ({ service }),\n  ])\n\n  .controller('PositionsController', [\n    viewModelKey,\n    serviceKey,\n    eventBusKey,\n    bbIntentKey,\n    /* into */\n    Controller,\n  ])\n\n  .run([viewModelKey, viewModel => {\n    viewModel.init();\n  }])\n  .name;\n\n  /**\n * @description Portfolio type definition\n * @typedef {object} position\n * @property {string} id                  Id of the position.\n * @property {srting} accountId           Identifier of an Account.\n * @property {string} assetClassId        Identifier of an Asset Class.\n * @property {srting} regionId            Identifier of a Region.\n * @property {string} countryId           Identifier of a Country.\n * @property {string} instrumentName      Official name of the instrument.\n * @property {string} instrumentCurrency  Currency in which the instrument is traded.\n * @property {string} instrumentCode      Code of the instrument used by the Bank.\n * @property {number} quantity            Total quantity of units\n *                                        in the Position.\n * @property {object} price               Price of one unit of the position\n *                                        in the instrument currency.\n * @property {number} exchangeRate        The current market exchange rate between\n *                                        client reference currency and instrument currency.\n * @property {object} valuation           Total cost/valuation of all assets/constituents.\n * @property {object} accruedInterest     Accrued Interest in the Client's currency.\n * @property {object} costPrice           The price in the currency of instrument used\n *                                        in the last transaciton.\n * @property {number} costExchangeRate    The exchange rate used in last transaction.\n * @property {object} unrealizedPL        The total amount of all potentially unrealized cash\n *                                        for all constituents of the given Asset Class.\n * @property {number} unrealizedPLPct     In percents the amount of unrealised PL.\n * @property {number} assetClassPct       In percents. The amount of the given position.\n * @property {number} portfolioPct        The amount of the current asset class.\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-positions-ng/scripts/index.js","import { Intent, Event } from './constants';\n\n/**\n * @name PositionsController\n * @ngkey PositionsController\n * @type {object}\n * @description\n * Positions controller.\n */\n\nexport default function PositionsController(\n  viewModel,\n  service,\n  eventBus,\n  bbIntents\n) {\n  const viewTransactionsIntent = bbIntents.create(Intent.TRANSACTION_LIST);\n\n  /**\n   * @name postponedTasks\n   * @type {Array}\n   * @inner\n   * @description\n   * list of tasks that will be invoked when positions data is loaded\n   */\n  const postponedTasks = [];\n\n  /**\n   * @name invokePostponedTasks\n   * @type {function}\n   * @inner\n   * @description\n   * Function invoking postponed tasks\n   * @return {void}\n   */\n  const invokePostponedTasks = () => {\n    postponedTasks.forEach(task => task());\n    postponedTasks.length = 0;\n  };\n\n  /**\n   * @name addToPostponedTasks\n   * @type {function}\n   * @inner\n   * @description\n   * Function adding task to the list of postponed tasks to invoke it after positions data is loaded\n   * @return {void}\n   */\n  const addToPostponedTasks = (task) => postponedTasks.push(task);\n\n  /**\n   * @description\n   * Function opening specific asset class in case data is already loaded, and postponing opening\n   * if positions data loading is in progress\n   * @type {function}\n   * @inner\n   * @param {Object} assetClass asset class to open\n   */\n  const tryOpenAssetClass = (assetClass) => {\n    if (!viewModel.getState().initialLoading) {\n      viewModel.openAssetClass(assetClass);\n    } else {\n      addToPostponedTasks(() => viewModel.openAssetClass(assetClass));\n    }\n  };\n\n  /**\n   * @private\n   * @description Initialize intents to listen to ASSETS_IN_POSITION event\n   * to open specific asset class\n   * @type {function}\n   */\n  const initIntents = () => {\n    bbIntents.handle(Intent.ASSETS_IN_POSITIONS, tryOpenAssetClass);\n    bbIntents.init(() => null);\n  };\n\n  /**\n   * @name viewTransactions\n   *\n   * @description\n   * Navigate to transactions list page\n   *\n   * @param {string} portfolioId ID of portfolio to load\n   * @param {string} positionId ID of positions to load\n   * @param {string} position instrument name of positions to load\n   * @type {function}\n   * @fires view.transactions\n   */\n  const viewTransactions = (portfolioId, positionId, positionInstrumentName) => {\n    /**\n     * @name params\n     * @type {object}\n     * @inner\n     * @property {string} portfolioId ID of portfolio to load\n     * @property {string} positionId ID of positions to load\n     */\n    const params = {\n      portfolioId,\n      positionId,\n      positionInstrumentName,\n    };\n\n    // @FIXME Publish event here in order tabs container can catch it and open needed tab.\n    // Once tabs container can understand intents (in the future), we will remove this part.\n    eventBus.publish(Event.TRANSACTION_LIST, params);\n\n    viewTransactionsIntent(params);\n  };\n\n  /**\n   * @description\n   * Handles loading positions\n   *\n   * @private\n   * @name PositionsController#loadPositions\n   * @type {function}\n   * Load positions\n   * @returns {promise.<array>}\n   */\n  const loadPositions = () => service.loadPositions();\n\n  /**\n   * @name $onInit\n   * @type {function}\n   * @description Init logic of widget. Invokes initialization of view model\n   */\n  const $onInit = () => {\n    initIntents();\n    return loadPositions()\n      .then(invokePostponedTasks);\n  };\n\n  /**\n   * @name onFinishScroll\n   * @type {function}\n   * @description Callback function. Invokes when scroll to view finishing\n   */\n  const onFinishScroll = () => {\n    viewModel.onScrollToAssetClassFinished();\n  };\n\n  return {\n    $onInit,\n    loadPositions,\n    viewTransactions,\n    onFinishScroll,\n    get state() {\n      return viewModel.getState();\n    },\n    get errors() {\n      return viewModel.getState().errors;\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-positions-ng/scripts/controller.js","/**\n * @name Intent\n * @type {object}\n *\n * @description\n * Widget intents to be handled\n *\n * @property {string} TRANSACTION_LIST  Used when clicking on the transaction icon\n * to move to the transaction list\n */\nexport const Intent = {\n  TRANSACTION_LIST: 'view.transactions',\n  ASSETS_IN_POSITIONS: 'view.portfolio.positions.assets',\n};\n\n/**\n * @name Event\n * @type {object}\n *\n * @description\n * Widget events to be handled\n *\n * @property {string} TRANSACTION_LIST  Used when clicking on the transaction icon\n * to move to the transaction list\n */\nexport const Event = {\n  TRANSACTION_LIST: 'view.transactions',\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-positions-ng/scripts/constants.js","import { wrapActions } from 'lib-wm-portfolio-view-model-helper';\n\n/**\n * @name initialState\n * @description Initial state of widgets store\n * @type {object}\n * @property {object} positions an object of positions\n * @property {boolean} initialLoading Boolean flag of initial loading\n * @property {errors} errors Errors model\n */\nconst initialState = {\n  positions: {\n    data: {\n      accounts: [],\n      assetClasses: [],\n      regions: [],\n      countries: [],\n      positions: [],\n    },\n    loading: false,\n  },\n  errors: {\n    positionsError: null,\n  },\n  initialLoading: true,\n};\n\nexport default (stateContainer) => ({\n  getState: stateContainer.getState,\n  ...wrapActions(stateContainer, {\n    init: (state = initialState) => state,\n    beforeLoadPositions: () => ({\n      initialLoading: true,\n      positions: {\n        loading: true,\n      },\n    }),\n    afterLoadPositionsSuccess: (state, raw) => ({\n      initialLoading: false,\n      positions: {\n        loading: false,\n        data: raw.data,\n      },\n      errors: {\n        positionsError: null,\n      },\n    }),\n    afterLoadPositionsError: (state, error) => ({\n      initialLoading: false,\n      positions: {\n        loading: false,\n        data: null,\n      },\n      errors: {\n        positionsError: error.code,\n      },\n    }),\n    openAssetClass: (state, { assetClassName }) => {\n      let accounts = state.positions.data.accounts;\n      let assetClasses = state.positions.data.assetClasses;\n\n      if (!assetClasses || !assetClasses.length) {\n        return state;\n      }\n\n      const openAccountIds = [];\n\n      assetClasses = assetClasses.map(assetClass => {\n        let isOpen = false;\n        if (assetClass.name === assetClassName) {\n          isOpen = true;\n          openAccountIds.push(assetClass.accountId);\n        }\n\n        return {\n          ...assetClass,\n          isOpen,\n        };\n      });\n\n      accounts = accounts.map(account => ({\n        ...account,\n        isOpen: !!openAccountIds.find(id => id === account.id),\n      }));\n\n      return {\n        positions: {\n          assetToScrollTo: assetClassName,\n          data: {\n            accounts,\n            assetClasses,\n          },\n        },\n      };\n    },\n    onScrollToAssetClassFinished: () => ({\n      positions: {\n        assetToScrollTo: null,\n      },\n    }),\n  }),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-positions-ng/scripts/view-model.js","export default (model, viewModel) => ({\n  /**\n   * @description\n   * Handles loading of positions\n   *\n   * @private\n   * @name PositionsController#loadPositions\n   * @type {function}\n   * @returns {promise.<array>}\n   */\n  loadPositions: () => {\n    viewModel.beforeLoadPositions();\n    return model.getSelectedPortfolioId()\n      .then(portfolioId => model.loadPortfolioPositions(portfolioId))\n      .then(viewModel.afterLoadPositionsSuccess)\n      .catch(viewModel.afterLoadPositionsError);\n  },\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-positions-ng/scripts/service.js"],"sourceRoot":""}