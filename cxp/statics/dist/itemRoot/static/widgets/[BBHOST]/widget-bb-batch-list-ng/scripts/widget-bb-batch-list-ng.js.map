{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///webpack/bootstrap 8cdceecee155e37df468?d533***","webpack:///./widget-bb-batch-list-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-batch-list-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"model-bb-batch-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///./widget-bb-batch-list-ng/scripts/controller.js","webpack:///./widget-bb-batch-list-ng/scripts/constants.js","webpack:///./widget-bb-batch-list-ng/scripts/default-hooks.js"],"names":["defaultHooks","hooksKey","module","factory","controller","run","bbIntent","init","name","BatchListController","errorMessages","DEFAULT_MAX_NAV_PAGES","DEFAULT_PAGINATION_TYPE","uiError","error","modelError","code","message","selections","selectedBatches","model","hooks","widget","bus","$ctrl","maxNavPages","getLongPreference","MAX_NAV_PAGES","paginationType","getStringPreference","PAGINATION_TYPE","showPendingAuthorizations","getBooleanPreference","SHOW_PENDING_AUTHORIZATIONS","batches","raw","totalCount","params","from","size","PAGE_SIZE","currentPage","totalItems","orderBy","defaultSortableColumn","direction","state","notifications","dismissTime","getDoublePreference","DISMISS_TIME","items","hasMore","length","loading","pageParams","legalEntityId","initialLoading","append","newItems","existingItems","replace","getBatchesPromise","getBatchesAuthorizations","getBatches","load","query","merge","Object","assign","then","data","processBatches","catch","getRequestParams","changePage","currentParams","reload","loadMore","done","onSort","removeSelectedBatch","selected","index","findIndex","id","batchId","splice","notifyOnAuthSuccess","publish","BATCH_AUTH_SUCCESS","res","notifyOnAuthFail","BATCH_AUTH_FAIL","err","authorize","authorizeBatch","notifyOnMultipleAuthResult","succeeded","BATCH_AUTH_MULTIPLE_SUCCESS","failed","BATCH_AUTH_MULTIPLE_FAIL","selectedAll","authorizeMultiple","authorizeMultipleBatches","notifyOnRejectSuccess","BATCH_REJECT_SUCCESS","notifyOnRejectFail","BATCH_REJECT_FAIL","reject","rejectBatch","notifyOnMultipleRejectResult","BATCH_REJECT_MULTIPLE_SUCCESS","BATCH_REJECT_MULTIPLE_FAIL","rejectMultiple","rejectMultipleBatches","bindEvents","subscribe","NOTIFICATION_EVENT","notification","push","$onInit","Preference","Event"],"mappings":"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","file":"widget-bb-batch-list-ng/scripts/widget-bb-batch-list-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-batch-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-batch-list-ng\", [\"vendor-bb-angular\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"model-bb-batch-ng\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-batch-list-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-batch-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"widget-bb-batch-list-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-bb-batch-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_30__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8cdceecee155e37df468","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-batch-list-ng/model.xml\n// module id = 0\n// module chunks = 4","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 19\n// module chunks = 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 22\n// module chunks = 2 4 5","/**\n * @module widget-bb-batch-list-ng\n *\n * @description\n * Batch list\n */\nimport angular from 'vendor-bb-angular';\n\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport modelModuleKey, { modelBatchKey } from 'model-bb-batch-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n\nimport Controller from './controller';\nimport * as defaultHooks from './default-hooks';\n\nconst hooksKey = 'widget-bb-batch-list-ng:hooks';\n\nexport default angular\n  .module('widget-bb-batch-list-ng', [\n    modelModuleKey,\n    widgetModuleKey,\n    bbEventBusModuleKey,\n    bbIntentModuleKey,\n  ])\n  .factory(hooksKey, extendHooks(defaultHooks))\n  .controller('BatchListController', [\n    // dependencies to inject\n    modelBatchKey,\n    hooksKey,\n    widgetKey,\n    eventBusKey,\n    /* into */\n    Controller,\n  ])\n  .run([bbIntentKey, (bbIntent) => {\n    bbIntent.init();\n  }])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-batch-list-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 26\n// module chunks = 4","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-batch-ng\"\n// module id = 27\n// module chunks = 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 28\n// module chunks = 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 29\n// module chunks = 4","module.exports = __WEBPACK_EXTERNAL_MODULE_30__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 30\n// module chunks = 4 5","import { E_AUTH, E_USER, E_CONNECTIVITY, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { Preference, Event } from './constants';\n\nconst errorMessages = {\n  [E_AUTH]: 'error.auth',\n  [E_USER]: 'error.user',\n  [E_CONNECTIVITY]: 'error.connectivity',\n  [E_UNEXPECTED]: 'error.unexpected',\n};\n\n/**\n * Defines the default maxNavPages for the accounts page\n * as defined in the widget model.xml\n * @type {int}\n */\nconst DEFAULT_MAX_NAV_PAGES = 3;\n\n/**\n * Defines the default paginationType for the accounts page\n * as defined in the widget model.xml\n * @type {string}\n */\nconst DEFAULT_PAGINATION_TYPE = 'load-more';\n\n/**\n * @description\n * Creates an error object for template\n *\n * @name uiError\n *\n * @inner\n * @param {object} modelError Error object\n * @type {function}\n * @returns {{message: string}}\n */\nconst uiError = modelError => {\n  let error = '';\n\n  if (modelError && modelError.code) {\n    error = errorMessages[modelError.code];\n  }\n\n  return {\n    message: error,\n  };\n};\n\nconst selections = {\n  selectedBatches: [],\n};\n\nexport default function BatchListController(model, hooks, widget, bus) {\n  /**\n   * @name BatchListController\n   * @ngkey BatchListController\n   * @type {object}\n   * @description\n   * Batch list controller\n   */\n  const $ctrl = this;\n\n  const maxNavPages =\n    widget.getLongPreference(Preference.MAX_NAV_PAGES) || DEFAULT_MAX_NAV_PAGES;\n  const paginationType =\n    widget.getStringPreference(Preference.PAGINATION_TYPE) || DEFAULT_PAGINATION_TYPE;\n  const showPendingAuthorizations =\n    widget.getBooleanPreference(Preference.SHOW_PENDING_AUTHORIZATIONS);\n\n  /**\n   * @name batches\n   * @type {object}\n   *\n   * @inner\n   * @property {array} raw Raw collection of batches\n   * @property {object} params\n   * @property {number} params.from Index of first batch to retrieve\n   * @property {number} params.size Number of batches to retrieve\n   * @property {string} params.orderBy Column key currently sorted\n   * @property {string} params.direction Sorting direction, `ASC` or `DESC`\n   */\n  const batches = {\n    raw: [],\n    totalCount: 0,\n    params: {\n      from: 0,\n      size: widget.getLongPreference(Preference.PAGE_SIZE),\n      currentPage: 1,\n      totalItems: 0,\n      maxNavPages,\n      paginationType,\n      orderBy: hooks.defaultSortableColumn(),\n      direction: null,\n    },\n  };\n\n  /**\n   * @name BatchListController#state\n   * @type {object}\n   *\n   * @property {object}  batches\n   * @property {array}   batches.items List of batches\n   * @property {string}  batches.orderBy Column key currently sorted\n   * @property {string}  batches.direction Sorting direction, `ASC` or `DESC`\n   * @property {boolean} batches.loading Indicates if it is loading batches\n   * @property {object}  batches.error Store error while retrieving batches\n   */\n  const state = {\n    notifications: [],\n    dismissTime: widget.getDoublePreference(Preference.DISMISS_TIME),\n    batches: {\n      items: [],\n      get orderBy() { return batches.params.orderBy; },\n      get direction() { return batches.params.direction; },\n      hasMore: () => batches.raw.length < batches.totalCount,\n      loading: false,\n      error: null,\n    },\n    pageParams: batches.params,\n    legalEntityId: 'legalentityId',\n    initialLoading: true,\n  };\n\n  /**\n   * Merges new batches with existing batches\n   *\n   * @inner\n   * @name append\n   * @type {function}\n   * @returns {array} merged array of old and new batches\n   */\n  const append = (newItems, existingItems) => [...existingItems, ...newItems];\n\n  /**\n   * Replaces existing batches with new batches\n   *\n   * @inner\n   * @name replace\n   * @type {function}\n   * @returns {array} new batches\n   */\n  const replace = items => items;\n\n  /**\n   * @name getBatchesPromise\n   *\n   * @description\n   * Loads all or pending authorization batches,\n   * depending on showPendingAuthorizations property\n   * @inner\n   * @type {function}\n   *\n   * @param params A request params\n   * @returns {Promise}\n   */\n  function getBatchesPromise(params = {}) {\n    if (showPendingAuthorizations) {\n      return model.getBatchesAuthorizations(state.legalEntityId, params);\n    }\n\n    return model.getBatches(state.legalEntityId, params);\n  }\n\n  /**\n   * @name load\n   *\n   * @description\n   * Loads batches data, called from $onInit\n   * @inner\n   * @see $onInit\n   *\n   * @type {function}\n   * @returns {Promise}\n   */\n  function load(query, merge = replace) {\n    state.batches.error = null;\n    state.batches.loading = true;\n    const params = Object.assign({}, batches.params, query || {});\n    return getBatchesPromise(params)\n    .then(raw => {\n      state.batches.loading = false;\n      batches.raw = merge(raw.data, batches.raw);\n      batches.totalCount = raw.totalCount;\n      batches.params.totalItems = raw.totalCount || 0;\n      batches.params.currentPage = params.currentPage;\n      state.batches.items = hooks.processBatches(batches.raw);\n      return state.batches.items;\n    })\n    .catch(error => {\n      state.batches.error = uiError(error);\n      state.batches.loading = false;\n    });\n  }\n\n  /**\n   * @description\n   * Get params for request.\n   *\n   * @name BatchListController#getRequestParams\n   *\n   * @inner\n   * @param {Object} params Custom params\n   * @type {function}\n   * @returns {Object} A request params\n   */\n  const getRequestParams = (params) => Object.assign({}, batches.params, {\n    // In BE services pagination starts from 0 page, but in bootstrap directive it's 1\n    from: params.currentPage - 1,\n  }, params);\n\n  /**\n   * @description\n   * Change page of displayed batches.\n   *\n   * @name BatchListController#changePage\n   * @type {function}\n   * @returns {Promise.<module:model-bb-batch-ng.Batches, ModelError>}\n   * A Promise with loaded batches\n   */\n  const changePage = (params = {}) => {\n    const currentParams = getRequestParams(params);\n\n    return load(currentParams);\n  };\n\n  /**\n   * @name reload\n   *\n   * @description\n   * Reloads batches data\n   * @inner\n   *\n   * @type {function}\n   * @returns {Promise}\n   */\n  const reload = () => load({\n    from: state.pageParams.currentPage ? (state.pageParams.currentPage - 1) : 0,\n    size: batches.params.size,\n  });\n\n  /**\n   * @name BatchListController#loadMore\n   *\n   * @description\n   * Loads next page of items\n   *\n   * @type {function}\n   * @param {function} done Callback to call when finished loading\n   * @returns {Promise}\n   */\n  const loadMore = done => {\n    batches.params.from += batches.params.size;\n    return load({}, append).then(done, done);\n  };\n\n  /**\n   * @name BatchListController#onSort\n   * @type {function}\n   * @description\n   * Loads sorted list of batches\n   * @param  {string} orderBy   Column key to sort\n   * @param  {string} direction Sort direction\n   */\n  const onSort = (orderBy, direction) => {\n    Object.assign(batches.params, {\n      orderBy,\n      direction,\n    });\n    reload();\n  };\n\n  /**\n   * @name removeSelectedBatch\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Remove batch id from selected batches orders.\n   *\n   * @returns {void}\n   */\n  const removeSelectedBatch = batchId => {\n    const selected = selections.selectedBatches;\n    const index = selected.findIndex(id => id === batchId);\n    if (index > -1) {\n      selected.splice(index, 1);\n    }\n  };\n\n  /**\n   * @name notifyOnAuthSuccess\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on authorization request's success.\n   *\n   * @fires bb.event.batch.auth.success\n   *\n   * @returns {object}\n   */\n  const notifyOnAuthSuccess = res => {\n    bus.publish(Event.BATCH_AUTH_SUCCESS, res);\n  };\n\n  /**\n   * @name notifyOnAuthFail\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on authorization request's failure.\n   *\n   * @fires bb.event.batch.auth.fail\n   *\n   * @returns {object}\n   */\n  const notifyOnAuthFail = err => {\n    bus.publish(Event.BATCH_AUTH_FAIL, err);\n  };\n\n  /**\n   * @name authorize\n   * @type {function}\n   *\n   * @description\n   * Request batch authorization.\n   *\n   * @param {string} batchId Id of the batch\n   *\n   * @returns {Promise}\n   */\n  const authorize = batchId =>\n    model.authorizeBatch(state.legalEntityId, batchId)\n      .then(notifyOnAuthSuccess)\n      .then(() => removeSelectedBatch(batchId))\n      .then(reload)\n      .catch(notifyOnAuthFail);\n\n  /**\n   * @name notifyOnMultipleAuthResult\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on multiple authorization results.\n   *\n   * @fires bb.event.bactch.auth.multiple.success\n   * @fires bb.event.bactch.auth.multiple.fail\n   *\n   * @returns {object}\n   */\n  const notifyOnMultipleAuthResult = res => {\n    if (res.succeeded.length) {\n      bus.publish(Event.BATCH_AUTH_MULTIPLE_SUCCESS, res.succeeded.length);\n    }\n\n    if (res.failed.length) {\n      bus.publish(Event.BATCH_AUTH_MULTIPLE_FAIL, res.failed.length);\n    }\n\n    // Keep selected failed payments only\n    selections.selectedBatches = res.failed || [];\n    selections.selectedAll = false;\n  };\n\n  /**\n   * @name authorizeMultiple\n   * @type {function}\n   *\n   * @description\n   * Request list of batches authorization.\n   *\n   * @param {array} selectedBatches Collection of batches id\n   *\n   * @returns {Promise}\n   */\n  const authorizeMultiple = selectedBatches =>\n    model.authorizeMultipleBatches(state.legalEntityId, selectedBatches)\n      .then(notifyOnMultipleAuthResult)\n      .then(reload)\n      .catch(error => {\n        state.batches.error = uiError(error);\n      });\n\n  /**\n   * @name notifyOnRejectSuccess\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on rejection request's success.\n   *\n   * @fires bb.event.batch.reject.success\n   *\n   * @returns {object}\n   */\n  const notifyOnRejectSuccess = (res) => {\n    bus.publish(Event.BATCH_REJECT_SUCCESS, res);\n  };\n\n  /**\n   * @name notifyOnRejectFail\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on rejection request's failure.\n   *\n   * @fires bb.event.batch.reject.fail\n   *\n   * @returns {object}\n   */\n  const notifyOnRejectFail = (err) => {\n    bus.publish(Event.BATCH_REJECT_FAIL, err);\n  };\n\n  /**\n   * @name reject\n   * @type {function}\n   *\n   * @description\n   * Request batch rejection.\n   *\n   * @param {string} batchId Id of the batch\n   *\n   * @returns {Promise}\n   */\n  const reject = batchId =>\n    model.rejectBatch(state.legalEntityId, batchId)\n      .then(notifyOnRejectSuccess)\n      .then(() => removeSelectedBatch(batchId))\n      .then(reload)\n      .catch(notifyOnRejectFail);\n\n /**\n   * @name notifyOnMultipleRejectResult\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on multiple rejection results.\n   *\n   * @fires bb.event.batch.reject.multiple.success\n   * @fires bb.event.batch.reject.multiple.fail\n   *\n   * @returns {object}\n   */\n  const notifyOnMultipleRejectResult = (res) => {\n    if (res.succeeded.length) {\n      bus.publish(Event.BATCH_REJECT_MULTIPLE_SUCCESS, res.succeeded.length);\n    }\n\n    if (res.failed.length) {\n      bus.publish(Event.BATCH_REJECT_MULTIPLE_FAIL, res.failed.length);\n    }\n\n    // Keep selected failed payments only\n    selections.selectedBatches = res.failed || [];\n    selections.selectedAll = false;\n  };\n\n  /**\n   * @name rejectMultiple\n   * @type {function}\n   *\n   * @description\n   * Request multiple bacthes rejection.\n   *\n   * @param {array} selectedBatches Collection of batches id\n   *\n   * @returns {Promise}\n   */\n  const rejectMultiple = selectedBatches =>\n    model.rejectMultipleBatches(state.legalEntityId, selectedBatches)\n      .then(notifyOnMultipleRejectResult)\n      .then(reload)\n      .catch(error => {\n        state.batches.error = uiError(error);\n      });\n\n  /**\n   * @name bindEvents\n   *\n   * @description\n   * Adds subscriptions to bus events\n   *\n   * @inner\n   * @type {function}\n   */\n  const bindEvents = () => {\n    bus.subscribe(Event.NOTIFICATION_EVENT, (notification) => {\n      state.notifications.push(notification);\n    });\n  };\n\n  /**\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @name BatchListController#$onInit\n   * @type {function}\n   */\n  const $onInit = () => load()\n    .then(bindEvents)\n    .then(() => (state.initialLoading = false))\n    .catch(() => (state.initialLoading = false));\n\n  Object.assign($ctrl, {\n    state,\n    $onInit,\n    loadMore,\n    onSort,\n    authorize,\n    authorizeMultiple,\n    reject,\n    rejectMultiple,\n    selections,\n    changePage,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-batch-list-ng/scripts/controller.js","/**\n * @name Preference\n * @type {object}\n *\n * @description\n * Widget preferences enum\n *\n * @property {string} PAGE_SIZE Number of items per page\n * @property {number} MAX_NAV_PAGES Number of pagination items\n * @property {string} PAGINATION_TYPE Type of pagination (paginator, load-more)\n * @property {boolean} SHOW_PENDING_AUTHORIZATIONS Show only pending authorization batches\n */\nexport const Preference = {\n  PAGE_SIZE: 'bb.batch-list.pageSize',\n  MAX_NAV_PAGES: 'bb.batch-list.maxNavPages',\n  PAGINATION_TYPE: 'bb.batch-list.paginationType',\n  DISMISS_TIME: 'bb.batch-list.notificationDismissTime',\n  SHOW_PENDING_AUTHORIZATIONS: 'bb.batch-list.showPendingAuthorizations',\n};\n\n/**\n * @name Event\n * @type {object}\n *\n * @description\n * Widget events names\n */\nexport const Event = {\n  BATCH_AUTH_SUCCESS: 'bb.event.batch.auth.success',\n  BATCH_AUTH_FAIL: 'bb.event.batch.auth.fail',\n  BATCH_AUTH_MULTIPLE_SUCCESS: 'bb.event.batch.multiple.auth.success',\n  BATCH_AUTH_MULTIPLE_FAIL: 'bb.event.batch.multiple.auth.fail',\n  BATCH_REJECT_SUCCESS: 'bb.event.batch.reject.success',\n  BATCH_REJECT_FAIL: 'bb.event.batch.reject.fail',\n  BATCH_REJECT_MULTIPLE_SUCCESS: 'bb.event.batch.multiple.reject.success',\n  BATCH_REJECT_MULTIPLE_FAIL: 'bb.event.batch.multiple.reject.fail',\n  NOTIFICATION_EVENT: 'bb.event.notifications.notify',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-batch-list-ng/scripts/constants.js","/**\n * @name default-hooks\n * @type {object}\n *\n * @description\n * Default hooks for widget-bb-batch-list-ng\n */\n\n/**\n * @name default-hooks#processBatches\n *\n * @description\n * processBatches default hook\n *\n * @param {object} batches Collection of batches\n * @type {function}\n * @returns {object} batches\n */\nexport const processBatches = batches => batches;\n\n/**\n * @name default-hooks#defaultSortableColumn\n *\n * @description\n * defaultSortableColumn default hook\n *\n * @type {function}\n * @returns {?string}\n */\nexport const defaultSortableColumn = () => null;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-batch-list-ng/scripts/default-hooks.js"],"sourceRoot":""}