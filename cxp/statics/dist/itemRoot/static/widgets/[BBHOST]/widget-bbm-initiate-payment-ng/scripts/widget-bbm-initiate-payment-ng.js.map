{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*******************************","webpack:///webpack/bootstrap 70052c6c6190d07a36f3?d006*******************************","webpack:///./widget-bbm-initiate-payment-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114**********************","webpack:///external \"lib-bb-widget-ng\"?84ad***","webpack:///external \"lib-bb-storage-ng\"?d742*","webpack:///external \"lib-bb-model-errors\"?7567*****","webpack:///external \"lib-bb-event-bus-ng\"?8215***","webpack:///external \"lib-bb-widget-extension-ng\"?b547****","webpack:///external \"lib-bb-intent-ng\"?add1**","webpack:///external \"model-bb-payment-orders-ng\"?e196****","webpack:///external \"lib-bb-state-container-ng\"?8d56*","webpack:///external \"lib-bb-extension-intents-ng\"?0045","webpack:///./widget-bbm-initiate-payment-ng/scripts/index.js","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"lib-bb-extension-events-ng\"","webpack:///./widget-bbm-initiate-payment-ng/scripts/constants.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/controllers/form.controller.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/events.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/service.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/index.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/initial-state.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/beneficiaries.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/helpers.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/contacts.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/currencies.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/debit-accounts.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model/payment.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/default-hooks.js"],"names":["defaultHooks","moduleKey","eventServiceKey","hooksKey","serviceKey","viewModelKey","angular","module","bbExtensionHelpersModuleKey","bbExtensionEventsModuleKey","bbExtensionIntentsModuleKey","bbStorageModuleKey","eventBusModuleKey","intentModuleKey","modelPaymentOrdersModuleKey","stateContainerModuleKey","widgetModuleKey","factory","bbStateContainerKey","bbStorageServiceKey","ViewModel","eventBusKey","widgetEvents","widgetKey","modelPaymentOrdersKey","createService","extensionHelpersContextKey","bbIntentKey","bbIntent","service","bus","extensionEventsContextKey","stateContainer","extensionIntentsContextKey","controller","FormController","run","viewModel","bbIntents","eventBus","widget","init","then","publish","Event","CXP_ITEM_LOADED","id","getId","BB_ITEM_LOADED","name","AccountType","DEBIT","CREDIT","CONTACT_CREATE_START","CONTACT_CREATE_DONE","CONTACT_CREATE_FAILED","CONTACT_DELETE_DONE","CONTACT_UPDATE_DONE","BENEFICIARIES_LOAD_FAILED","DEBIT_ACCOUNTS_LOAD_FAILED","PAYMENT_DONE","PAYMENT_FAILED","PAYMENT_START","SELECT_ACCOUNT_LOAD_START","SELECT_ACCOUNT_LOAD_DONE","SELECT_ACCOUNT_FAILED","SHOW_PIN","PIN_CONFIRMATION_SUCCESSFUL","PaymentMode","SINGLE","RECURRING","RecurrenceEnding","NEVER","ON","AFTER","StorageKey","PAYMENT","TransferFrequency","ONCE","DAILY","WEEKLY","MONTHLY","QUARTERLY","YEARLY","Preference","REVIEW_STEP","URGENT","DESCRIPTION_REGEX","events","ctrl","bindEvents","subscribe","updateBeneficiaries","$onInit","initPaymentForm","Object","assign","beforeContactCreate","afterContactCreateSuccess","afterContactCreateError","error","afterBeneficiariesLoadError","afterDebitAccountsLoadError","beforePayment","afterPaymentSuccess","afterPaymentError","beforeOpenSelectAccount","type","afterOpenSelectAccountSuccess","afterOpenSelectAccountError","model","hooks","Promise","debitAccountsPromise","beneficiariesPromise","preferences","urgent","getBooleanPreference","recurring","showPin","reviewStep","descriptionRegex","getStringPreference","getPreferences","formatDate","date","Date","dateArg","month","String","getMonth","day","getDate","year","getFullYear","padStart","isSameAccount","accountA","accountB","identifier","getPayment","createSelector","state","payment","data","getSelectedBeneficiary","beneficiary","getBeneficiaries","beneficiaries","getContacts","contacts","getCurrencies","currencies","getDebitAccounts","debitAccounts","getSaveContact","saveContact","getSelectedDebitAccount","debitAccount","getSelectedBeneficiaryAccount","beneficiaryAccount","creditAccounts","find","item","isBeneficiaryComplete","Boolean","isBeneficiaryExternal","isBeneficiaryNew","allBeneficiaries","isBeneficiaryExisting","some","isRecurring","schedule","transferFrequency","getContactIdentification","identification","schemeName","getCreditAccountIdentification","creditAccount","getBeneficiaryIdentification","getScheduleRecurringDay","startDate","dayOfWeek","getDay","getSchedulePayload","end","every","repeat","on","endDate","schedulePayload","getPaymentPayload","amount","additions","creditorAccount","requestedExecutionDate","payload","debtorAccount","arrangementId","paymentMode","creditTransferTransactionInformation","instructedAmount","value","currencyCode","currency","creditor","instructionPriority","description","remittanceInformation","processPaymentPayload","getContactPayload","accounts","IBAN","contact","loadDebitAccounts","beforeDebitAccountsLoad","getAccountsFrom","afterDebitAccountsLoadSuccess","catch","authorizePayment","resolve","authorizePaymentIfNeeded","createContact","isExternalTransferAllowed","externalTransferAllowed","loadContacts","getExternals","afterContactsLoadSuccess","loadCreditAccounts","getAccountsTo","loadCurrencies","beforeCurrenciesLoad","afterCurrenciesLoadSuccess","updatePaymentCurrency","afterCurrenciesLoadError","loadBeneficiaries","requests","beforeBeneficiariesLoad","all","afterBeneficiariesLoadSuccess","canSaveContact","isUrgentPaymentAllowed","isAllowedByAccount","urgentTransferAllowed","currentDate","isNotFuture","makePayment","createPaymentOrder","makePaymentWithAuthorization","resetBeneficiaryIfNeeded","isBeneficiaryInvalid","resetPaymentBeneficiary","saveContactIfNeeded","prepareBeneficiaries","reject","prepareDebitAccounts","setBeneficiary","setPaymentBeneficiary","setDebitAccount","setPaymentDebitAccount","account","setPayment","setSaveContact","saveContactValue","setSchedule","setUrgentPayment","setPaymentUrgent","resetContacts","initPaymentData","doReset","resetPayment","initBeneficiaries","initCurrencies","initDebitAccounts","startNewPayment","initialPaymentData","bbStorage","initialState","createAction","getInitialSchedule","today","defaultCurrency","getInitialBeneficiary","getInitialPayment","processInitialPaymentState","allowedCurrencies","loading","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","addCurrency","includes","curr","unshift","getAccountCurrency","getAllowedCurrencies","crossCurrencyAllowed","allCurrencies","debitAccountCurrency","uiError","message","code","initialPayment","processedInitialPayment","alias","isNew","paymentPayload"],"mappings":"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","file":"widget-bbm-initiate-payment-ng/scripts/widget-bbm-initiate-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bbm-initiate-payment-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-intent-ng\", \"model-bb-payment-orders-ng\", \"lib-bb-state-container-ng\", \"lib-bb-extension-intents-ng\", \"lib-bb-extension-helpers-ng\", \"lib-bb-extension-events-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bbm-initiate-payment-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"));\n\telse\n\t\troot[\"widget-bbm-initiate-payment-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-intent-ng\"], root[\"model-bb-payment-orders-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-extension-intents-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"lib-bb-extension-events-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_142__, __WEBPACK_EXTERNAL_MODULE_146__, __WEBPACK_EXTERNAL_MODULE_148__, __WEBPACK_EXTERNAL_MODULE_193__, __WEBPACK_EXTERNAL_MODULE_194__, __WEBPACK_EXTERNAL_MODULE_195__, __WEBPACK_EXTERNAL_MODULE_196__, __WEBPACK_EXTERNAL_MODULE_203__, __WEBPACK_EXTERNAL_MODULE_204__, __WEBPACK_EXTERNAL_MODULE_248__, __WEBPACK_EXTERNAL_MODULE_249__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 70052c6c6190d07a36f3","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bbm-initiate-payment-ng/model.xml\n// module id = 0\n// module chunks = 32","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 18\n// module chunks = 0 8 9 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_142__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 142\n// module chunks = 16 27 28 30 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_146__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 146\n// module chunks = 16 27 32","module.exports = __WEBPACK_EXTERNAL_MODULE_148__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 148\n// module chunks = 16 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_193__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 193\n// module chunks = 27 28 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_194__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 194\n// module chunks = 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_195__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 195\n// module chunks = 27 28 29 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_196__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-payment-orders-ng\"\n// module id = 196\n// module chunks = 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_203__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 203\n// module chunks = 28 30 32","module.exports = __WEBPACK_EXTERNAL_MODULE_204__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-intents-ng\"\n// module id = 204\n// module chunks = 28 32","/**\n * @module widget-bbm-initiate-payment-ng\n *\n * @description\n * Mobile Initiate Payment widget.\n *\n * @example\n *  <!-- Initiate Payment Form Extension -->\n *  <div ng-controller=\"FormController as $ctrl\">\n *    <form name=\"initiate-payment-form\">\n *      <input\n *        type=\"text\"\n *        name=\"description\"\n *        value=\"$ctrl.state.payment.data.description\"/>\n *    </form>\n *  </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport modelPaymentOrdersModuleKey, { modelPaymentOrdersKey } from 'model-bb-payment-orders-ng';\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\n\nimport bbExtensionEventsModuleKey, {\n  extensionEventsContextKey,\n} from 'lib-bb-extension-events-ng';\n\nimport bbExtensionIntentsModuleKey, {\n  extensionIntentsContextKey,\n} from 'lib-bb-extension-intents-ng';\n\nimport { Event } from './constants';\n\nimport FormController from './controllers/form.controller';\n\nimport widgetEvents from './events';\nimport createService from './service';\nimport ViewModel from './view-model';\n\nimport * as defaultHooks from './default-hooks';\n\nconst moduleKey = 'widget-bbm-initiate-payment-ng';\nconst eventServiceKey = `${moduleKey}:events`;\nconst hooksKey = `${moduleKey}:hooks`;\nconst serviceKey = `${moduleKey}:service`;\nconst viewModelKey = `${moduleKey}:viewModel`;\n\nexport default angular\n  .module(moduleKey, [\n    // dependencies to inject\n    bbExtensionHelpersModuleKey,\n    bbExtensionEventsModuleKey,\n    bbExtensionIntentsModuleKey,\n    bbStorageModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n    modelPaymentOrdersModuleKey,\n    stateContainerModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(viewModelKey, [\n    // dependencies to inject\n    bbStateContainerKey,\n    bbStorageServiceKey,\n    hooksKey,\n\n    // into\n    ViewModel,\n  ])\n\n  .factory(eventServiceKey, [\n    // dependencies to inject\n    eventBusKey,\n\n    // into\n    widgetEvents,\n  ])\n\n  .factory(serviceKey, [\n    // dependencies to inject\n    widgetKey,\n    modelPaymentOrdersKey,\n    viewModelKey,\n    bbStateContainerKey,\n    hooksKey,\n    eventServiceKey,\n    eventBusKey,\n    '$q',\n\n    // into\n    createService,\n  ])\n\n  .factory(extensionHelpersContextKey, [\n    // dependencies to inject\n    bbIntentKey,\n    serviceKey,\n    eventBusKey,\n\n    // into\n    (bbIntent, service, bus) => ({ bbIntent, service, bus }),\n  ])\n\n  .factory(extensionEventsContextKey, [\n    // dependencies to inject\n    bbIntentKey,\n    bbStateContainerKey,\n    serviceKey,\n    eventBusKey,\n\n    // into\n    (bbIntent, stateContainer, service, bus) => ({\n      bbIntent,\n      stateContainer,\n      service,\n      bus,\n    }),\n  ])\n\n  .factory(extensionIntentsContextKey, [\n    // dependencies to inject\n    serviceKey,\n\n    // into\n    (service) => ({ service }),\n  ])\n\n  .controller('FormController', [\n    // dependencies to inject\n    serviceKey,\n    eventServiceKey,\n    eventBusKey,\n\n    // into\n    FormController,\n  ])\n\n  .run([\n    // dependencies to inject\n    viewModelKey,\n    bbIntentKey,\n    eventBusKey,\n    widgetKey,\n\n    // into\n    (viewModel, bbIntents, eventBus, widget) => {\n      viewModel.init();\n\n      bbIntents.init()\n        .then(() => {\n          // This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n          // and will be removed with the update to widget collection 3 (WC3)\n          eventBus.publish(Event.CXP_ITEM_LOADED, {\n            id: widget.getId(),\n          });\n\n          eventBus.publish(Event.BB_ITEM_LOADED, {\n            id: widget.getId(),\n          });\n        });\n    },\n  ])\n\n  .name;\n\n/**\n * @typedef {Object} AccountView\n * @property {string} id The internal account identifier\n * @property {string} name The account's name, suitable for display to users\n * @property {?string} identifier The identifier of the account from the user's perspective\n * @property {?string} amount The most important associated value to be displayed\n * @property {?string} currency Account currency\n * @property {?boolean} external Whether the account is external\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_248__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 248\n// module chunks = 32","module.exports = __WEBPACK_EXTERNAL_MODULE_249__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-events-ng\"\n// module id = 249\n// module chunks = 32","export const AccountType = {\n  DEBIT: 'debit',\n  CREDIT: 'credit',\n};\n\n/**\n * Pubsub events\n * @type {Object}\n */\nexport const Event = {\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n  BB_ITEM_LOADED: 'bb.item.loaded',\n\n  CONTACT_CREATE_START: 'bb.event.contact.create.start',\n  CONTACT_CREATE_DONE: 'bb.event.contact.create.done',\n  CONTACT_CREATE_FAILED: 'bb.event.contact.create.failed',\n  CONTACT_DELETE_DONE: 'bb.event.contact.delete.done',\n  CONTACT_UPDATE_DONE: 'bb.event.contact.update.done',\n\n  BENEFICIARIES_LOAD_FAILED: 'bb.event.payment.beneficiaries.load.failed',\n  DEBIT_ACCOUNTS_LOAD_FAILED: 'bb.event.payment.debitAccounts.load.failed',\n\n  PAYMENT_DONE: 'bb.event.payment.done',\n  PAYMENT_FAILED: 'bb.event.payment.failed',\n  PAYMENT_START: 'bb.event.payment.started',\n\n  SELECT_ACCOUNT_LOAD_START: 'bb.event.payment.selectAccount.load.start',\n  SELECT_ACCOUNT_LOAD_DONE: 'bb.event.payment.selectAccount.load.done',\n  SELECT_ACCOUNT_FAILED: 'bb.event.payment.selectAccount.failed',\n\n  SHOW_PIN: 'bb.action.pin.show',\n  PIN_CONFIRMATION_SUCCESSFUL: 'bb.event.pin.confirmation.success',\n};\n\n/**\n * Payment mode. Denotes whether payment will be single or will be recurring.\n * @type {Object}\n */\nexport const PaymentMode = {\n  SINGLE: 'SINGLE',\n  RECURRING: 'RECURRING',\n};\n\n/**\n * Options when to end a recurring payment.\n * @type {Object}\n */\nexport const RecurrenceEnding = {\n  NEVER: 'NEVER',\n  ON: 'ON',\n  AFTER: 'AFTER',\n};\n\n/**\n * Storage keys\n * @type {Object}\n */\nexport const StorageKey = {\n  PAYMENT: 'bb.payment.payment',\n};\n\n/**\n * Transfer frequency. Denotes how frequently the transfer should be made.\n * @type {Object}\n */\nexport const TransferFrequency = {\n  ONCE: 'ONCE',\n  DAILY: 'DAILY',\n  WEEKLY: 'WEEKLY',\n  MONTHLY: 'MONTHLY',\n  QUARTERLY: 'QUARTERLY',\n  YEARLY: 'YEARLY',\n};\n\n/**\n * Widget preferences enum\n * @name Preference\n * @type {object}\n */\nexport const Preference = {\n  REVIEW_STEP: 'bb.payment.review.step',\n  SHOW_PIN: 'bb.payment.show.pin',\n  URGENT: 'bb.payment.urgent',\n  RECURRING: 'bb.payment.recurring',\n  DESCRIPTION_REGEX: 'bb.payment.description.REGEX',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/constants.js","import { Event } from '../constants';\n\nexport default function FormController(service, events, bus) {\n  /**\n   * @name FormController\n   * @ngkey FormController\n   *\n   * @description\n   * Initiate payment widget form controller.\n   * Loads debit accounts and beneficiaries on start.\n   * Provides API to make a payment.\n   *\n   * @type {Object}\n   */\n  const ctrl = this;\n\n  /**\n   * @name bindEvents\n   * @type {function}\n   * @description\n   * Subscribes to events.\n   * @inner\n   */\n  const bindEvents = () => {\n    bus.subscribe(Event.CONTACT_CREATE_DONE, () => {\n      service.updateBeneficiaries();\n    });\n\n    bus.subscribe(Event.CONTACT_UPDATE_DONE, () => {\n      service.updateBeneficiaries();\n    });\n\n    bus.subscribe(Event.CONTACT_DELETE_DONE, () => {\n      service.updateBeneficiaries();\n    });\n  };\n\n  /**\n   * @name FormController#$onInit\n   * @type {function}\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   * Initializes payment form.\n   */\n  const $onInit = () => {\n    service.initPaymentForm();\n    bindEvents();\n  };\n\n  Object.assign(ctrl, {\n    $onInit,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/controllers/form.controller.js","import { Event } from './constants';\n\nexport default (bus) => ({\n  beforeContactCreate() {\n    bus.publish(Event.CONTACT_CREATE_START);\n  },\n\n  afterContactCreateSuccess() {\n    bus.publish(Event.CONTACT_CREATE_DONE);\n  },\n\n  afterContactCreateError(error) {\n    bus.publish(Event.CONTACT_CREATE_FAILED, {\n      error,\n    });\n  },\n\n  afterBeneficiariesLoadError(error) {\n    bus.publish(Event.BENEFICIARIES_LOAD_FAILED, {\n      error,\n    });\n  },\n\n  afterDebitAccountsLoadError(error) {\n    bus.publish(Event.DEBIT_ACCOUNTS_LOAD_FAILED, {\n      error,\n    });\n  },\n\n  beforePayment() {\n    bus.publish(Event.PAYMENT_START);\n  },\n\n  afterPaymentSuccess() {\n    bus.publish(Event.PAYMENT_DONE);\n  },\n\n  afterPaymentError(error) {\n    bus.publish(Event.PAYMENT_FAILED, {\n      error,\n    });\n  },\n\n  beforeOpenSelectAccount(type) {\n    bus.publish(Event.SELECT_ACCOUNT_LOAD_START, {\n      type,\n    });\n  },\n\n  afterOpenSelectAccountSuccess(type) {\n    bus.publish(Event.SELECT_ACCOUNT_LOAD_DONE, {\n      type,\n    });\n  },\n\n  afterOpenSelectAccountError(type, error) {\n    bus.publish(Event.SELECT_ACCOUNT_FAILED, {\n      error,\n      type,\n    });\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/events.js","/**\n * @name InitiatePaymentService\n * @type {Object}\n * @ngkey widget-bbm-initiate-payment-ng:service\n * @description\n * The service encapsulates the core functionality of the Initiate Payment Widget.\n */\n\nimport {\n  AccountType,\n  Event,\n  PaymentMode,\n  RecurrenceEnding,\n  TransferFrequency,\n  Preference,\n} from './constants';\n\nexport default (\n  widget,\n  model,\n  viewModel,\n  stateContainer,\n  hooks,\n  events,\n  bus,\n  Promise\n) => {\n  /**\n   * @name debitAccountsPromise\n   * @type {Promise}\n   * @description\n   * The promise of the request to load debit accounts.\n   * @inner\n   */\n  let debitAccountsPromise;\n\n  /**\n   * @name beneficiariesPromise\n   * @type {Promise}\n   * @description\n   * The promise of the request to load beneficiaries.\n   * @inner\n   */\n  let beneficiariesPromise;\n\n  const preferences = {\n    urgent: widget.getBooleanPreference(Preference.URGENT),\n    recurring: widget.getBooleanPreference(Preference.RECURRING),\n    showPin: widget.getBooleanPreference(Preference.SHOW_PIN),\n    reviewStep: widget.getBooleanPreference(Preference.REVIEW_STEP),\n    descriptionRegex: widget.getStringPreference(Preference.DESCRIPTION_REGEX),\n  };\n\n  /**\n   * @name InitiatePaymentService#getPreferences\n   * @type {function}\n   * @description\n   * Returns widget preferences.\n   * @returns {Object}\n   */\n  const getPreferences = () => preferences;\n\n  const formatDate = dateArg => {\n    const date = new Date(dateArg);\n\n    const month = String(date.getMonth() + 1);\n    const day = String(date.getDate());\n    const year = String(date.getFullYear());\n\n    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n  };\n\n  /**\n   * @name isSameAccount\n   * @type {function}\n   * @description\n   * Checks if the given accountA is the same account as the given accountB.\n   * @param {AccountView} accountA\n   * @param {AccountView} accountB\n   * @returns {boolean}\n   * @inner\n   */\n  const isSameAccount = (accountA, accountB) => (\n    accountA.identifier === accountB.identifier &&\n    accountA.identifier && accountB.identifier\n  );\n\n  /**\n   * @name getPayment\n   * @type {function}\n   * @description\n   * Returns the payment object.\n   * @returns {Payment}\n   * @inner\n   */\n  const getPayment = stateContainer.createSelector(\n    state => state.payment.data\n  );\n\n  /**\n   * @name getSelectedBeneficiary\n   * @type {function}\n   * @description\n   * Returns the selected beneficiary of the payment.\n   * @returns {Beneficiary}\n   * @inner\n   */\n  const getSelectedBeneficiary = () => (\n    getPayment() ? getPayment().beneficiary : null\n  );\n\n  /**\n   * @name getBeneficiaries\n   * @type {function}\n   * @description\n   * Returns the list of beneficiaries.\n   * @returns {*}\n   * @inner\n   */\n  const getBeneficiaries = stateContainer.createSelector(\n    state => state.beneficiaries.data\n  );\n\n  /**\n   * @name getContacts\n   * @type {function}\n   * @description\n   * Returns list of contacts.\n   * @returns {Array.<AccountView>}\n   * @inner\n   */\n  const getContacts = stateContainer.createSelector(\n    state => state.contacts\n  );\n\n  /**\n   * @name getCurrencies\n   * @type {function}\n   * @description\n   * Returns the list of all currencies.\n   * @returns {Array.<Currency>}\n   * @inner\n   */\n  const getCurrencies = stateContainer.createSelector(\n    state => state.currencies.data\n  );\n\n  /**\n   * @name getDebitAccounts\n   * @type {function}\n   * @description\n   * Returns the list of debit accounts.\n   * @returns {*}\n   * @inner\n   */\n  const getDebitAccounts = stateContainer.createSelector(\n    state => state.debitAccounts.data\n  );\n\n  /**\n   * @name getSaveContact\n   * @type {function}\n   * @description\n   * Returns the value of the \"Save contact\" flag.\n   * @returns {boolean}\n   * @inner\n   */\n  const getSaveContact = stateContainer.createSelector(\n    () => (getPayment() ? getPayment().saveContact : false)\n  );\n\n  /**\n   * @name getSelectedDebitAccount\n   * @type {function}\n   * @description\n   * Returns the selected debit account of the payment.\n   * @returns {AccountView}\n   * @inner\n   */\n  const getSelectedDebitAccount = stateContainer.createSelector(\n    () => (getPayment() ? getPayment().debitAccount : null)\n  );\n\n  /**\n   * @name getSelectedBeneficiaryAccount\n   * @type {function}\n   * @description\n   * Returns the selected beneficiary account of the payment.\n   * @returns {(AccountView|null)}\n   * @inner\n   */\n  const getSelectedBeneficiaryAccount = () => {\n    const beneficiary = getSelectedBeneficiary();\n    const beneficiaries = getBeneficiaries();\n\n    if (!beneficiary || !beneficiaries) {\n      return null;\n    }\n\n    const beneficiaryAccount = beneficiaries.creditAccounts.find(item => (\n      isSameAccount(item, beneficiary)\n    ));\n\n    return beneficiaryAccount || null;\n  };\n\n  /**\n   * @name isBeneficiaryComplete\n   * @type {function}\n   * @description\n   * Checks if all the required fields for a beneficiary have been filled.\n   * @returns {boolean}\n   * @inner\n   */\n  const isBeneficiaryComplete = () => {\n    const beneficiary = getSelectedBeneficiary();\n    return Boolean(beneficiary && beneficiary.name && beneficiary.identifier);\n  };\n\n  /**\n   * @name isBeneficiaryExternal\n   * @type {function}\n   * @description\n   * Checks if the beneficiary is external.\n   * @returns {boolean}\n   * @inner\n   */\n  const isBeneficiaryExternal = () => getSelectedBeneficiaryAccount() === null;\n\n  /**\n   * @name isBeneficiaryNew\n   * @type {function}\n   * @description\n   * Checks if the beneficiary is a new one meaning that it is not presented\n   * in the list of known beneficiaries.\n   * @returns {boolean}\n   * @inner\n   */\n  const isBeneficiaryNew = () => {\n    const beneficiary = getSelectedBeneficiary();\n    const beneficiaries = getBeneficiaries();\n\n    if (beneficiary && beneficiaries) {\n      const { contacts, creditAccounts } = beneficiaries;\n\n      const allBeneficiaries = [\n        ...creditAccounts,\n        ...contacts,\n      ];\n\n      const isBeneficiaryExisting = allBeneficiaries.some(\n        item => isSameAccount(item, beneficiary)\n      );\n\n      return !isBeneficiaryExisting;\n    }\n\n    return false;\n  };\n\n  /**\n   * @name isRecurring\n   * @type {function}\n   * @description\n   * Checks if the given schedule is a recurring one.\n   * @param {Schedule} schedule\n   * @returns {boolean}\n   * @inner\n   */\n  const isRecurring = schedule => schedule.transferFrequency !== TransferFrequency.ONCE;\n\n  /**\n   * @name getContactIdentification\n   * @type {function}\n   * @description\n   * Returns the identification of the given contact.\n   * @returns {ContactIdentification}\n   * @inner\n   */\n  const getContactIdentification = () => {\n    const beneficiary = getSelectedBeneficiary();\n    return {\n      name: beneficiary ? beneficiary.name : null,\n      identification: {\n        identification: beneficiary ? beneficiary.identifier : null,\n        schemeName: 'IBAN',\n      },\n    };\n  };\n\n  /**\n   * @name getCreditAccountIdentification\n   * @type {function}\n   * @description\n   * Returns the identification of the given credit account.\n   * @returns {CreditAccountIdentification}\n   * @inner\n   */\n  const getCreditAccountIdentification = () => {\n    const creditAccount = getSelectedBeneficiaryAccount();\n    return {\n      identification: {\n        identification: creditAccount ? creditAccount.id : null,\n        schemeName: 'ID',\n      },\n    };\n  };\n\n  /**\n   * @name getBeneficiaryIdentification\n   * @type {function}\n   * @description\n   * Returns the creditor account of the given beneficiary.\n   * @returns {ContactIdentification|CreditAccountIdentification}\n   * @inner\n   */\n  const getBeneficiaryIdentification = () => (\n    isBeneficiaryExternal()\n      ? getContactIdentification()\n      : getCreditAccountIdentification()\n  );\n\n  /**\n   * @name getScheduleRecurringDay\n   * @type {function}\n   * @description\n   * Returns a day of a recurring payment for the given schedule.\n   * @param {Schedule} schedule\n   * @returns {number}\n   * @inner\n   */\n  const getScheduleRecurringDay = schedule => {\n    const { startDate, transferFrequency } = schedule;\n    const date = new Date(startDate);\n\n    if (transferFrequency === TransferFrequency.WEEKLY) {\n      const dayOfWeek = date.getDay();\n      return dayOfWeek === 0 ? 7 : dayOfWeek;\n    }\n\n    if (transferFrequency === TransferFrequency.MONTHLY) {\n      return date.getDate();\n    }\n\n    if (transferFrequency === TransferFrequency.YEARLY) {\n      return date.getMonth() + 1;\n    }\n\n    return 1;\n  };\n\n  /**\n   * @name getSchedulePayload\n   * @type {function}\n   * @description\n   * Creates a payload for the payment schedule.\n   * @param {Schedule} schedule\n   * @returns {SchedulePayload}\n   * @inner\n   */\n  const getSchedulePayload = schedule => {\n    const { end, every, repeat, transferFrequency } = schedule;\n    const on = getScheduleRecurringDay(schedule);\n\n    const startDate = formatDate(schedule.startDate);\n    const endDate = formatDate(schedule.endDate);\n\n    const schedulePayload = {\n      every,\n      on,\n      startDate,\n      transferFrequency,\n    };\n\n    if (end === RecurrenceEnding.ON) {\n      Object.assign(schedulePayload, { endDate });\n    }\n\n    if (end === RecurrenceEnding.AFTER) {\n      Object.assign(schedulePayload, { repeat });\n    }\n\n    return schedulePayload;\n  };\n\n  /**\n   * @name getPaymentPayload\n   * @type {function}\n   * @description\n   * Creates a payload for making a payment.\n   * @param {Payment} payment\n   * @returns {PaymentPayload}\n   * @inner\n   */\n  const getPaymentPayload = payment => {\n    const { debitAccount = {}, beneficiary, schedule, amount, additions } = payment;\n\n    const creditorAccount = getBeneficiaryIdentification();\n    const requestedExecutionDate = formatDate(schedule.startDate);\n\n    const payload = {\n      debtorAccount: {\n        arrangementId: debitAccount.id,\n        identification: {\n          schemeName: 'ID',\n          identification: debitAccount.id,\n        },\n        name: debitAccount.name,\n      },\n      requestedExecutionDate,\n      paymentMode: isRecurring(schedule) ? PaymentMode.RECURRING : PaymentMode.SINGLE,\n      creditTransferTransactionInformation: [{\n        instructedAmount: {\n          amount: amount.value,\n          currencyCode: amount.currency,\n        },\n        creditor: {\n          name: beneficiary.name,\n        },\n        creditorAccount,\n      }],\n    };\n\n    if (payment.urgent) {\n      Object.assign(payload, { instructionPriority: 'HIGH' });\n    }\n\n    if (payment.description) {\n      Object.assign(payload.creditTransferTransactionInformation[0], {\n        remittanceInformation: payment.description,\n      });\n    }\n\n    if (isRecurring(schedule)) {\n      Object.assign(payload, {\n        schedule: getSchedulePayload(schedule),\n      });\n    }\n\n    if (additions) {\n      Object.assign(payload, { additions });\n    }\n\n    return hooks.processPaymentPayload(payload, payment);\n  };\n\n  /**\n   * @name getContactPayload\n   * @type {function}\n   * @description\n   * Creates a payload for creating a contact.\n   * @param {AccountView} contact\n   * @returns {ContactCreatePayload}\n   * @inner\n   */\n  const getContactPayload = contact => ({\n    accounts: [{\n      IBAN: contact.identifier,\n    }],\n    name: contact.name,\n  });\n\n  /**\n   * @name loadDebitAccounts\n   * @type {function}\n   * @description\n   * Loads debit accounts.\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadDebitAccounts = () => {\n    viewModel.debitAccounts.beforeDebitAccountsLoad();\n\n    debitAccountsPromise = model.getAccountsFrom()\n      .then(data => {\n        viewModel.debitAccounts.afterDebitAccountsLoadSuccess(data);\n        return getDebitAccounts();\n      })\n      .catch(error => {\n        viewModel.debitAccounts.afterDebitAccountsLoadError(error);\n        events.afterDebitAccountsLoadError(error);\n\n        throw error;\n      });\n\n    return debitAccountsPromise;\n  };\n\n  /**\n   * @name showPin\n   * @type {function}\n   * @description\n   * Shows the PIN screen.\n   * @fires bb.payment.show.pin\n   * @inner\n   */\n  const showPin = () => (\n    bus.publish(Event.SHOW_PIN)\n  );\n\n  /**\n   * @name authorizePayment\n   * @type {function}\n   * @description\n   * Subscribes to the event that will be fired once the pin is successful\n   * and calls the showPin function which will show the pin verification screen.\n   * @inner\n   */\n  const authorizePayment = () => (\n    new Promise((resolve) => {\n      bus.subscribe(Event.PIN_CONFIRMATION_SUCCESSFUL, resolve);\n\n      showPin();\n    })\n  );\n\n  /**\n   * @name authorizePaymentIfNeeded\n   * @type {function}\n   * @description\n   * Checks whether the payment should be authorized via pin code and\n   * calls the pin code screen if needed or resolves immediately so the payment\n   * can continue.\n   * @returns {Promise}\n   * @inner\n   */\n  const authorizePaymentIfNeeded = () => (\n    preferences.showPin\n      ? authorizePayment()\n      : Promise.resolve()\n  );\n\n  /**\n   * @name saveContact\n   * @type {function}\n   * @description\n   * Saves the given contact to the address book.\n   * @param {AccountView} contact\n   * @inner\n   */\n  const saveContact = contact => {\n    const payload = getContactPayload(contact);\n\n    events.beforeContactCreate();\n\n    return model.createContact(payload)\n      .then(() => {\n        events.afterContactCreateSuccess();\n      })\n      .catch(error => {\n        events.afterContactCreateError(error);\n      });\n  };\n\n  /**\n   * @name isExternalTransferAllowed\n   * @type {function}\n   * @description\n   * Checks whether external transfers are allowed for the given debitAccount.\n   * @param {AccountView} debitAccount\n   * @returns {boolean}\n   * @inner\n   */\n  const isExternalTransferAllowed = debitAccount => (\n    !debitAccount || !debitAccount.id || debitAccount.externalTransferAllowed\n  );\n\n  /**\n   * @name loadContacts\n   * @description\n   * Loads contacts.\n   * @type {function}\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadContacts = () => {\n    if (getContacts()) {\n      return Promise.resolve(getContacts());\n    }\n\n    return model.getExternals()\n      .then(contacts => {\n        viewModel.contacts.afterContactsLoadSuccess(contacts);\n        return contacts;\n      });\n  };\n\n  /**\n   * @name loadCreditAccounts\n   * @type {function}\n   * @description\n   * Loads the list of credit accounts for the given debit account.\n   * @param {AccountView} debitAccount\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadCreditAccounts = debitAccount => (\n    model.getAccountsTo(debitAccount ? debitAccount.id : null)\n  );\n\n  /**\n   * @name loadCurrencies\n   * @type {function}\n   * @description\n   * Loads currencies.\n   * @returns {Promise.<Array.Currency>}\n   * @inner\n   */\n  const loadCurrencies = () => {\n    viewModel.currencies.beforeCurrenciesLoad();\n\n    return model.getCurrencies()\n      .then(currencies => {\n        viewModel.currencies.afterCurrenciesLoadSuccess(currencies);\n        viewModel.payment.updatePaymentCurrency();\n      })\n      .catch(error => {\n        viewModel.currencies.afterCurrenciesLoadError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name loadBeneficiaries\n   * @type {function}\n   * @description\n   * Loads the list of beneficiaries.\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadBeneficiaries = () => {\n    const debitAccount = getSelectedDebitAccount();\n\n    const requests = [\n      loadCreditAccounts(debitAccount),\n      isExternalTransferAllowed(debitAccount) ? loadContacts() : [],\n    ];\n\n    viewModel.beneficiaries.beforeBeneficiariesLoad();\n\n    beneficiariesPromise = Promise.all(requests)\n      .then(([creditAccounts, contacts]) => {\n        viewModel.beneficiaries.afterBeneficiariesLoadSuccess({\n          creditAccounts,\n          contacts,\n        });\n        return getBeneficiaries();\n      })\n      .catch(error => {\n        viewModel.beneficiaries.afterBeneficiariesLoadError(error);\n        events.afterBeneficiariesLoadError(error);\n\n        throw error;\n      });\n\n    return beneficiariesPromise;\n  };\n\n  /**\n   * @name InitiatePaymentService#canSaveContact\n   * @type {function}\n   * @description\n   * Checks whether the beneficiary can be saved to the address book as a new contact.\n   * @returns {boolean}\n   */\n  const canSaveContact = () => isBeneficiaryComplete() && isBeneficiaryNew();\n\n  /**\n   * @name InitiatePaymentService#isUrgentPaymentAllowed\n   * @type {function}\n   * @description\n   * Checks if an urgent payment is allowed.\n   * @param {Payment} payment\n   * @returns {boolean}\n   */\n  const isUrgentPaymentAllowed = payment => {\n    if (!payment) {\n      return false;\n    }\n\n    const isAllowedByAccount = Boolean(\n      payment.debitAccount &&\n      payment.debitAccount.urgentTransferAllowed\n    );\n\n    const currentDate = new Date();\n    const startDate = new Date(payment.schedule.startDate);\n    const isNotFuture = currentDate >= startDate;\n\n    return isAllowedByAccount && !isRecurring(payment.schedule) && isNotFuture;\n  };\n\n  /**\n   * @name InitiatePaymentService#makePayment\n   * @type {function}\n   * @description\n   * Makes a payment using the current state to get a payload for the request.\n   * @fires \"bb.event.payment.done\"\n   * @fires \"bb.event.payment.failed\"\n   * @fires \"bb.event.payment.started\"\n   * @returns {Promise}\n   */\n  const makePayment = () => {\n    const payment = getPayment();\n    const payload = getPaymentPayload(payment);\n\n    viewModel.payment.beforePayment();\n    events.beforePayment();\n\n    return model.createPaymentOrder(payload)\n      .then(() => {\n        viewModel.payment.afterPaymentSuccess();\n        events.afterPaymentSuccess();\n      })\n      .catch(error => {\n        viewModel.payment.afterPaymentError(error);\n        events.afterPaymentError(error);\n\n        throw error;\n      });\n  };\n\n  /**\n   * @name InitiatePaymentService#makePaymentWithAuthorization\n   * @type {function}\n   * @description\n   * Checks whether the payment should be authorized via pin code and\n   * calls the pin code screen if needed.\n   * @returns {Promise}\n   */\n  const makePaymentWithAuthorization = () => (\n    authorizePaymentIfNeeded().then(() => makePayment())\n  );\n\n  /**\n   * @name resetBeneficiaryIfNeeded\n   * @type {function}\n   * @description\n   * Resets the payment beneficiary, if it is not valid for the currently selected\n   * debit account.\n   * @inner\n   */\n  const resetBeneficiaryIfNeeded = () => {\n    const beneficiary = getSelectedBeneficiary();\n    const debitAccount = getSelectedDebitAccount();\n\n    if (beneficiary && debitAccount) {\n      const isBeneficiaryInvalid = isSameAccount(beneficiary, debitAccount) ||\n        (isBeneficiaryExternal() && !isExternalTransferAllowed(debitAccount));\n\n      if (isBeneficiaryInvalid) {\n        viewModel.payment.resetPaymentBeneficiary();\n      }\n    }\n  };\n\n  /**\n   * @name InitiatePaymentService#saveContactIfNeeded\n   * @type {function}\n   * @description\n   * Saves the selected beneficiary to the address book if needed.\n   */\n  const saveContactIfNeeded = () => {\n    if (getSaveContact() && canSaveContact()) {\n      saveContact(getSelectedBeneficiary());\n    }\n  };\n\n  /**\n   * @name InitiatePaymentService#prepareBeneficiaries\n   * @type {function}\n   * @description\n   * Prepares the list of beneficiaries.\n   * @fires \"bb.event.payment.selectAccount.load.start\"\n   * @fires \"bb.event.payment.selectAccount.load.done\"\n   * @fires \"bb.event.payment.selectAccount.failed\"\n   * @returns {Promise}\n   */\n  const prepareBeneficiaries = () => {\n    const type = AccountType.CREDIT;\n\n    if (!beneficiariesPromise) {\n      return Promise.reject('Payment form must be initialized');\n    }\n\n    events.beforeOpenSelectAccount(type);\n\n    return Promise.resolve(beneficiariesPromise)\n      .then(() => {\n        events.afterOpenSelectAccountSuccess(type);\n      })\n      .catch(error => {\n        events.afterOpenSelectAccountError(type, error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name InitiatePaymentService#prepareDebitAccounts\n   * @type {function}\n   * @description\n   * Prepares the list of debit accounts.\n   * @fires \"bb.event.payment.selectAccount.load.start\"\n   * @fires \"bb.event.payment.selectAccount.load.done\"\n   * @fires \"bb.event.payment.selectAccount.failed\"\n   * @returns {Promise}\n   */\n  const prepareDebitAccounts = () => {\n    const type = AccountType.DEBIT;\n\n    if (!debitAccountsPromise) {\n      return Promise.reject('Payment form must be initialized');\n    }\n\n    events.beforeOpenSelectAccount(type);\n\n    return Promise.resolve(debitAccountsPromise)\n      .then(() => {\n        events.afterOpenSelectAccountSuccess(type);\n      })\n      .catch(error => {\n        events.afterOpenSelectAccountError(type, error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name InitiatePaymentService#setBeneficiary\n   * @type {function}\n   * @description\n   * Handles the intent to change the selected beneficiary.\n   * @param {AccountView} beneficiary\n   */\n  const setBeneficiary = beneficiary => {\n    viewModel.payment.setPaymentBeneficiary(beneficiary);\n  };\n\n  /**\n   * @name InitiatePaymentService#setDebitAccount\n   * @type {function}\n   * @description\n   * Handles the intent to change the selected debit account.\n   * @param {AccountView} account\n   */\n  const setDebitAccount = account => {\n    viewModel.payment.setPaymentDebitAccount(account);\n    viewModel.payment.updatePaymentCurrency();\n\n    loadBeneficiaries();\n    resetBeneficiaryIfNeeded();\n  };\n\n  /**\n   * @name InitiatePaymentService#setPayment\n   * @type {function}\n   * @description\n   * Updates the payment state with the given payment object.\n   * @param {Object} payment\n   */\n  const setPayment = payment => {\n    viewModel.payment.setPayment(payment);\n  };\n\n  /**\n   * @name InitiatePaymentService#setSaveContact\n   * @type {function}\n   * @description\n   * Updates state of the \"Save contact\" flag.\n   * @param {boolean} saveContactValue\n   */\n  const setSaveContact = saveContactValue => {\n    viewModel.payment.setSaveContact(saveContactValue);\n  };\n\n  /**\n   * @name InitiatePaymentService#setSchedule\n   * @type {function}\n   * @description\n   * Updates state of the payment schedule.\n   * @param {Object} schedule\n   */\n  const setSchedule = schedule => {\n    viewModel.payment.setSchedule(schedule);\n  };\n\n  /**\n   * @name InitiatePaymentService#setUrgentPayment\n   * @type {function}\n   * @description\n   * Updates state of the \"urgent\" flag.\n   * @param {boolean} urgent\n   */\n  const setUrgentPayment = urgent => {\n    viewModel.payment.setPaymentUrgent(urgent);\n  };\n\n  /**\n   * @name InitiatePaymentService#updateBeneficiaries\n   * @type {function}\n   * @description\n   * Reloads beneficiaries.\n   * @returns {Promise}\n   */\n  const updateBeneficiaries = () => {\n    // Delete cached contacts in order to force a request to the server\n    viewModel.contacts.resetContacts();\n    return loadBeneficiaries();\n  };\n\n  /**\n   * @name initPaymentData\n   * @type {function}\n   * @description\n   * Initializes the payment state.\n   * @param {boolean} doReset\n   * @inner\n   */\n  const initPaymentData = doReset => {\n    if (!getPayment() || doReset) {\n      viewModel.payment.resetPayment();\n    }\n  };\n\n  /**\n   * @name initBeneficiaries\n   * @type {function}\n   * @description\n   * Initializes the list of beneficiaries.\n   * @returns {Promise}\n   * @inner\n   */\n  const initBeneficiaries = () => {\n    const beneficiaries = getBeneficiaries();\n\n    if (beneficiaries) {\n      beneficiariesPromise = Promise.resolve(beneficiaries);\n      return beneficiariesPromise;\n    }\n\n    return loadBeneficiaries();\n  };\n\n  /**\n   * @name initCurrencies\n   * @type {function}\n   * @description\n   * Initializes the list of currencies.\n   * @returns {Promise}\n   * @inner\n   */\n  const initCurrencies = () => (\n    getCurrencies()\n      ? Promise.resolve(getCurrencies())\n      : loadCurrencies()\n  );\n\n  /**\n   * @name initDebitAccounts\n   * @type {function}\n   * @description\n   * Initializes the list of debit accounts.\n   * @returns {Promise}\n   * @inner\n   */\n  const initDebitAccounts = () => {\n    const debitAccounts = getDebitAccounts();\n\n    if (debitAccounts) {\n      debitAccountsPromise = Promise.resolve(debitAccounts);\n      return debitAccountsPromise;\n    }\n\n    return loadDebitAccounts();\n  };\n\n  /**\n   * @name InitiatePaymentService#initPaymentForm\n   * @type {function}\n   * @description\n   * Initializes the form.\n   * @returns {Promise.<Array>}\n   */\n  const initPaymentForm = () => Promise.all([\n    initPaymentData(),\n    initDebitAccounts(),\n    initBeneficiaries(),\n    initCurrencies(),\n  ]);\n\n  /**\n   * @name InitiatePaymentService#resetPayment\n   * @type {function}\n   * @description\n   * Resets the payment form.\n   */\n  const resetPayment = () => {\n    initPaymentData(true);\n  };\n\n  /**\n   * @name InitiatePaymentService#startNewPayment\n   * @type {function}\n   * @description\n   * Starts a new payment.\n   * @param {Object} [initialPaymentData]\n   */\n  const startNewPayment = initialPaymentData => {\n    resetPayment();\n\n    if (initialPaymentData) {\n      const { debitAccount } = initialPaymentData;\n      if (debitAccount) {\n        setDebitAccount(debitAccount);\n      }\n    }\n  };\n\n  return {\n    canSaveContact,\n    initPaymentForm,\n    isUrgentPaymentAllowed,\n    makePayment,\n    makePaymentWithAuthorization,\n    getPreferences,\n    prepareBeneficiaries,\n    prepareDebitAccounts,\n    resetPayment,\n    saveContactIfNeeded,\n    setBeneficiary,\n    setDebitAccount,\n    setPayment,\n    setSaveContact,\n    setSchedule,\n    setUrgentPayment,\n    startNewPayment,\n    updateBeneficiaries,\n  };\n};\n\n/**\n * @typedef {Object} ContactIdentification\n * @property {string} counterpartyName Counterparty name. Only required when 'scheme'\n *   is set to IBAN/BBAN.\n * @property {string} identification Identification of the product. Different schemes\n *   are supported: IBAN, BBAN, ID\n * @property {string} scheme  The name of the scheme. For contacts is always \"IBAN\".\n */\n\n/**\n * @typedef {Object} CreditAccountIdentification\n * @property {string} identification Credit account ID\n * @property {string} scheme The name of the scheme. For credit accounts is always \"ID\".\n */\n\n/**\n * @typedef {Object} DebitAccountIdentification\n * @property {string} identification Debit account ID\n * @property {string} scheme The name of the scheme. For debit accounts is always \"ID\".\n */\n\n/**\n * @typedef {Object} PaymentPayload\n * @property {DebitAccountIdentification} debitAccountIdentification Identification of the payment\n *   debit account\n * @property {CreditAccountIdentification} creditAccountIdentification Identification of the payment\n *   credit account\n * @property {number} amount The amount of the payment\n * @property {string} currency The alpha-3 code (complying with ISO 4217) of\n *   the currency that qualifies the amount\n * @property {string} description The description for the payment.\n * @property {string} paymentMode Denotes whether payment will be single or will be recurring.\n *   Possible values are \"SINGLE\" and \"RECURRING\"\n */\n\n/**\n * @typedef {Object} SchedulePayload\n * @property {string} transferFrequency Denotes how frequently the transfer should be made\n * @property {number} on Denotes day on which transfer should be executed. For weekly\n *   it will be 1..7 indicating weekday. For monthly it will be 1..31 indicating day of month.\n *   For yearly it will be 1..12 indicating month of the year\n * @property {string} startDate When to start executing the schedule. First transfer\n *   will be executed on first calculated date by schedule after this date\n * @property {number} repeat Number of transfer to be executed. Only one of endDate\n *   and repeat is possible. If neither repeat nor endDate is provided transfer\n *   will be executed until canceled\n * @property {number} every Indicates skip interval of transfer.\n *   1 would mean execute every time, 2 - every other time\n * @property {?string} endDate When to stop transfers. Transfers will not be executed\n *   after this date. Only one of endDate and repeat is possible. If neither repeat\n *   nor endDate is provided transfer will be executed until canceled\n */\n\n/**\n * @typedef {Object} ContactAccount\n * @property {string} IBAN Contact's IBAN\n */\n\n/**\n * @typedef {Object} ContactCreatePayload\n * @property {string} name Contact's name\n * @property {Array.<ContactAccount>} accounts List of contact's accounts\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/service.js","import getInitialState from './initial-state';\n\nimport createBeneficiariesReducers from './beneficiaries';\nimport createContactsReducers from './contacts';\nimport createCurrenciesReducers from './currencies';\nimport createDebitAccountsReducers from './debit-accounts';\nimport createPaymentReducers from './payment';\n\nexport default (stateContainer, bbStorage, hooks) => {\n  const initialState = getInitialState({ hooks });\n\n  /**\n   * @name ViewModel\n   * @type {object}\n   * @inner\n   */\n  return {\n    /**\n     * @name ViewModel#init\n     * @description Initialises view model with initial state\n     * @type {function}\n     * @return {PaymentView}\n     * @inner\n     */\n    init: stateContainer.createAction((state = initialState) => state),\n\n    /**\n     * @name ViewModel#beneficiaries\n     * @type {ViewModelBeneficiariesActions}\n     * @description\n     * Actions for updating the parts of the `ViewState` related to the list of beneficiaries.\n     * @inner\n     */\n    beneficiaries: createBeneficiariesReducers({\n      stateContainer,\n      hooks,\n    }),\n\n    /**\n     * @name ViewModel#contacts\n     * @type {ViewModelContactsActions}\n     * @description\n     * Actions for updating the parts of the `ViewState` related to list of contacts.\n     * @inner\n     */\n    contacts: createContactsReducers({\n      stateContainer,\n      hooks,\n    }),\n\n    /**\n     * @name ViewModel#currencies\n     * @type {ViewModelCurrenciesActions}\n     * @description\n     * Actions for updating the parts of the `ViewState` related to the list of currencies.\n     * @inner\n     */\n    currencies: createCurrenciesReducers({\n      stateContainer,\n      hooks,\n    }),\n\n    /**\n     * @name ViewModel#debitAccounts\n     * @type {ViewModelDebitAccountsActions}\n     * @description\n     * Actions for updating the parts of the `ViewState` related to the list of debit accounts.\n     * @inner\n     */\n    debitAccounts: createDebitAccountsReducers({\n      stateContainer,\n      hooks,\n    }),\n\n    /**\n     * @name ViewModel#payment\n     * @type {ViewModelPaymentActions}\n     * @description\n     * Actions for updating the parts of the `ViewState` related to the payment.\n     * @inner\n     */\n    payment: createPaymentReducers({\n      stateContainer,\n      hooks,\n    }),\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/index.js","import {\n  RecurrenceEnding,\n  TransferFrequency,\n} from '../constants';\n\nconst getInitialSchedule = (today = new Date()) => ({\n  transferFrequency: TransferFrequency.ONCE,\n  startDate: today,\n  end: RecurrenceEnding.NEVER,\n  endDate: null,\n  every: 1,\n  repeat: 5,\n});\n\nexport const defaultCurrency = {\n  name: 'EUR',\n};\n\nexport const getInitialBeneficiary = () => ({\n  name: '',\n  identifier: '',\n});\n\nexport const getInitialPayment = () => ({\n  amount: {\n    currency: defaultCurrency.name,\n    value: null,\n  },\n  beneficiary: getInitialBeneficiary(),\n  debitAccount: null,\n  description: null,\n  saveContact: false,\n  schedule: getInitialSchedule(),\n  urgent: false,\n});\n\nexport default ({ hooks }) => hooks.processInitialPaymentState({\n  allowedCurrencies: [\n    defaultCurrency,\n  ],\n\n  contacts: null,\n\n  currencies: {\n    error: null,\n    loading: false,\n    data: null,\n  },\n\n  beneficiaries: {\n    error: null,\n    loading: false,\n    data: null,\n  },\n\n  debitAccounts: {\n    error: null,\n    loading: false,\n    data: null,\n  },\n\n  payment: {\n    error: null,\n    loading: false,\n    data: null,\n  },\n});\n\n/**\n * @typedef {Object} PaymentView\n * @property {Array.<Currency>} allowedCurrencies List of allowed currencies\n * @property {Array} contacts List of contacts\n * @property {CurrenciesState} currencies List of currencies\n * @property {BeneficiariesState} beneficiaries State of the beneficiaries\n * @property {DebitAccountsState} debitAccounts State of the debit accounts\n * @property {PaymentState} payment State of the payment\n */\n\n/**\n * @typedef {Object} Currency\n * @property {string} name Currency name, suitable for display to users\n */\n\n/**\n * @typedef {Object} CurrenciesState\n * @property {Error} error Error if the request to retrieve currencies failed\n * @property {boolean} loading Indicates whether the list of currencies is being loading\n * @property {Array.<Currency>} data List of currencies\n */\n\n/**\n * @typedef {Object} BeneficiariesState\n * @property {Error} error Error if beneficiaries request failed\n * @property {boolean} loading Indicates whether beneficiaries are being loading\n * @property {Array.<AccountView>} data List of beneficiaries\n */\n\n/**\n * @typedef {Object} DebitAccountsState\n * @property {Error} error Error if accounts request failed\n * @property {boolean} loading Indicates whether debit accounts are being loading\n * @property {Array.<AccountView>} data List of accounts\n */\n\n/**\n * @typedef {Object} PaymentState\n * @property {Error} error Error if payment request failed\n * @property {boolean} loading Indicates whether a payment request is being sending\n * @property {Payment} data Payment data\n */\n\n/**\n * @typedef {Object} Payment\n * @property {AccountView} debitAccount Selected debit account\n * @property {Beneficiary} beneficiary Selected beneficiary\n * @property {Amount} amount Amount and currency of the payment\n * @property {string} description Description of the payment\n * @property {boolean} saveContact Whether the beneficiary should be saved to address book\n * @property {Schedule} schedule Schedule for recurring transfer\n */\n\n/**\n * @typedef {Object} Schedule\n * @property {string} transferFrequency How frequently the transfer should be made\n * @property {Date} startDate When to start executing the schedule\n * @property {?Date} endDate When to stop transfers\n */\n\n/**\n * @typedef {Object} Beneficiary\n * @property {string} name Beneficiary name\n * @property {string} identifier Beneficiary identifier\n */\n\n/**\n * @typedef {Object} Amount\n * @property {string} currency Currency code\n * @property {number} value Amount value\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/initial-state.js","import { uiError } from './helpers';\n\nexport default ({ stateContainer }) => ({\n  /**\n   * @name ViewModelBeneficiariesActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelBeneficiariesActions#beforeBeneficiariesLoad\n   * @type {function}\n   * @description\n   * Updates the state before loading the list of beneficiaries.\n   * @inner\n   */\n  beforeBeneficiariesLoad: stateContainer.createAction(state => ({\n    ...state,\n    beneficiaries: {\n      ...state.beneficiaries,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelBeneficiariesActions#afterBeneficiariesLoadSuccess\n   * @type {function}\n   * @description\n   * Updates the state after loading the list of beneficiaries.\n   * @param {Object} beneficiaries\n   * @inner\n   */\n  afterBeneficiariesLoadSuccess: stateContainer.createAction((state, beneficiaries) => ({\n    ...state,\n    beneficiaries: {\n      data: beneficiaries,\n      error: null,\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelBeneficiariesActions#afterBeneficiariesLoadError\n   * @type {function}\n   * @description\n   * Updates the state when loading the list of beneficiaries failed.\n   * @param {Error} error\n   * @inner\n   */\n  afterBeneficiariesLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    beneficiaries: {\n      ...state.beneficiaries,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/beneficiaries.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\nconst errorMessages = {\n  [E_AUTH]: 'model.error.auth',\n  [E_CONNECTIVITY]: 'model.error.connectivity',\n  [E_USER]: 'model.error.user',\n  [E_UNEXPECTED]: 'model.error.unexpected',\n};\n\n/**\n * @name addCurrency\n * @type {function}\n * @description\n * Adds the given currency to the given list of currencies.\n * @param {Array.<Currency>} currencies\n * @param {Currency} currency\n * @inner\n */\nconst addCurrency = (currencies, currency) => {\n  const includes = currencies.some(curr => curr.name === currency.name);\n  if (!includes) {\n    currencies.unshift(currency);\n  }\n};\n\n/**\n * @name getAccountCurrency\n * @type {function}\n * @description\n * Returns the currency of the given account.\n * @param {AccountView} account\n * @returns {Currency}\n * @inner\n */\nexport const getAccountCurrency = account => (\n  account && account.currency ? ({ name: account.currency }) : null\n);\n\n/**\n * @name getAllowedCurrencies\n * @type {function}\n * @description\n * Returns a list of currencies, that are allowed for the given debit account.\n * @param {AccountView} debitAccount\n * @param {Array.<Currency>} currencies\n * @param {Currency} defaultCurrency\n * @inner\n */\nexport const getAllowedCurrencies = (debitAccount, currencies, defaultCurrency) => {\n  const crossCurrencyAllowed = debitAccount ? debitAccount.crossCurrencyAllowed : true;\n\n  const allCurrencies = currencies || [];\n  const allowedCurrencies = crossCurrencyAllowed ? [...allCurrencies] : [];\n\n  const debitAccountCurrency = getAccountCurrency(debitAccount);\n\n  // Add debit account currency\n  if (debitAccountCurrency) {\n    addCurrency(allowedCurrencies, debitAccountCurrency);\n  }\n\n  // Add default currency\n  if (crossCurrencyAllowed) {\n    addCurrency(allowedCurrencies, defaultCurrency);\n  }\n\n  return allowedCurrencies;\n};\n\n/**\n * @name uiError\n * @type {function}\n * @description\n * Converts the given error to a UI error\n * @param {Error} error\n * @returns {Object}\n */\nexport const uiError = error => ({\n  message: errorMessages[error.code],\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/helpers.js","export default ({ stateContainer }) => ({\n  /**\n   * @name ViewModelContactsActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelContactsActions#afterContactsLoadSuccess\n   * @type {function}\n   * @description\n   * Updates the state when the list of contacts is loaded.\n   * @param {Array.<AccountView>} contacts\n   * @inner\n   */\n  afterContactsLoadSuccess: stateContainer.createAction((state, contacts) => ({\n    ...state,\n    contacts,\n  })),\n\n  /**\n   * @name resetContacts\n   * @type {function}\n   * @description\n   * Resets the list of contacts.\n   * @inner\n   */\n  resetContacts: stateContainer.createAction(state => ({\n    ...state,\n    contacts: null,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/contacts.js","import { getAllowedCurrencies, uiError } from './helpers';\nimport { defaultCurrency } from './initial-state';\n\nexport default ({ stateContainer }) => ({\n  /**\n   * @name ViewModelCurrenciesActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelCurrenciesActions#beforeCurrenciesLoad\n   * @type {function}\n   * @description\n   * Updates the state before loading the list of currencies.\n   * @inner\n   */\n  beforeCurrenciesLoad: stateContainer.createAction(state => ({\n    ...state,\n    currencies: {\n      ...state.currencies,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelCurrenciesActions#afterCurrenciesLoadSuccess\n   * @type {function}\n   * @description\n   * Updates the state when the list of currencies is loaded.\n   * @param {Array.<Currency>} currencies\n   * @inner\n   */\n  afterCurrenciesLoadSuccess: stateContainer.createAction((state, currencies) => {\n    const debitAccount = state.payment.data.debitAccount;\n\n    const allowedCurrencies = getAllowedCurrencies(\n      debitAccount,\n      currencies,\n      defaultCurrency\n    );\n\n    return {\n      ...state,\n      allowedCurrencies,\n      currencies: {\n        data: currencies,\n        error: null,\n        loading: false,\n      },\n    };\n  }),\n\n  /**\n   * @name ViewModelCurrenciesActions#afterCurrenciesLoadError\n   * @type {function}\n   * @description\n   * Updates the state when the list of currencies failed.\n   * @param {Error} error\n   * @inner\n   */\n  afterCurrenciesLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    currencies: {\n      ...state.currencies,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/currencies.js","import { uiError } from './helpers';\n\nexport default ({ stateContainer }) => ({\n  /**\n   * @name ViewModelDebitAccountsActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelDebitAccountsActions#beforeDebitAccountsLoad\n   * @type {function}\n   * @description\n   * Updates the state before loading the list of debit accounts.\n   * @inner\n   */\n  beforeDebitAccountsLoad: stateContainer.createAction(state => ({\n    ...state,\n    debitAccounts: {\n      ...state.debitAccounts,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelDebitAccountsActions#afterDebitAccountsLoadSuccess\n   * @type {function}\n   * @description\n   * Updates the state after loading the list of debit accounts.\n   * @param {Array.<AccountView>} debitAccounts\n   * @inner\n   */\n  afterDebitAccountsLoadSuccess: stateContainer.createAction((state, debitAccounts) => ({\n    ...state,\n    debitAccounts: {\n      data: debitAccounts,\n      error: null,\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelDebitAccountsActions#afterDebitAccountsLoadError\n   * @type {function}\n   * @description\n   * Updates the state when loading the list of debit accounts failed.\n   * @param {Error} error\n   * @inner\n   */\n  afterDebitAccountsLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    debitAccounts: {\n      ...state.debitAccounts,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/debit-accounts.js","import {\n  defaultCurrency,\n  getInitialBeneficiary,\n  getInitialPayment,\n} from './initial-state';\n\nimport {\n  getAccountCurrency,\n  getAllowedCurrencies,\n  uiError,\n} from './helpers';\n\nexport default ({ stateContainer, hooks }) => ({\n  /**\n   * @name ViewModelPaymentActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelPaymentActions#beforePayment\n   * @type {function}\n   * @description\n   * Updates the state before making a payment.\n   * @inner\n   */\n  beforePayment: stateContainer.createAction(state => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#afterPaymentError\n   * @type {function}\n   * @description\n   * Updates the state after payment fail.\n   * @param {Error} error\n   * @inner\n   */\n  afterPaymentError: stateContainer.createAction((state, error) => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#afterPaymentSuccess\n   * @type {function}\n   * @description\n   * Updates the state after payment success.\n   * @inner\n   */\n  afterPaymentSuccess: stateContainer.createAction(state => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      error: null,\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#resetPayment\n   * @type {function}\n   * @description\n   * Resets payment using an initial payment, processed with a corresponding hook.\n   * @inner\n   */\n  resetPayment: stateContainer.createAction(state => {\n    const initialPayment = getInitialPayment();\n    const processedInitialPayment = hooks.processInitialPaymentState(initialPayment);\n\n    return {\n      ...state,\n      payment: {\n        data: processedInitialPayment,\n        error: null,\n        loading: false,\n      },\n    };\n  }),\n\n  /**\n   * @name ViewModelPaymentActions#resetPaymentBeneficiary\n   * @type {function}\n   * @description\n   * Resets the payment beneficiary to the initial value.\n   * @inner\n   */\n  resetPaymentBeneficiary: stateContainer.createAction(state => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      data: {\n        ...state.payment.data,\n        beneficiary: getInitialBeneficiary(),\n      },\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#setPaymentUrgent\n   * @type {function}\n   * @description\n   * Updates payment's urgent flag with the given value.\n   * @param {boolean} urgent\n   */\n  setPaymentUrgent: stateContainer.createAction((state, urgent) => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      data: {\n        ...state.payment.data,\n        urgent: Boolean(urgent),\n      },\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#setPayment\n   * @type {function}\n   * @description\n   * Sets the payment.\n   * @param {Payment} payment\n   */\n  setPayment: stateContainer.createAction((state, payment) => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      data: payment,\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#setPaymentBeneficiary\n   * @type {function}\n   * @description\n   * Sets the payment beneficiary.\n   * @param {AccountView} beneficiary\n   * @inner\n   */\n  setPaymentBeneficiary: stateContainer.createAction((state, beneficiaryAccount) => {\n    const { alias, name, identifier } = beneficiaryAccount;\n\n    const beneficiary = {\n      name: String(alias || name),\n      identifier: String(identifier),\n      isNew: false,\n    };\n\n    return {\n      ...state,\n      payment: {\n        ...state.payment,\n        data: {\n          ...state.payment.data,\n          beneficiary,\n        },\n      },\n    };\n  }),\n\n  /**\n   * @name ViewModelPaymentActions#setPaymentDebitAccount\n   * @type {function}\n   * @description\n   * Sets the payment beneficiary.\n   * @param {AccountView} debitAccount\n   * @inner\n   */\n  setPaymentDebitAccount: stateContainer.createAction((state, debitAccount) => {\n    const currencies = state.currencies.data;\n\n    const allowedCurrencies = getAllowedCurrencies(\n      debitAccount,\n      currencies,\n      defaultCurrency\n    );\n\n    return {\n      ...state,\n      allowedCurrencies,\n      payment: {\n        ...state.payment,\n        data: {\n          ...state.payment.data,\n          debitAccount,\n        },\n      },\n    };\n  }),\n\n  /**\n   * @description\n   * Updates saveContact flag with the given value.\n   *\n   * @name setSaveContact\n   * @type {function}\n   *\n   * @param {boolean} saveContact\n   */\n  setSaveContact: stateContainer.createAction((state, saveContact) => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      data: {\n        ...state.payment.data,\n        saveContact: Boolean(saveContact),\n      },\n    },\n  })),\n\n  /**\n   * @description\n   * Updates the schedule with the given value.\n   *\n   * @name setSchedule\n   * @type {function}\n   *\n   * @param {Object} schedule\n   */\n  setSchedule: stateContainer.createAction((state, schedule) => ({\n    ...state,\n    payment: {\n      ...state.payment,\n      data: {\n        ...state.payment.data,\n        schedule,\n      },\n    },\n  })),\n\n  /**\n   * @name ViewModelPaymentActions#updatePaymentCurrency\n   * @type {function}\n   * @description\n   * Updates the payment currency according, making sure\n   * the currency of the payment is allowed.\n   * @inner\n   */\n  updatePaymentCurrency: stateContainer.createAction(state => {\n    const debitAccount = state.payment.data.debitAccount;\n    const debitAccountCurrency = getAccountCurrency(debitAccount);\n\n    const currency = (debitAccountCurrency || defaultCurrency).name;\n\n    return {\n      ...state,\n      payment: {\n        ...state.payment,\n        data: {\n          ...state.payment.data,\n          amount: {\n            ...state.payment.data.amount,\n            currency,\n          },\n        },\n      },\n    };\n  }),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model/payment.js","/**\n * @description\n * Hooks for widget-bbm-initiate-payment-ng.\n *\n * @name Hooks\n * @type {object}\n */\n\n/**\n * @description\n * Processes the initial payment object.\n *\n * The widget uses this hook on start when the initial payment object is created.\n * Also the widget uses this when it resets the payment and starts another one.\n *\n * Use it to add custom properties to the payment object.\n *\n * @name Hooks#processInitialPaymentState\n * @type {function}\n *\n * @param {Payment} payment Payment state, that is supposed to be processed\n * @returns {Payment}\n */\nexport const processInitialPaymentState = payment => payment;\n\n/**\n * @description\n * Processes the payload of a the payment.\n *\n * @name Hooks#processPaymentPayload\n * @type {function}\n *\n * @param {PaymentPayload} paymentPayload Payment payload, that is supposed to be processed\n * @returns {Payment}\n */\nexport const processPaymentPayload = paymentPayload => paymentPayload;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/default-hooks.js"],"sourceRoot":""}