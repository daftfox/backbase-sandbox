{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**","webpack:///webpack/bootstrap eb1a3c706fc83c476bc2?9b81**","webpack:///./widget-bb-budget-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-budget-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"model-bb-budget-ng\"","webpack:///external \"lib-bb-state-container-ng\"","webpack:///external \"lib-bb-currency-ng\"","webpack:///./widget-bb-budget-ng/scripts/service.js","webpack:///./widget-bb-budget-ng/scripts/constants.js","webpack:///./widget-bb-budget-ng/scripts/view-model/index.js","webpack:///./widget-bb-budget-ng/scripts/view-model/list.js","webpack:///./widget-bb-budget-ng/scripts/view-model/helpers.js","webpack:///./widget-bb-budget-ng/scripts/view-model/create.js","webpack:///./widget-bb-budget-ng/scripts/view-model/edit.js","webpack:///./widget-bb-budget-ng/scripts/view-model/delete.js","webpack:///./widget-bb-budget-ng/scripts/view-model/spending.js","webpack:///./widget-bb-budget-ng/scripts/view-model/categories.js","webpack:///./widget-bb-budget-ng/scripts/router.js","webpack:///./widget-bb-budget-ng/scripts/default-hooks.js","webpack:///./widget-bb-budget-ng/scripts/list-budgets-controller.js","webpack:///./widget-bb-budget-ng/scripts/budget-form-controller.js"],"names":["moduleKey","hooksKey","budgetServiceKey","viewModelKey","routerKey","angular","module","eventBusModuleKey","modelBudgetModuleKey","stateContainerModuleKey","widgetModuleKey","bbIntentModuleKey","bbExtensionHelpersModuleKey","libBbCurrencyNgKey","factory","defaultHooks","bbStateContainerKey","ViewModel","modelBudgetKey","BudgetService","Router","controller","ListBudgetsController","BudgetFormController","extensionContextKey","budgetService","router","extensionHelpersContextKey","bbCurrencyRuleKey","getRule","run","bbIntentKey","eventBusKey","widgetKey","bbIntent","bbStateContainer","viewModel","eventBus","widget","init","persist","getState","setState","then","publish","id","getId","name","model","list","requestParams","beforeList","getBudgets","response","afterListSuccess","afterListError","startEdit","budgetId","edit","beforeStartEdit","schema","getBudgetSchema","startCreate","create","beforeStartCreate","budget","beforeEdit","updateBudget","afterEditSuccess","afterEditError","item","beforeCreate","createBudget","afterCreateSuccess","afterCreateError","deleteBudget","beforeDelete","afterDeleteSuccess","afterDeleteError","getCategories","categories","afterGetCategoriesSuccess","afterGetCategoriesError","getPreviousSpendings","params","Object","assign","creditDebitIndicator","spendingIndicator","getSpending","spending","afterGetSpendingSuccess","items","map","category","totalAmount","afterGetSpendingError","notificationLevels","DANGER","SUCCESS","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","successMessages","reduce","acc","method","vm","createAction","current","isLoading","budgets","error","budgetsError","makeUIErrorMessage","message","level","modelError","code","makeUISuccessMessage","createInitialState","template","route","form","spendings","notifications","findBudgetById","filter","pop","cancelCreate","copy","data","stateContainer","subscribers","setRoute","state","notifySubscribers","forEach","subscriber","goto","getParams","createSelector","getRoute","subscribe","callback","sub","service","unsubscribe","$onInit","loadItems","reload","$onDestroy","thenReload","save","value"],"mappings":"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","file":"widget-bb-budget-ng/scripts/widget-bb-budget-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"model-bb-budget-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-currency-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-budget-ng\", [\"vendor-bb-angular\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-ng\", \"lib-bb-intent-ng\", \"lib-bb-extension-helpers-ng\", \"model-bb-budget-ng\", \"lib-bb-state-container-ng\", \"lib-bb-currency-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-budget-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"model-bb-budget-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-currency-ng\"));\n\telse\n\t\troot[\"widget-bb-budget-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"model-bb-budget-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-currency-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_31__, __WEBPACK_EXTERNAL_MODULE_32__, __WEBPACK_EXTERNAL_MODULE_33__, __WEBPACK_EXTERNAL_MODULE_34__, __WEBPACK_EXTERNAL_MODULE_35__, __WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_37__, __WEBPACK_EXTERNAL_MODULE_38__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap eb1a3c706fc83c476bc2","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-budget-ng/model.xml\n// module id = 0\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 17\n// module chunks = 1 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 23\n// module chunks = 1 3","/**\n * @module widget-bb-budget-ng\n *\n * @description\n * Budget\n */\nimport angular from 'vendor-bb-angular';\n\nimport extendHooks, { extensionContextKey } from 'lib-bb-widget-extension-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\nimport modelBudgetModuleKey, { modelBudgetKey } from 'model-bb-budget-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport libBbCurrencyNgKey, { bbCurrencyRuleKey } from 'lib-bb-currency-ng';\n\nimport BudgetService from './service';\nimport ViewModel from './view-model/index';\nimport Router from './router';\nimport defaultHooks from './default-hooks';\n\n/* Controllers */\nimport ListBudgetsController from './list-budgets-controller';\nimport BudgetFormController from './budget-form-controller';\n\nconst moduleKey = 'widget-bb-budget-ng';\nconst hooksKey = `${moduleKey}:hooks`;\nconst budgetServiceKey = `${moduleKey}:service`;\nconst viewModelKey = `${moduleKey}:view-model`;\nconst routerKey = `${moduleKey}:router`;\n\nexport default angular\n  .module(moduleKey, [\n    eventBusModuleKey,\n    modelBudgetModuleKey,\n    stateContainerModuleKey,\n    widgetModuleKey,\n    bbIntentModuleKey,\n    bbExtensionHelpersModuleKey,\n    libBbCurrencyNgKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    /* into */\n    ViewModel,\n  ])\n\n  .factory(budgetServiceKey, [\n    modelBudgetKey,\n    viewModelKey,\n    /* into */\n    BudgetService,\n  ])\n\n  .factory(routerKey, [\n    bbStateContainerKey,\n    /* into */\n    Router,\n  ])\n\n  .controller('ListBudgetsController', [\n    budgetServiceKey,\n    routerKey,\n    /* into */\n    ListBudgetsController,\n  ])\n  .controller('BudgetFormController', [\n    budgetServiceKey,\n    routerKey,\n    /* into */\n    BudgetFormController,\n  ])\n\n  .factory(extensionContextKey, [\n    budgetServiceKey,\n    routerKey,\n    /* into */\n    (budgetService, router) => ({\n      budgetService,\n      router,\n    }),\n  ])\n\n  .factory(extensionHelpersContextKey, [\n    bbCurrencyRuleKey,\n    (getRule) => ({\n      getRule,\n    }),\n  ])\n\n  .run([\n    bbIntentKey, bbStateContainerKey, viewModelKey, eventBusKey, widgetKey,\n    (bbIntent, bbStateContainer, viewModel, eventBus, widget) => {\n      viewModel.init();\n\n      bbIntent.persist(bbStateContainer.getState, bbStateContainer.setState);\n\n      bbIntent.init().then(() => {\n        eventBus.publish('cxp.item.loaded', {\n          id: widget.getId(),\n        });\n      });\n    },\n  ])\n  .name;\n\n\n/**\n * @typedef {object} BudgetItem\n * @extends module:model-bb-budget-ng.BudgetItem\n */\n\n/**\n * @typedef {object} HelperContext\n * @extends module:lib-bb-extension-helpers-ng.HelperContext\n */\n\n/**\n * @typedef {object} IntentContext\n * @extends module:lib-bb-extension-intents-ng.IntentContext\n */\n\n/**\n * @typedef {object} EventContext\n * @extends module:lib-bb-extension-events-ng.EventContext\n * @property {BudgetService} BudgetService\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 31\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_32__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 32\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 33\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_34__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 34\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_35__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 35\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-budget-ng\"\n// module id = 36\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_37__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 37\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_38__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-currency-ng\"\n// module id = 38\n// module chunks = 3","import { spendingIndicator } from './constants';\n\n/**\n * The core functionality of the Budget widget\n *\n * The purpose of this module is to provide the main structure of the\n * widget. Outlining the workflows, connecting the data from the\n * model to the view via the customizations provided by the extension.\n *\n * @constructor BudgetService\n * @param {BudgetModel} model\n * @param {ViewModel} viewModel\n */\nexport default (model, viewModel) => ({\n  /**\n   * @name BudgetService#list\n   *\n   * @description\n   * Update the view with an list of items loaded from the data source\n   *\n   * @type {function}\n   * @param {Object} requestParams paremeters of the BudgetModel.GET request\n   * to be passed to the model\n   * @return {Promise}\n   */\n  list(requestParams) {\n    viewModel.list.beforeList();\n    return model.getBudgets(requestParams)\n      .then((response) => viewModel.list.afterListSuccess({\n        ...response,\n      }), viewModel.list.afterListError);\n  },\n\n  /**\n   * @name BudgetService#startEdit\n   *\n   * @description\n   * Prepare the view for editing a budget item\n   *\n   * @type {function}\n   * @param {string} budgetId budget item id to be modified\n   */\n  startEdit: (budgetId) => {\n    viewModel.edit.beforeStartEdit({ budgetId, schema: model.getBudgetSchema() });\n  },\n\n  /**\n   * @name BudgetService#startCreate\n   *\n   * @description\n   * Prepare the view for creating a new budget item\n   *\n   * @type {function}\n   */\n  startCreate: () => {\n    viewModel.create.beforeStartCreate(model.getBudgetSchema());\n  },\n\n  /**\n   * @name BudgetService#edit\n   *\n   * @description\n   * Updates budget item and triggers view update after it\n   *\n   * @type {function}\n   * @param {module:model-bb-budget-ng.BudgetItem} item budget item to be modified\n   * @return {Promise}\n   */\n  edit: (budget) => {\n    viewModel.edit.beforeEdit();\n    return model.updateBudget(budget.id, budget)\n      .then(\n        viewModel.edit.afterEditSuccess,\n        viewModel.edit.afterEditError\n      );\n  },\n\n  /**\n   * @name BudgetService#create\n   *\n   * @description\n   * Creates a new budget item and triggers view update after it\n   *\n   * @type {function}\n   * @param {module:model-bb-budget-ng.BudgetItem} item set of data for a new budget to be created\n   * @return {Promise}\n   */\n  create: (item) => {\n    viewModel.create.beforeCreate();\n    return model.createBudget(item)\n      .then(\n        viewModel.create.afterCreateSuccess,\n        viewModel.create.afterCreateError\n      );\n  },\n\n  /**\n   * @name BudgetService#deleteBudget\n   *\n   * @description\n   * Removes budget and triggers view update after it\n   *\n   * @type {function}\n   * @param {module:model-bb-budget-ng.BudgetItem} item budget item to be deleted\n   * @return {Promise}\n   */\n  deleteBudget: (budget) => {\n    viewModel.deleteBudget.beforeDelete();\n    return model.deleteBudget(budget.id, budget)\n      .then(\n        viewModel.deleteBudget.afterDeleteSuccess,\n        viewModel.deleteBudget.afterDeleteError\n      );\n  },\n\n  /**\n   * @name BudgetService#getCategories\n   *\n   * @description\n   * Retrieves list of available transaction categories\n   *\n   * @type {function}\n   * @return {Promise}\n   */\n  getCategories: () => model.getCategories()\n    .then(\n      viewModel.categories.afterGetCategoriesSuccess,\n      viewModel.categories.afterGetCategoriesError\n    ),\n\n  /**\n   * @name BudgetService#getPreviousSpendings\n   *\n   * @description\n   * Retrieves spendings per category\n   *\n   * @type {function}\n   * @param {object} params request parameters\n   * @return {Promise}\n   */\n  getPreviousSpendings: (params) => {\n    Object.assign(params, {\n      creditDebitIndicator: spendingIndicator,\n    });\n\n    return model.getSpending(params)\n      .then(response =>\n        viewModel.spending.afterGetSpendingSuccess(response.items.map(item => ({\n          category: item.category,\n          spending: item.totalAmount,\n        }))),\n        viewModel.spending.afterGetSpendingError\n      );\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/service.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\n/**\n * @name notificationLevels\n *\n * @type {object}\n * @description\n * enum with levels for ui notifications\n */\nexport const notificationLevels = {\n  DANGER: 'danger',\n  SUCCESS: 'success',\n};\n\n/**\n * @name errorMessages\n *\n * @type {object}\n * @description\n * enum with standart model error message keys\n */\nexport const errorMessages = {\n  [E_AUTH]: 'budget.model.error.auth',\n  [E_CONNECTIVITY]: 'budget.model.error.connectivity',\n  [E_USER]: 'budget.model.error.user',\n  [E_UNEXPECTED]: 'budget.model.error.unexpected',\n};\n\n/**\n * @name successMessages\n *\n * @type {object}\n * @description\n * enum with success messages keys\n */\nexport const successMessages = (() =>\n  ['create', 'update', 'delete'].reduce(\n    (acc, method) => Object.assign(acc, { [method]: `budget.model.${method}.success` }),\n    {}\n  )\n)();\n\n/**\n * @name spendingIndicator\n *\n * @type {string}\n * @description Flag for debit transactions\n */\nexport const spendingIndicator = 'DBIT';\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/constants.js","import list from './list';\nimport create from './create';\nimport edit from './edit';\nimport deleteBudget from './delete';\nimport spending from './spending';\nimport categories from './categories';\nimport { createInitialState } from './helpers';\n\n/**\n * @typedef {Object} ViewState\n * @property {boolean} isLoading\n * @property {Array<BudgetItem>} budgets\n * @property {string} template\n * @property {object} route\n * @property {object} form\n * @property {object[]} spendings\n * @property {object[]} categories\n * @property {object[]} notifications\n */\n\n/**\n * @name ViewModel\n * @type {object}\n * @ngkey widget-bb-budget-ng:viewModel\n * @inner\n */\nexport default (vm) => ({\n  init: vm.createAction((current = createInitialState()) => current),\n  /**\n   * @name ViewModel#list\n   * @description\n   * Actions for updating the parts of the `ViewState` related to budget list\n   * @type {ViewModelListActions}\n   * @inner\n   */\n  list: list(vm),\n  /**\n   * @name ViewModel#create\n   * @description\n   * Actions for updating the parts of the `ViewState` related to budget creation\n   * @type {ViewModelCreateActions}\n   * @inner\n   */\n  create: create(vm),\n  /**\n   * @name ViewModel#edit\n   * @description\n   * Actions for updating the parts of the `ViewState` related to budget editing\n   * @type {ViewModelEditActions}\n   * @inner\n   */\n  edit: edit(vm),\n  /**\n   * @name ViewModel#deleteBudget\n   * @description\n   * Actions for updating the parts of the `ViewState` related to budget deleting\n   * @type {ViewModelDeleteBudgetActions}\n   * @inner\n   */\n  deleteBudget: deleteBudget(vm),\n  /**\n   * @name ViewModel#spending\n   * @description\n   * Actions for updating the parts of the `ViewState` related to previous spending\n   * @type {ViewModelSpendingActions}\n   * @inner\n   */\n  spending: spending(vm),\n  /**\n   * @name ViewModel#categories\n   * @description\n   * Actions for updating the parts of the `ViewState` related to category list\n   * @type {ViewModelCategoriesActions}\n   * @inner\n   */\n  categories: categories(vm),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/index.js","import { makeUIErrorMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelListActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelListActions#beforeList\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user the list is being loaded\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeList: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelListActions#afterListSuccess\n   * @inner\n   * @type {function}\n   * @description Amend the view to display the list of items\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} response\n   * @param {Array<module:model-bb-budget-ng.BudgetItem>} response.items\n   * @return {ViewState} The new state of the view model\n   */\n  afterListSuccess: vm.createAction((current, response = {}) => ({\n    ...current,\n    budgets: response.items ? response.items : [],\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelListActions#afterListError\n   * @inner\n   * @type {function}\n   * @description Amend the view to display the error encountered when loading the list\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {ModelError} error\n   * @return {ViewState} The new state of the view model\n   */\n  afterListError: vm.createAction((current, error) => ({\n    ...current,\n    budgetsError: makeUIErrorMessage(error),\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/list.js","import { notificationLevels, errorMessages, successMessages } from '../constants';\n\n/**\n * @name makeUIErrorMessage\n *\n * @type {function}\n * @description Creates an error object for template\n *\n * @inner\n * @param {object} modelError Error object\n * @returns {{message: string, level: string}} notification\n */\nexport const makeUIErrorMessage = modelError => {\n  let message = '';\n  const level = notificationLevels.DANGER;\n\n  if (modelError && modelError.code) {\n    message = errorMessages[modelError.code];\n  }\n  return { message, level };\n};\n\n/**\n * @name makeUISuccessMessage\n *\n * @type {function}\n * @description Creates a success notification for a specific\n * method of [success, update, delete]\n *\n * @inner\n * @param {string} method\n * @returns {{message: string, level: string}} notification\n */\nexport const makeUISuccessMessage = (method) => ({\n  message: successMessages[method],\n  level: notificationLevels.SUCCESS,\n});\n\n/**\n * @name createInitialState\n *\n * @type {function}\n * @description Creates an initial state for the budgeting state\n *\n * @inner\n * @return {object}\n */\nexport const createInitialState = () => ({\n  isLoading: false,\n  budgets: [],\n  template: '#widget-bb-budget-ng/list.html',\n  route: {\n    name: 'list',\n    params: {},\n  },\n  form: {},\n  spendings: [],\n  categories: [],\n  notifications: [],\n});\n\n/**\n * @name findBudgetById\n *\n * @type {function}\n * @description Helper to get an item from the array by a budgetId\n *\n * @inner\n * @param {Array<BudgetItem>} budgets an array of BudgetItems to search in\n * @param {string} budgetId id to be used for a search\n * @returns {BudgetItem} search result (single item)\n */\nexport const findBudgetById = (budgets = [], budgetId) =>\n  budgets.filter(budget => budget.id === budgetId).pop();\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/helpers.js","import { makeUIErrorMessage, makeUISuccessMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelCreateActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelCreateActions#beforeStartCreate\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user that the create form is being\n   * ready to create a new item\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} schema budget POST schema to be used for validation\n   * @return {ViewState} The new state of the view model\n   */\n  beforeStartCreate: vm.createAction((current, schema) => ({\n    ...current,\n    form: {},\n    schema,\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelCreateActions#beforeCreate\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user the create operation is being\n   * started\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeCreate: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelCreateActions#afterCreateSuccess\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that create operation\n   * successfully finished\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  afterCreateSuccess: vm.createAction((current) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUISuccessMessage('create')],\n    isLoading: false,\n  })),\n  /**\n   * @name ViewModelCreateActions#afterCreateError\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that there was\n   * an error during the creation\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} error\n   * @returns {ViewState} The new state of the view model\n   */\n  afterCreateError: vm.createAction((current, error) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUIErrorMessage(error)],\n    isLoading: false,\n  })),\n  /**\n   * @name ViewModelCreateActions#cancelCreate\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that creating\n   * operation is canceled\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  cancelCreate: vm.createAction((current) => ({\n    ...current,\n    form: null,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/create.js","import angular from 'vendor-bb-angular';\nimport { makeUIErrorMessage, makeUISuccessMessage, findBudgetById } from './helpers';\n\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelEditActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelEditActions#beforeStartEdit\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user that the edit form is being\n   * ready\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {{budgetId: string, schema: object}} budget object id and schema to be used for editing\n   * @return {ViewState} The new state of the view model\n   */\n  beforeStartEdit: vm.createAction((current, params) => {\n    const { budgetId, schema } = params;\n    return {\n      ...current,\n      form: angular.copy(findBudgetById(current.budgets, budgetId)),\n      schema,\n      isLoading: false,\n    };\n  }),\n\n  /**\n   * @name ViewModelEditActions#beforeEdit\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user the edit operation is being\n   * started\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeEdit: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelEditActions#afterEditSuccess\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that edit operation\n   * successfully finished\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  afterEditSuccess: vm.createAction((current) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUISuccessMessage('update')],\n    isLoading: false,\n  })),\n  /**\n   * @name ViewModelEditActions#afterEditError\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that there was\n   * an error during the editing\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} error server error response\n   * @returns {ViewState} The new state of the view model\n   */\n  afterEditError: vm.createAction((current, error) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUIErrorMessage(error)],\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/edit.js","import { makeUIErrorMessage, makeUISuccessMessage } from './helpers';\n\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelDeleteBudgetActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelDeleteBudgetActions#beforeDelete\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user that delete operation is being started\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeDelete: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelDeleteBudgetActions#afterDeleteSuccess\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that delete operation successfully finished\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  afterDeleteSuccess: vm.createAction((current) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUISuccessMessage('delete')],\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelDeleteBudgetActions#afterDeleteError\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that there was\n   * an error during the deleting\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} error server error response\n   * @returns {ViewState} The new state of the view model\n   */\n  afterDeleteError: vm.createAction((current, error) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUIErrorMessage(error)],\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/delete.js","import { makeUIErrorMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelSpendingActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelSpendingActions#afterGetSpendingSuccess\n   * @description Update the `ViewState` after previous spending is retrieved\n   * @type {function}\n   * @inner\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {SpendingItem[]} spendings Array of objects with category names and spending amounts\n   * @return {void}\n   */\n  afterGetSpendingSuccess: vm.createAction((current, spendings) => ({\n    ...current,\n    spendings,\n  })),\n\n  /**\n   * @name ViewModelSpendingActions#afterGetSpendingError\n   * @description Update the `ViewState` after unsuccessful retrieval of previous spending\n   * @type {function}\n   * @inner\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {module:lib-bb-model-errors.ModelError} error\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetSpendingError: vm.createAction((current, error) => ({\n    ...current,\n    budgetsError: makeUIErrorMessage(error),\n  })),\n});\n\n/**\n * @typedef SpendingItem\n * @type {object}\n *\n * @property {string} category Category name\n * @property {object} spending Object with the spending amount and currency code\n * @property {number} spending.amount\n * @property {string} spending.currencyCode\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/spending.js","import { makeUIErrorMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelCategoriesActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelCategoriesActions#afterGetCategoriesSuccess\n   * @description Update the `ViewState` after category list is retrieved\n   * @type {function}\n   * @inner\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} response Categories management data module response object\n   * @return {void}\n   */\n  afterGetCategoriesSuccess: vm.createAction((current, response) => ({\n    ...current,\n    categories: response.data,\n  })),\n\n  /**\n   * @name ViewModelCategoriesActions#afterGetCategoriesError\n   * @description Update the `ViewState` after unsuccessful retrieval of category list\n   * @type {function}\n   * @inner\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {module:lib-bb-model-errors.ModelError} error\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetCategoriesError: vm.createAction((current, error) => ({\n    ...current,\n    budgetsError: makeUIErrorMessage(error),\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/view-model/categories.js","export default (stateContainer) => {\n  let subscribers = [];\n\n  const setRoute = stateContainer.createAction((state, { name, params }) => ({\n    ...state,\n    route: {\n      name,\n      params,\n    },\n  }));\n\n  const notifySubscribers = (name, params) => {\n    subscribers.forEach(subscriber => {\n      subscriber(name, params);\n    });\n  };\n\n  return {\n    goto: (name, params) => {\n      setRoute({ name, params });\n      notifySubscribers(name, params);\n    },\n\n    getParams: stateContainer.createSelector(state => state.route.params),\n\n    getRoute: stateContainer.createSelector(state => state.route.name),\n\n    subscribe: (callback) => {\n      subscribers = [...subscribers, callback];\n      return () => {\n        subscribers = subscribers.filter(sub => sub !== callback);\n      };\n    },\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/router.js","export default {};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/default-hooks.js","/**\n * @name ListBudgetsController\n * @ngkey ListBudgetsController\n * @type {object}\n * @description\n * Budget widget list controller\n */\nexport default function (service, router) {\n  let unsubscribe = null;\n\n  /**\n   * @name ListBudgetsController#$onInit\n   *\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @type {function}\n   * @returns {Promise} Promise which is resolved once contoller is initialized,\n   *   or rejected in case of errors\n   */\n  const $onInit = () => {\n    const loadItems = () => service.list();\n    loadItems();\n    unsubscribe = router.subscribe((route) => {\n      const params = router.getParams() || {};\n      if (route !== 'list' || !params.reload) return;\n      loadItems();\n    });\n  };\n\n  /**\n   * @name ListBudgetsController#$onDestroy\n   *\n   * @description\n   * AngularJS Lifecycle hook used to destroy the controller\n   *\n   * @type {function}\n   */\n  const $onDestroy = () => {\n    if (unsubscribe) unsubscribe();\n  };\n\n  /**\n   * @name ListBudgetsController#edit\n   *\n   * @description\n   * Internal navigation for getting to edit form from the list of items\n   *\n   * @type {function}\n   * @param {string} budgetId identifier of a budget to be changed\n   */\n  const edit = budgetId => {\n    router.goto('form', budgetId);\n  };\n\n  /**\n   * @name ListBudgetsController#create\n   *\n   * @description\n   * Internal navigation for getting to create form from the list of items\n   *\n   * @type {function}\n   */\n  const create = () => {\n    router.goto('form');\n  };\n\n  /**\n   * @name ListBudgetsController#deleteBudget\n   *\n   * @description\n   * Controller method to handle deleting of an item\n   *\n   * @type {function}\n   * @param {object} budget Object to be removed\n   * @param {?boolean} thenReload Flag which defines if budget values should be reloaded\n   * from the server after delete operation (default true)\n   */\n  const deleteBudget = (budget, thenReload = true) =>\n    service.deleteBudget(budget)\n      .then(() => {\n        router.goto('list', { reload: thenReload });\n      });\n\n\n  return {\n    edit,\n    create,\n    deleteBudget,\n    $onInit,\n    $onDestroy,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/list-budgets-controller.js","/**\n * @name BudgetFormController\n * @ngkey BudgetFormController\n * @type {object}\n * @description\n * Budget widget form controller\n */\nexport default (service, router) => ({\n  /**\n   * @name BudgetFormController#$onInit\n   *\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @type {function}\n   * @returns {Promise} Promise which is resolved once contoller is initialized,\n   * or rejected in case of errors\n   */\n  $onInit() {\n    const budgetId = router.getParams();\n    service.getCategories()\n      .then(() => {\n        if (budgetId) {\n          service.startEdit(budgetId);\n        } else {\n          service.startCreate();\n        }\n      });\n  },\n\n  /**\n   * @name BudgetFormController#$onDestroy\n   *\n   * @description\n   * AngularJS Lifecycle hook used to destroy the controller\n   *\n   * @type {function}\n   */\n  $onDestroy() {\n    router.goto('list');\n  },\n\n  /**\n   * @name BudgetFormController#save\n   *\n   * @description\n   * Controller method to handle new/edited item saving\n   * and to initiate state change via routing\n   *\n   * @type {function}\n   * @param {object} value Object to be saved as a budget\n   * @param {?boolean} thenReload Flag which defines if budget values should be reloaded\n   * from the server after update/create operation\n   */\n  save(value, thenReload = true) {\n    if (router.getParams()) {\n      service.edit(value)\n        .then(() => {\n          router.goto('list', { reload: thenReload });\n        });\n    } else {\n      service.create(value)\n        .then(() => {\n          router.goto('list', { reload: thenReload });\n        });\n    }\n  },\n\n  /**\n   * @name BudgetFormController#getPreviousSpendings\n   *\n   * @description\n   * Controller method to handle retrieving of previous spendings per category\n   *\n   * @type {function}\n   * @param {object} params Request parameters\n   */\n  getPreviousSpendings(params) {\n    service.getPreviousSpendings(params);\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-budget-ng/scripts/budget-form-controller.js"],"sourceRoot":""}