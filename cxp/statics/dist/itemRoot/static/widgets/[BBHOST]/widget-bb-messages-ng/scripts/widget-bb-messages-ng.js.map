{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///webpack/bootstrap 01348824f603eeb6378e?e65a********","webpack:///./widget-bb-messages-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114****","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-messages-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"model-bb-messages-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-user-data-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///./widget-bb-messages-ng/scripts/controller.js","webpack:///./widget-bb-messages-ng/scripts/constants.js","webpack:///./widget-bb-messages-ng/scripts/draft.controller.js","webpack:///./widget-bb-messages-ng/scripts/conversation.controller.js","webpack:///./widget-bb-messages-ng/scripts/default-hooks.js"],"names":["defaultHooks","hooksKey","run","widget","bus","bbIntents","publish","id","getId","init","module","factory","controller","name","MessagesController","errorMessages","ERROR_AUTH","ERROR_CONNECTION","ERROR_UNEXPECTED","model","userDataService","hooks","$q","$ctrl","getInitialConversationData","items","totalCount","currentPage","loading","onNewItemsLoaded","itemsWrapper","state","currentFolder","logGlobalError","error","modelError","code","globalError","message","logStatus","messageKey","isError","status","data","i18n","hideMailbox","showMailbox","fetchData","loadFn","catch","CONVERSATION_LOAD_FAILED","err","finally","enrichWithSenderField","conversations","sender","map","conversationSender","conversation","otherUserName","Object","assign","loadItems","view","offset","finallyCallback","sliceConfig","from","size","config","pageSize","inbox","loadConversations","archived","loadArchivedConversations","sent","loadSentConversations","currentUser","username","drafts","loadDrafts","promise","bind","then","transformConversations","loadPage","pageNo","fetchUnreadMessagesCount","getUnreadMessagesCount","unreadMessagesCount","countWrapper","openFolder","selectedConversations","currentView","countUnreadItems","onItemSelected","console","warn","push","onItemDeselected","splice","indexOf","decrementUnreadMessagesCount","removeItem","single","deleteInProgress","selected","removeConversation","containsUnread","CONVERSATION_REMOVE","CONVERSATION_DELETE_FAILED","removeSelectedItems","promises","forEach","selectedConversation","all","CONVERSATIONS_REMOVE","bindEvents","subscribe","CONVERSATION_CLOSE","CONVERSATION_OPEN","ERROR","SUCCESS","$onInit","getUserData","userData","getTopics","topics","freeze","initialLoading","openItem","showUnreadConversationsCount","getBooleanPreference","getLongPreference","statics","views","INBOX","folders","dismissTime","Views","Error","DRAFT_SAVE","DRAFT_SENT","CONVERSATION_SAVE_REPLY","CONVERSATION_SEND_REPLY","Success","Text","Event","DRAFT_CREATE","DRAFT_DISMISS","IntentsKeys","MESSAGE_CREATE","DraftController","$draftCtrl","afterSent","opened","send","pDraft","draft","createDraft","when","response","sendDraft","sendMessageError","dismiss","open","handle","subjectMaxLength","getStringPreference","ConversationController","Promise","messages","getMessageText","content","replace","setDraftInitialBody","initialBody","body","fetchMessages","loadMessages","msg","text","fetchDrafts","getLatestConversationDraft","markConversationMessagesAsRead","pConversation","markUnreadMessagesAsRead","viewConversation","fetchMessagesPromise","markMessagesAsRead","close","sendReply","conversationId","draftId","saveDraft","saveConversationDraft","undefined","idHolder","senderName","deliveredOn","Date","toISOString","filter","toggleReplyForm","replyForm"],"mappings":"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","file":"widget-bb-messages-ng/scripts/widget-bb-messages-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-messages-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-user-data-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-messages-ng\", [\"vendor-bb-angular\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"model-bb-messages-ng\", \"lib-bb-widget-ng\", \"lib-bb-user-data-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-messages-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-messages-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-user-data-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"widget-bb-messages-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-bb-messages-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-user-data-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_31__, __WEBPACK_EXTERNAL_MODULE_54__, __WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_56__, __WEBPACK_EXTERNAL_MODULE_57__, __WEBPACK_EXTERNAL_MODULE_58__, __WEBPACK_EXTERNAL_MODULE_59__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 01348824f603eeb6378e","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-messages-ng/model.xml\n// module id = 0\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 28\n// module chunks = 4 5 6 7 8 9","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 31\n// module chunks = 4 9","/**\n * @module widget-bb-messages-ng\n *\n * @description\n * Message Center Widget\n */\nimport angular from 'vendor-bb-angular';\n\nimport extendHooks from 'lib-bb-widget-extension-ng';\n\nimport modelMessagesModuleKey, { modelMessagesKey } from 'model-bb-messages-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbUserDataModuleKey, { bbUserDataServiceKey } from 'lib-bb-user-data-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n\nimport Controller from './controller';\nimport DraftController from './draft.controller';\nimport ConversationController from './conversation.controller';\nimport * as defaultHooks from './default-hooks';\n\nconst hooksKey = 'widget-bb-messages-ng:hooks';\n\nfunction run(widget, bus, bbIntents) {\n  bus.publish('cxp.item.loaded', {\n    id: widget.getId(),\n  });\n\n  bbIntents.init(() => {});\n}\n\nexport default angular\n  .module('widget-bb-messages-ng', [\n    modelMessagesModuleKey,\n    widgetModuleKey,\n    bbUserDataModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .controller('MessagesController', [\n    // dependencies to inject\n    modelMessagesKey,\n    bbUserDataServiceKey,\n    hooksKey,\n    '$q',\n    widgetKey,\n    eventBusKey,\n    /* into */\n    Controller,\n  ])\n  .controller('DraftController', [\n    // dependencies to inject\n    modelMessagesKey,\n    widgetKey,\n    eventBusKey,\n    '$q',\n    bbIntentKey,\n    /* into */\n    DraftController,\n  ])\n  .controller('ConversationController', [\n    // dependencies to inject\n    eventBusKey,\n    modelMessagesKey,\n    bbUserDataServiceKey,\n    '$q',\n    // into\n    ConversationController,\n  ])\n\n  .run([\n    widgetKey,\n    eventBusKey,\n    bbIntentKey,\n    run,\n  ])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-messages-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_54__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 54\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-messages-ng\"\n// module id = 55\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_56__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 56\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-user-data-ng\"\n// module id = 57\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_58__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 58\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_59__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 59\n// module chunks = 9","import { E_AUTH, E_CONNECTIVITY, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { Event, Text, Views, Error, Success } from './constants';\n\nconst errorMessages = {\n  [E_AUTH]: Text.ERROR_AUTH,\n  [E_CONNECTIVITY]: Text.ERROR_CONNECTION,\n  [E_UNEXPECTED]: Text.ERROR_UNEXPECTED,\n};\n\nexport default function MessagesController(model, userDataService, hooks, $q, widget, bus) {\n  /**\n   * @name MessagesController\n   * @ngkey MessagesController\n   * @type {object}\n   * @description Controller for message conversations list.\n   */\n  const $ctrl = this;\n\n  /**\n   * @name MessagesController#getInitialConversationData\n   * @description Gets an object with initial state of conversation data.\n   * @type {function}\n   * @returns {ConversationData}\n   */\n  const getInitialConversationData = () => ({\n    items: null, // null means not loaded\n    totalCount: 0,\n    currentPage: 1,\n    loading: false,\n  });\n\n  const onNewItemsLoaded = (itemsWrapper) => {\n    $ctrl.state.currentFolder.items = itemsWrapper.items;\n    $ctrl.state.currentFolder.totalCount = itemsWrapper.totalCount;\n  };\n\n  /**\n   * @name MessagesController#logGlobalError\n   * @description Registers global error.\n   * This blocks from using the widget.\n   * @param {object} modelError Error retuned from Data module\n   * @type {function}\n   */\n  const logGlobalError = modelError => {\n    let error = '';\n    if (modelError && modelError.code) {\n      error = errorMessages[modelError.code];\n    }\n\n    $ctrl.state.globalError = {\n      message: error,\n    };\n  };\n\n  /**\n   * @name MessagesController#logStatus\n   * @description Registers action.\n   * This does not block the user form using other parts of the widget.\n   * @param {string} messageKey Message key\n   * @param {string} isError True if it is error status\n   * @type {function}\n   */\n  const logStatus = (messageKey, isError = false) => {\n    $ctrl.state.status.data = { i18n: messageKey, isError };\n  };\n  /**\n   * @name MessagesController#hideMailbox\n   * @description Turn mailbox display OFF\n   * @type {function}\n   * @inner\n   */\n  function hideMailbox() {\n    $ctrl.state.showMailbox = false;\n  }\n\n  /**\n   * @name MessagesController#showMailbox\n   * @description Turn mailbox display ON\n   * @type {function}\n   * @inner\n   */\n  function showMailbox() {\n    $ctrl.state.showMailbox = true;\n  }\n\n  const fetchData = (loadFn) => {\n    $ctrl.state.currentFolder.loading = true;\n\n    return loadFn()\n      .catch(err => { bus.publish(Event.CONVERSATION_LOAD_FAILED, err); })\n      .finally(() => {\n        $ctrl.state.currentFolder.loading = false;\n        return;\n      });\n  };\n\n  /**\n   * @description Enriches conversations with sender field.\n   * If the sender parameter is undefined, conversation.otherUserName is mapped\n   * to the sender field.\n   *\n   * @param {Array<Conversation>} conversations array of conversations\n   * @param {string?} sender sender's name to be mapped to conversations.\n   * If not specified, conversation.otherUserName is used.\n   * @type {function}\n   */\n  const enrichWithSenderField = (conversations, sender) =>\n    conversations.map(conversation => {\n      const conversationSender = sender || conversation.otherUserName;\n      if (conversationSender) {\n        return Object.assign({\n          sender: conversationSender,\n        }, conversation);\n      }\n      return conversation;\n    });\n\n  /**\n   * @description\n   * Loads items for given view. The number of returned items is always equal or lower than limit.\n   * This method can both be used with \"ui-bb-load-more-ng\" component.\n   * @name MessagesController#loadPage\n   * @param {string} view view for which the page should be loaded\n   * @param {number} [offset] offset, from which the items will be collected.\n   * @param {number} [limit] limit, which determines the maximum amount of returned items.\n   * @param {function} [finallyCallback] optional callback function to be executed after page is\n   *                                   loaded. It will be executed both on successful and failing\n   *                                   loads.\n   * @type {function}\n   */\n  const loadItems = (view, offset, finallyCallback) => {\n    const sliceConfig = {\n      from: offset,\n      size: $ctrl.config.pageSize,\n    };\n\n    let loadFn;\n    let sender;\n    switch (view) {\n      case Views.inbox:\n        loadFn = model.loadConversations;\n        break;\n\n      case Views.archived:\n        loadFn = model.loadArchivedConversations;\n        break;\n\n      case Views.sent:\n        loadFn = model.loadSentConversations;\n        sender = $ctrl.currentUser.username;\n        break;\n\n      case Views.drafts:\n        loadFn = model.loadDrafts;\n        break;\n\n      default:\n        throw new Error(`Unknown view ${view}. Unable to fetch data.`);\n    }\n\n    const promise = fetchData(loadFn.bind(model, sliceConfig))\n      .then(itemsWrapper => {\n        const items = enrichWithSenderField(\n          itemsWrapper.conversations || itemsWrapper.drafts || [],\n          sender);\n\n        return {\n          items,\n          totalCount: itemsWrapper.totalCount,\n        };\n      })\n      .then(itemsWrapper =>\n        hooks.transformConversations(itemsWrapper, $ctrl.state.currentFolder.items))\n      .then(onNewItemsLoaded.bind(this));\n\n    if (finallyCallback) {\n      promise.finally(finallyCallback);\n    }\n\n    return promise;\n  };\n\n  /**\n   * @description\n   * Loads a page of items for given view. Pages are counted starting with 1.\n   * This method can both be used with \"ui-bb-load-more-ng\" and \"uib-pagination\" components.\n   * @name MessagesController#loadPage\n   * @param {string} view view for which the page should be loaded\n   * @param {number} [pageNo=1] Optional page number to load. Numbering starts to 1. Defaults to 1.\n   * @param {function} [finallyCallback] optional callback function to be executed after page is\n   *                                   loaded. It will be executed both on successful and failing\n   *                                   loads.\n   * @type {function}\n   */\n  const loadPage = (view, pageNo = 1, finallyCallback) => {\n    const offset = (pageNo - 1) * $ctrl.config.pageSize;\n    return loadItems(view, offset, finallyCallback)\n      .then(() => {\n        $ctrl.state.currentFolder.currentPage = pageNo;\n      });\n  };\n\n  /**\n   * @name MessagesController#fetchUnreadMessagesCount\n   * @description Counts user's unread messages and updates the model value\n   * @type {function}\n   * @returns {Promise.<{unreadMessagesCount: number}>}\n   *          a promise holding user's unread messages count\n   */\n  const fetchUnreadMessagesCount = () =>\n    model.getUnreadMessagesCount()\n      .then(countWrapper => {\n        $ctrl.state.unreadMessagesCount = countWrapper.unreadMessagesCount;\n        return countWrapper;\n      });\n\n  /**\n   * @description\n   * Switches mailbox view between different conversation lists.\n   * E.g. from Drafts to Archived.\n   * @name MessagesController#openFolder\n   * @param {string} view View for which folder should be revealed\n   * @type {function}\n   */\n  const openFolder = (view) => {\n    /* Clear selections */\n    $ctrl.state.showMailbox = true;\n    $ctrl.state.selectedConversations = [];\n    $ctrl.state.currentView = view;\n    $ctrl.state.currentFolder = getInitialConversationData();\n\n    /* Load items if not loaded */\n    if (!$ctrl.state.currentFolder.items) {\n      loadPage(view);\n    }\n  };\n\n  /**\n   * @name MessagesController#countUnreadItems\n   * @description\n   * Returns unread item count for user Inbox.\n   * Returns 0, if inbox is loading.\n   *\n   * @type {function}\n   * @returns {number}\n   */\n  const countUnreadItems = () => $ctrl.state.unreadMessagesCount;\n\n  /**\n   * @deprecated\n   * @description Handles conversation selection\n   * @name MessagesController#onItemSelected\n   * @param {Conversation} conversation Conversation to be selected\n   * @type {function}\n   */\n  function onItemSelected(conversation) {\n    // eslint-disable-next-line max-len, no-console\n    console.warn('DEPRECATED - This method will be removed in next major update. Use extensions helper method instead.');\n    $ctrl.state.selectedConversations.push(conversation);\n  }\n\n  /**\n   * @deprecated\n   * @description Handles conversation de-selection\n   * @name MessagesController#onItemDeselected\n   * @param {Conversation} conversation Conversation to be de-selected\n   * @type {function}\n   */\n  function onItemDeselected(conversation) {\n    // eslint-disable-next-line max-len, no-console\n    console.warn('DEPRECATED - This method will be removed in next major update. Use extensions helper method instead.');\n    $ctrl.state.selectedConversations.splice(\n      $ctrl.state.selectedConversations.indexOf(conversation), 1);\n  }\n\n  /**\n   * @name MessagesController#decrementUnreadMessagesCount\n   * @description Decrements unread messages count\n   * @type {function}\n   * @inner\n   */\n  const decrementUnreadMessagesCount = () => {\n    if ($ctrl.state.unreadMessagesCount > 0) {\n      $ctrl.state.unreadMessagesCount--;\n    }\n  };\n\n  /**\n   * @description Removes given conversation\n   * @name MessagesController#removeItem\n   * @param {Object} conversation Converstation to be removed\n   * @type {function}\n   * @return {Promise} succesful promise if removal of given conversation succeeded\n   */\n  const removeItem = (conversation, single = true) => {\n    const currentFolder = $ctrl.state.currentFolder;\n    const conversations = currentFolder.items;\n\n    currentFolder.totalCount--;\n    Object.assign(conversation, {\n      deleteInProgress: true,\n      selected: false,\n    });\n\n    return model.removeConversation(conversation.id)\n      .then(() => {\n        conversations.splice(conversations.indexOf(conversation), 1);\n        if (conversation.containsUnread && conversation.status === 'inbox') {\n          decrementUnreadMessagesCount();\n        }\n\n        if (single) {\n          logStatus(Success.CONVERSATION_REMOVE);\n          showMailbox();\n        }\n      })\n      .catch((err) => {\n        currentFolder.totalCount++;\n        Object.assign(conversation, { deleteInProgress: false });\n\n        /*\n         * Event indicates that removal of a conversation has failed.\n         *\n         * <p> Payload contains server-side error </p>\n         * @event bb.event.messaging.delete.failed\n         * @type {string}\n         */\n        bus.publish(Event.CONVERSATION_DELETE_FAILED, err);\n\n        if (single) {\n          logStatus(Error.CONVERSATION_REMOVE, true);\n        }\n\n        throw err;\n      });\n  };\n\n  /**\n   * @deprecated\n   * Removes selected conversations.\n   * <p>Selected conversations are tracked in \"selectedConversations\" property in controller's\n   * state object.</p>\n   * @name MessagesController#removeSelectedItems\n   * @type {function}\n   * @return {Promise} succesful promise if removal of all selected conversations succeeded\n   */\n  function removeSelectedItems() {\n    // eslint-disable-next-line max-len, no-console\n    console.warn('DEPRECATED - This method will be removed in next major update. Use extensions helper method instead.');\n    const promises = [];\n\n    $ctrl.state.selectedConversations.forEach((selectedConversation) => {\n      promises.push(removeItem(selectedConversation, false));\n\n      return;\n    });\n    $ctrl.state.selectedConversations = [];\n\n    return $q.all(promises)\n      .then(() => {\n        logStatus(Success.CONVERSATIONS_REMOVE);\n      })\n      .catch(() => {\n        logStatus(Error.CONVERSATIONS_REMOVE, true);\n      });\n  }\n\n  /**\n   * @name MessagesController#bindEvents\n   * @description Adds subscriptions to bus events\n   *\n   * @inner\n   * @type {function}\n   */\n  function bindEvents() {\n    bus.subscribe(Event.CONVERSATION_CLOSE, showMailbox);\n    bus.subscribe(Event.CONVERSATION_OPEN, hideMailbox);\n    bus.subscribe(Event.CONVERSATION_LOAD_FAILED, logGlobalError);\n\n    // Error handling\n    bus.subscribe(Event.ERROR, (error) => {\n      logStatus(error, true);\n    });\n\n    // Success handling\n    bus.subscribe(Event.SUCCESS, (message) => {\n      logStatus(message);\n    });\n  }\n\n  /*\n   * @description Widget initialization logic.\n   * @type {function}\n   */\n  const $onInit = () => {\n    bindEvents();\n    userDataService.getUserData()\n      .then(userData => {\n        $ctrl.currentUser = userData;\n        $ctrl.userData = userData;\n\n        return model.getTopics();\n      })\n      .then(topics => {\n        $ctrl.topics = Object.freeze(topics);\n      })\n      .finally(() => {\n        $ctrl.state.initialLoading = false;\n      });\n  };\n\n  /**\n   * Opens given conversation item. Hides currently viewed mailbox and\n   * publishes event to open conversation.\n   * @name MessagesController#openItem\n   * @type {function}\n   * @param {Conversation} conversation conversation to open\n   * @fires bb.event.messaging.conversation.open\n   */\n  function openItem(conversation) {\n    if (conversation.containsUnread && conversation.status === 'inbox') {\n      decrementUnreadMessagesCount();\n    }\n    /*\n     * Event indicates that user has initiated opening of a single conversation.\n     * <p>Payload is of Conversation type</p>\n     * @event bb.event.messaging.conversation.open\n     * @type {string}\n     */\n    bus.publish(Event.CONVERSATION_OPEN, conversation);\n  }\n\n  Object.assign($ctrl, {\n    /**\n     * Config mapped from widget's preferences.\n     *\n     * <p>\"showUnreadConversationsCount\" is mapped from \"showUnreadConversationsCount\" preference\n     * </p>\n     * @name MessagesController#config\n     * @type {MessagesControllerConfig}\n     */\n    config: Object.freeze({\n      showUnreadConversationsCount: widget.getBooleanPreference('showUnreadConversationsCount'),\n      pageSize: widget.getLongPreference('pageSize'),\n    }),\n\n    /**\n     *  Holds static data of controller.\n     *  @name MessagesController#statics\n     *  @type {MessagesControllerStatics}\n     */\n    statics: {\n      views: Views,\n    },\n\n    /**\n     * @description Keeps state related data\n     * @name MessagesController#state\n     * @type {MessagesControllerState}\n     */\n    state: {\n      showMailbox: true,\n      currentView: Views.INBOX,\n      currentFolder: getInitialConversationData(),\n      folders: {\n        inbox: getInitialConversationData(),\n        sent: getInitialConversationData(),\n        archived: getInitialConversationData(),\n        drafts: getInitialConversationData(),\n      },\n      selectedConversations: [],\n      error: null,\n      initialLoading: true,\n      status: {\n        dismissTime: 3,\n        data: null,\n      },\n    },\n\n    openFolder,\n    loadItems,\n    loadPage,\n    fetchUnreadMessagesCount,\n    countUnreadItems,\n    onItemSelected,\n    onItemDeselected,\n    openItem,\n    removeSelectedItems,\n    removeItem,\n    /* Lifecycle hooks */\n    $onInit,\n  });\n}\n\n\n/**\n * @typedef {Object} ConversationData\n * @property {Array<Conversation>} items List of conversations. Null value means that\n *                                       conversations haven't been loaded yet.\n * @property {number} totalCount total count of items in the backend. Used to determine if there\n *                               are more pages to load.\n * @property {number} currentPage current page. Numbering starts at 1.\n * @property {boolean} loading Flag indicating whether conversation data is currently being loaded\n */\n\n/**\n * @typedef {Object} MessagesControllerConfig\n * @property {Number} subjectMaxLength Max allowed length for new draft subject.\n * @property {Number} pageSize Number of items to be displayed in a single page load\n */\n\n/**\n * @typedef {Object} MessagesControllerState State of MessagesController\n * @property {boolean} showMailbox Mailbox show/hide flag\n * @property {string} currentView Tracks the state of which Folder the user has active\n * @property {ConversationData} currentFolder Data of currently opened folder\n * @property {Object<string, ConversationData>} folders Holds users mailbox data. Keys as folders\n * @property {Array<Conversation>} selectedConversations An array of currently selected\n *                                                       conversations\n * @property {boolean} initialLoading True if initial loading is in progress.\n * @property {string} error Recent error code, if any.\n * @property {string} globalError Global error, if any.\n * @property {number} unreadMessagesCount Unread messages count,\n                                          undefined if the call to backend failed.\n */\n\n/**\n * @typedef {Object} Conversation\n * @property {string} id ID of the conversation\n * @property {string} category category of the conversation\n * @property {string} otherUser other user's LDAP user string\n * @property {string} otherUserName other user's name\n * @property {string} sender name of the conversation sender\n * @property {string} body body of last message in the conversation\n * @property {string} subject conversation subject\n * @property {boolean} containsUnread flag indicating whether the conversation has unread messages\n * @property {boolean} important importance flag\n * @property {number} numberOfMessages count of number of messages in the conversation\n * @property {string} timestamp last modification time\n */\n\n/**\n * @typedef {Object} MessagesControllerStatics\n * @property {Views} views views supported by controller\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-messages-ng/scripts/controller.js","/**\n * @description Different views the user can toggle between\n * @name Views\n * @type {Views}\n */\nexport const Views = {\n  inbox: 'inbox',\n  sent: 'sent',\n  archived: 'archived',\n  drafts: 'drafts',\n};\n\n/**\n * @description\n * Widget static keys for error messages\n *\n * @name Error\n * @type {object}\n */\nexport const Error = {\n  DRAFT_SAVE: 'error.draft.save',\n  DRAFT_SENT: 'error.draft.send',\n  CONVERSATION_SAVE_REPLY: 'error.conversation.save-reply',\n  CONVERSATION_SEND_REPLY: 'error.conversation.send-reply',\n  CONVERSATION_REMOVE: 'error.conversation.remove',\n  CONVERSATIONS_REMOVE: 'error.conversations.remove',\n};\n\n/**\n * @description\n * Widget static keys for success messages\n *\n * @name Success\n * @type {object}\n */\nexport const Success = {\n  DRAFT_SENT: 'success.draft.send',\n  CONVERSATION_SEND_REPLY: 'success.conversation.send-reply',\n  CONVERSATION_REMOVE: 'success.conversation.remove',\n  CONVERSATIONS_REMOVE: 'success.conversations.remove',\n};\n\n/**\n * @description\n * Widget static texts for the template\n *\n * @name Text\n * @type {object}\n */\nexport const Text = {\n  ERROR_AUTH: 'error.auth',\n  ERROR_CONNECTION: 'error.connection',\n  ERROR_UNEXPECTED: 'error.unexpected',\n};\n\n/**\n * Widget events enum\n * @name Event\n * @type {Object}\n */\nexport const Event = {\n  /**\n   * @event bb.event.messaging.error\n   * @description Event payload is a string with error code.\n   * @type {string}\n   */\n  ERROR: 'bb.event.messaging.error',\n  /**\n   * @event bb.event.messaging.success\n   * @description Event payload is a string with success code.\n   * @type {string}\n   */\n  SUCCESS: 'bb.event.messaging.success',\n\n  DRAFT_CREATE: 'bb.event.messaging.draft.create',\n  DRAFT_SENT: 'bb.event.messaging.draft.sent',\n  DRAFT_DISMISS: 'bb.event.messaging.draft.dismiss',\n\n  CONVERSATION_OPEN: 'bb.event.messaging.conversation.open',\n  CONVERSATION_CLOSE: 'bb.event.messaging.conversation.close',\n  CONVERSATION_DELETE_FAILED: 'bb.event.messaging.delete.failed',\n  CONVERSATION_LOAD_FAILED: 'bb.event.messaging.load.failed',\n};\n\n/**\n * @description\n * Widget intents to be handled\n *\n * @name IntentsKeys\n * @type {object}\n */\nexport const IntentsKeys = {\n  MESSAGE_CREATE: 'go.message.create',\n};\n\n/**\n * Contains dynamic properties with view names. Example: {inbox: \"inbox\"}.\n * @typedef {Object} Views\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-messages-ng/scripts/constants.js","import { Event, Error, IntentsKeys, Success } from './constants';\n\nexport default function DraftController(model, widget, bus, $q, bbIntents) {\n  /**\n   * @name DraftController\n   * @ngkey DraftController\n   * @type {object}\n   * @description Draft Controller is responsible for draft creation and sending.\n   */\n  const $draftCtrl = this;\n\n  /**\n   * @description Handles logic after draft has been sent\n   * @name DraftController#afterSent\n   * @type {function}\n   * @fires bb.event.messaging.draft.sent\n   * @fires bb.event.messaging.success\n   * @inner\n   */\n  const afterSent = () => {\n    bus.publish(Event.DRAFT_SENT);\n    bus.publish(Event.SUCCESS, Success.DRAFT_SENT);\n    $draftCtrl.state.opened = false;\n  };\n\n  /**\n   * @description Sends out given draft letter\n   * @name DraftController#send\n   * @param {Draft} pDraft Draft letter to send\n   * @fires bb.event.messaging.draft.sent\n   * @fires bb.event.messaging.error\n   * @type {function}\n   * @return {Promise} succesful promise if draft has been sent successfully\n   */\n  const send = (pDraft) => {\n    const draft = Object.assign({}, pDraft);\n    const promise = !draft.id ? model.createDraft(draft) : $q.when(draft);\n\n    return promise\n      .then(response => {\n        draft.id = response.id;\n        model.sendDraft(draft.id)\n          .then(afterSent)\n          .catch(() => {\n            bus.publish(Event.ERROR, Error.DRAFT_SAVE);\n          });\n      })\n      .catch(() => {\n        $draftCtrl.sendMessageError = true;\n        bus.publish(Event.ERROR, Error.DRAFT_SAVE);\n        return;\n      });\n  };\n\n  /**\n   * @description Cancel draft editing\n   * @name DraftController#dismiss\n   * @type {function}\n   * @fires bb.event.messaging.draft.dismiss\n   */\n  const dismiss = () => {\n    /**\n     * @event bb.event.messaging.draft.dismiss\n     * @description Event fired when user dismisses draft creation. Event carries no payload.\n     * @type {string}\n     */\n    bus.publish(Event.DRAFT_DISMISS);\n    $draftCtrl.state.opened = false;\n  };\n\n  /**\n   * @description Initiate draft creation/editing\n   * @name DraftController#open\n   * @type {function}\n   * @fires bb.event.messaging.draft.create\n   */\n  const open = () => {\n    /**\n     * @event bb.event.messaging.draft.create\n     * @description Event fired when user opens draft creation. Event carries no payload.\n     * @type {string}\n     */\n    bus.publish(Event.DRAFT_CREATE);\n    $draftCtrl.state.opened = true;\n  };\n\n  /*\n   * @description Widget initialization logic.\n   * @type {function}\n   */\n  const $onInit = () => {\n    bbIntents.handle(IntentsKeys.MESSAGE_CREATE, () => {\n      open();\n    });\n  };\n\n  Object.assign($draftCtrl, {\n\n    /**\n     * Config mapped from widget's preferences.\n     *\n     * <p>\"subjectMaxLength\" is mapped from \"subjectMaxLength\" preference</p>\n     * @name DraftController#config\n     * @type {DraftControllerConfig}\n     */\n    config: Object.freeze({\n      subjectMaxLength: widget.getStringPreference('subjectMaxLength'),\n    }),\n\n    /**\n     * Holds controller's state\n     * @name DraftController#state\n     * @type {DraftControllerState}\n     */\n    state: {\n      opened: false,\n    },\n\n    open,\n    dismiss,\n    send,\n    /* Lifecycle hooks */\n    $onInit,\n  });\n}\n\n/**\n * @typedef {Object} DraftControllerState\n * @property {boolean} opened indicates whether draft editing is currently opened\n */\n\n/**\n * @typedef {Object} DraftControllerConfig\n * @property {number} subjectMaxLength Max allowed length for new draft subject.\n */\n/**\n * @typedef {Object} Draft\n * @property {string} body\n * @property {string} subject\n * @property {string} recipient LDAP X500Principle representation of recipient\n * @property {string} category category of the draft\n * @property {boolean} important flag indicating importance of the message\n * @property {object} additions API extension additions\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-messages-ng/scripts/draft.controller.js","import { Event, Error, Success } from './constants';\n\nexport default function ConversationController(bus, model, userDataService, Promise) {\n  /**\n   * Conversation controller handles logic of viewing and operating a list of\n   * messages in a single conversation.\n   * @name ConversationController\n   * @ngkey ConversationController\n   * @type {Object}\n   */\n  const $ctrl = this;\n\n  /**\n   * The currently opened conversation\n   * @name ConversationController#conversation\n   * @type {Conversation}\n   */\n  this.conversation = null;\n\n  /**\n   * Messages of currently opened conversation.\n   * @name ConversationController#messages\n   * @type {Array<Message>}\n   */\n  this.messages = [];\n\n  /**\n   * Reply draft.\n   * @name ConversationController#draft\n   * @type {Draft}\n   */\n  this.draft = {};\n\n  const getMessageText = (content) => content.replace(/<[^>]+>/ig, ' ');\n\n  /**\n   * @description\n   * Save draft body to property like initial value of draft body\n   * @name ConversationController#setDraftInitialBody\n   * @type {function}\n   * @inner\n   * @return {Object} Draft object\n   */\n  const setDraftInitialBody = (draft) => ({ ...draft, initialBody: draft.body });\n\n  function fetchMessages(conversation) {\n    $ctrl.messages = [];\n    return model.loadMessages(conversation.id)\n      .then(messages => messages.map(msg => ({ ...msg, text: getMessageText(msg.body) })))\n      .then((messages) => {\n        $ctrl.messages = messages;\n        return messages;\n      });\n  }\n\n  function fetchDrafts(conversation) {\n    $ctrl.draft = {};\n    return model\n      .getLatestConversationDraft(conversation.id)\n      .then((draft) => {\n        $ctrl.draft = setDraftInitialBody(draft);\n        return;\n      });\n  }\n\n  function markConversationMessagesAsRead(pConversation, messages) {\n    const conversation = pConversation;\n    return model\n      .markUnreadMessagesAsRead(conversation, messages)\n      .then(() => {\n        conversation.containsUnread = false;\n      });\n  }\n\n  /**\n   * Presents messages of the conversation for viewing. Also, marks unread messages of\n   * conversation as read.\n   * @name ConversationController#viewConversation\n   * @type {function}\n   * @param {Conversation} conversation conversation to view\n   * @return {Promise} a succesful promise when all data has been loaded\n   */\n  function viewConversation(conversation) {\n    $ctrl.conversation = conversation;\n    $ctrl.state.open = true;\n\n    const fetchMessagesPromise = fetchMessages(conversation);\n    const markMessagesAsRead = fetchMessagesPromise\n      .then(messages => markConversationMessagesAsRead(conversation, messages));\n\n    return Promise.all([markMessagesAsRead, fetchDrafts(conversation)]);\n  }\n\n  /**\n   * Closes conversation view.\n   * @name ConversationController#close\n   * @type {function}\n   * @fires bb.event.messaging.conversation.close\n   */\n  function close() {\n    $ctrl.state.open = false;\n    $ctrl.conversation = null;\n    $ctrl.messages = [];\n\n    /**\n     * Event is fired when user closes single conversation view. Event carries no payload.\n     * @event bb.event.messaging.conversation.close\n     * @type {string}\n     */\n    bus.publish(Event.CONVERSATION_CLOSE);\n  }\n\n  function $onInit() {\n    bus.subscribe(Event.CONVERSATION_OPEN, viewConversation);\n\n    userDataService.getUserData().then(userData => {\n      $ctrl.currentUser = userData;\n    });\n  }\n\n  /**\n   * @description Handles logic after draft has been sent\n   * @name ConversationController#afterSent\n   * @type {function}\n   * @fires bb.event.messaging.success\n   * @inner\n   */\n  const afterSent = () => bus.publish(Event.SUCCESS, Success.CONVERSATION_SEND_REPLY);\n\n  /**\n   * Sends out a draft as reply to the given conversation\n   * @name ConversationController#sendReply\n   * @param {string} conversationId ID of the conversation to which the draft should be sent\n   * as a reply\n   * @type {function}\n   * @param {Draft} draft the draft to send\n   * @fires bb.event.messaging.error\n   * @return {Promise} a successful promise of reply draft has been sent successfully\n   */\n  function sendReply(conversationId, draft) {\n    let draftId = draft.id;\n    const saveDraft = model.saveConversationDraft(conversationId, draft);\n\n    if (draftId === undefined) {\n      saveDraft.then(idHolder => {\n        draftId = idHolder.id;\n        return;\n      });\n    }\n\n    return saveDraft\n      .then(() => {\n        $ctrl.messages.push({\n          id: draftId,\n          senderName: $ctrl.currentUser.username,\n          body: draft.body,\n          deliveredOn: new Date().toISOString(),\n          text: getMessageText(draft.body),\n        });\n\n        $ctrl.draft = {};\n        return;\n      })\n      .then(() => {\n        model\n          .sendDraft(draftId, draft.body)\n          .then(afterSent)\n          .catch(() => {\n            $ctrl.messages = $ctrl.messages.filter(message => message.id !== draftId);\n            bus.publish(Event.ERROR, Error.CONVERSATION_SEND_REPLY);\n          });\n      })\n      .catch(() => {\n        bus.publish(Event.ERROR, Error.CONVERSATION_SAVE_REPLY);\n      });\n  }\n\n  /**\n   * Toggles reply form block\n   * @name ConversationController#toggleReplyForm\n   * @type {function}\n   */\n  const toggleReplyForm = () => {\n    if ($ctrl.state.replyForm.open) {\n      $ctrl.draft.body = $ctrl.draft.initialBody;\n    }\n\n    $ctrl.state.replyForm.open = !$ctrl.state.replyForm.open;\n  };\n\n  Object.assign($ctrl, {\n    viewConversation,\n    close,\n    sendReply,\n    toggleReplyForm,\n    /**\n     * Holds state of controller.\n     * @name ConversationController#state\n     * @type {ConversationControllerState}\n     */\n    state: {\n      open: false,\n      replyForm: {\n        open: false,\n      },\n    },\n\n    $onInit,\n  });\n}\n\n/**\n * @typedef {Object} ConversationControllerState\n * @property {boolean} open flag inidicating whether single conversation view is open\n * @property {boolean} replyForm.open flag inidicating whether reply form is open\n */\n\n/**\n * @typedef {Object} Message\n * @property {string} id ID of the message\n * @property {string} subject subject of the conversation the message belongs to\n * @property {string} body message body\n * @property {string} category category of the conversation the message belongs to\n * @property {string} status message status (READ, DELIVERED, etc)\n * @property {string} sender message sender's X500Principle string representation\n * @property {string} senderName message sender's name\n * @property {string} deliveredOn message's delivery timestamp\n * @property {boolean} important flag indicating importance of conversation the message belongs to\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-messages-ng/scripts/conversation.controller.js","/**\n * @name Hooks\n * @type {object}\n *\n * @description\n * Hooks for widget-bb-messages-ng\n */\n\n/**\n * @description\n * A hook which will be called when a page of items is loaded.\n * This hook can be used to customize how the new page is displayed.\n * For example, if \"Show more\" functionality used for paging,\n * then this hook should just append new items to current items.\n * As another example, if pagination component is used,\n * this hook should just return the new items.\n * @name Hooks#transformConversations\n * @param {itemsWrapper} itemsWrapper a wrapper for newly loaded page items. The object will have\n *                                    the following structures: {items: [], totalCount: 0}\n * @param {object} currentItems list of current items displayed in the folder\n * @returns {object} a wrapper object of items which will be used as items to display in current\n *                   folder. Object structure should be as follow: {items: [], totalCount: 0}\n * @type {function}\n */\nexport function transformConversations(itemsWrapper) {\n  return itemsWrapper;\n}\n\nexport default transformConversations;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-messages-ng/scripts/default-hooks.js"],"sourceRoot":""}