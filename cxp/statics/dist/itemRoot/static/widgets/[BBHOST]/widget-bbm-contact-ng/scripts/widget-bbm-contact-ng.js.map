{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**************","webpack:///webpack/bootstrap d55e1b15032dbd9fb9d3?118c**************","webpack:///./widget-bbm-contact-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114******","webpack:///external \"lib-bb-widget-ng\"?84ad*","webpack:///external \"lib-bb-model-errors\"?7567**","webpack:///external \"lib-bb-widget-extension-ng\"?b547","webpack:///external \"model-bb-contact-ng\"?8294","webpack:///external \"lib-bb-event-bus-ng\"?8215","webpack:///external \"lib-bb-intent-ng\"?add1","webpack:///./widget-bbm-contact-ng/scripts/index.js","webpack:///external \"lib-bb-state-container-ng\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"lib-bb-extension-events-ng\"","webpack:///external \"lib-bb-extension-intents-ng\"","webpack:///./widget-bbm-contact-ng/scripts/controllers/list.controller.js","webpack:///./widget-bbm-contact-ng/scripts/default-hooks.js","webpack:///./widget-bbm-contact-ng/scripts/view-model/index.js","webpack:///./widget-bbm-contact-ng/scripts/view-model/initial-state.js","webpack:///./widget-bbm-contact-ng/scripts/view-model/list.js","webpack:///./widget-bbm-contact-ng/scripts/view-model/helpers.js","webpack:///./widget-bbm-contact-ng/scripts/view-model/search.js","webpack:///./widget-bbm-contact-ng/scripts/view-model/contact.js","webpack:///./widget-bbm-contact-ng/scripts/service.js","webpack:///./widget-bbm-contact-ng/scripts/events.js","webpack:///./widget-bbm-contact-ng/scripts/constants.js"],"names":["defaultHooks","moduleKey","hooksKey","eventServiceKey","serviceKey","viewModelKey","angular","module","modelModuleKey","widgetModuleKey","eventBusModuleKey","intentModuleKey","stateContainerModuleKey","bbExtensionHelpersModuleKey","bbExtensionEventsModuleKey","bbExtensionIntentsModuleKey","factory","eventBusKey","widgetEvents","bbStateContainerKey","widgetKey","createViewModel","modelContactKey","createService","extensionHelpersContextKey","bbIntentKey","bbIntent","service","bus","extensionEventsContextKey","stateContainer","extensionIntentsContextKey","controller","ContactListController","run","viewModel","bbIntents","eventBus","widget","init","then","publish","Event","CXP_ITEM_LOADED","id","getId","BB_ITEM_LOADED","name","$onInit","setContacts","processRequestParams","params","processReloadRequestParams","processSearchRequestParams","processNewContactObject","contact","processContactBeforeSave","DEFAULT_PAGE_SIZE","stateParams","pageSize","getLongPreference","showAvatar","getBooleanPreference","initialState","createAction","state","getState","list","search","data","error","loading","contacts","requestParams","from","size","totalCount","searching","query","beforeLoad","afterLoadSuccess","response","afterLoadError","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","uiError","message","code","setSearch","beforeSearch","afterSearchSuccess","afterSearchError","cancel","setContact","beforeContactCreate","afterContactCreateSuccess","afterContactCreateError","beforeContactUpdate","afterContactUpdateSuccess","afterContactUpdateError","beforeContactDelete","afterContactDeleteSuccess","afterContactDeleteError","model","hooks","events","getRequestParams","createSelector","getSearchRequestParams","getContacts","getSelectedContact","isAllContactsLoaded","Boolean","length","isNewContact","getNextRequestParams","getNextSearchRequestParams","getReloadRequestParams","recalculateRequestParams","Math","floor","uniqueArray","array","filter","itemOuter","index","findIndex","itemInner","appendContacts","replaceContacts","loadContacts","mergeFn","catch","loadMoreContacts","loadMoreContactsPromise","reloadContacts","reloadRequestParams","searchContacts","searchMoreContacts","searchMoreContactsPromise","setInitialContact","copy","getNewContactObject","setSelectedContact","setSearchQuery","createContact","updateContact","saveContact","processedContact","deleteContact","cancelSearch","BEFORE_CONTACT_CREATE","AFTER_CONTACT_CREATE_SUCCESS","AFTER_CONTACT_CREATE_ERROR","BEFORE_CONTACT_UPDATE","AFTER_CONTACT_UPDATE_SUCCESS","AFTER_CONTACT_UPDATE_ERROR","BEFORE_CONTACT_DELETE","AFTER_CONTACT_DELETE_SUCCESS","AFTER_CONTACT_DELETE_ERROR"],"mappings":"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","file":"widget-bbm-contact-ng/scripts/widget-bbm-contact-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-contact-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"), require(\"lib-bb-extension-intents-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bbm-contact-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"model-bb-contact-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-intent-ng\", \"lib-bb-state-container-ng\", \"lib-bb-extension-helpers-ng\", \"lib-bb-extension-events-ng\", \"lib-bb-extension-intents-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bbm-contact-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-contact-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"), require(\"lib-bb-extension-intents-ng\"));\n\telse\n\t\troot[\"widget-bbm-contact-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-bb-contact-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"lib-bb-extension-events-ng\"], root[\"lib-bb-extension-intents-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_53__, __WEBPACK_EXTERNAL_MODULE_69__, __WEBPACK_EXTERNAL_MODULE_73__, __WEBPACK_EXTERNAL_MODULE_84__, __WEBPACK_EXTERNAL_MODULE_85__, __WEBPACK_EXTERNAL_MODULE_86__, __WEBPACK_EXTERNAL_MODULE_87__, __WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_94__, __WEBPACK_EXTERNAL_MODULE_95__, __WEBPACK_EXTERNAL_MODULE_96__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d55e1b15032dbd9fb9d3","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bbm-contact-ng/model.xml\n// module id = 0\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_53__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 53\n// module chunks = 5 9 10 11 12 13 14 15 16","module.exports = __WEBPACK_EXTERNAL_MODULE_69__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 69\n// module chunks = 9 14 15 16","module.exports = __WEBPACK_EXTERNAL_MODULE_73__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 73\n// module chunks = 9 10 14 15 16","module.exports = __WEBPACK_EXTERNAL_MODULE_84__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 84\n// module chunks = 14 15 16","module.exports = __WEBPACK_EXTERNAL_MODULE_85__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-contact-ng\"\n// module id = 85\n// module chunks = 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_86__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 86\n// module chunks = 14 15 16","module.exports = __WEBPACK_EXTERNAL_MODULE_87__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 87\n// module chunks = 14 15 16","/**\n * @module widget-bbm-contact-ng\n *\n * @description\n * Mobile contact widget.\n */\nimport angular from 'vendor-bb-angular';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport modelModuleKey, { modelContactKey } from 'model-bb-contact-ng';\n\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\n\nimport bbExtensionEventsModuleKey, {\n  extensionEventsContextKey,\n} from 'lib-bb-extension-events-ng';\n\nimport bbExtensionIntentsModuleKey, {\n  extensionIntentsContextKey,\n} from 'lib-bb-extension-intents-ng';\n\nimport ContactListController from './controllers/list.controller';\n\nimport * as defaultHooks from './default-hooks';\nimport createViewModel from './view-model/index';\nimport createService from './service';\nimport widgetEvents from './events';\nimport { Event } from './constants';\n\nconst moduleKey = 'widget-bbm-contact-ng';\nconst hooksKey = `${moduleKey}:hooks`;\nconst eventServiceKey = `${moduleKey}:events`;\nconst serviceKey = `${moduleKey}:service`;\nconst viewModelKey = `${moduleKey}:viewModel`;\n\nexport default angular\n  .module(moduleKey, [\n    modelModuleKey,\n    widgetModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n    stateContainerModuleKey,\n    bbExtensionHelpersModuleKey,\n    bbExtensionEventsModuleKey,\n    bbExtensionIntentsModuleKey,\n  ])\n  .factory(hooksKey, extendHooks(defaultHooks))\n  .factory(eventServiceKey, [\n    eventBusKey,\n    /* into */\n    widgetEvents,\n  ])\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    widgetKey,\n    hooksKey,\n    /* into */\n    createViewModel,\n  ])\n  .factory(serviceKey, [\n    modelContactKey,\n    viewModelKey,\n    hooksKey,\n    bbStateContainerKey,\n    eventServiceKey,\n\n    /* into */\n    createService,\n  ])\n  .factory(extensionHelpersContextKey, [\n    bbIntentKey,\n    serviceKey,\n    eventBusKey,\n    (bbIntent, service, bus) => ({ bbIntent, service, bus }),\n  ])\n  .factory(extensionEventsContextKey, [\n    bbIntentKey,\n    bbStateContainerKey,\n    serviceKey,\n    eventBusKey,\n    (bbIntent, stateContainer, service, bus) => ({\n      bbIntent,\n      stateContainer,\n      service,\n      bus,\n    }),\n  ])\n  .factory(extensionIntentsContextKey, [\n    serviceKey,\n    (service) => ({ service }),\n  ])\n  .controller('ContactListController', [\n    serviceKey,\n\n    /* into */\n    ContactListController,\n  ])\n  .run([\n    viewModelKey,\n    bbIntentKey,\n    eventBusKey,\n    widgetKey,\n    (viewModel, bbIntents, eventBus, widget) => {\n      viewModel.init();\n\n      bbIntents.init()\n        .then(() => {\n          /**\n           * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n           * and will be removed with the update to widget collection 3 (WC3)\n           */\n          eventBus.publish(Event.CXP_ITEM_LOADED, {\n            id: widget.getId(),\n          });\n\n          eventBus.publish(Event.BB_ITEM_LOADED, {\n            id: widget.getId(),\n          });\n        });\n    },\n  ])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 93\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_94__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 94\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_95__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-events-ng\"\n// module id = 95\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_96__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-intents-ng\"\n// module id = 96\n// module chunks = 15","/**\n * @name ContactListController\n * @ngkey ContactListController\n * @description\n * Mobile contact widget controller\n * @type {object}\n */\nexport default function ContactListController(service) {\n  /**\n   * @description\n   * Widget initialization logic - called automatically during the angular cycle.\n   *\n   * @name ContactListController#$onInit\n   * @type {function}\n   */\n  const $onInit = () => (\n    service.setContacts()\n  );\n\n  return {\n    /* Lifecycle hooks */\n    $onInit,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/controllers/list.controller.js","/**\n * @name defaultHooks\n * @type {object}\n *\n * @description\n * Default hooks for widget-bbm-contact-ng\n */\n\n/**\n * @name defaultHooks#processRequestParams\n * @type {function}\n *\n * @description\n * Default hook for contact loading query params processing/extending\n *\n * @param {object} params to process\n * @param {?number} params.from The page to list from\n * @param {?number} params.size The number of results per page\n * @returns {Object} Processed params\n */\nexport const processRequestParams = (params) => params;\n\n/**\n * @name defaultHooks#processReloadRequestParams\n * @type {function}\n *\n * @description\n * Default hook for contact reloading query params processing/extending\n *\n * @param {object} params to process\n * @param {?number} params.from The page to list from\n * @param {?number} params.size The number of results per page\n * @returns {Object} Processed params\n */\nexport const processReloadRequestParams = (params) => params;\n\n/**\n * @name defaultHooks#processSearchRequestParams\n * @type {function}\n *\n * @description\n * Default hook for contact search query params processing/extending\n *\n * @param {object} params to process\n * @param {?number} params.from The page to list from\n * @param {?string} params.query The search term used to search for contact\n * @param {?number} params.size The number of results per page\n * @returns {Object} Processed params\n */\nexport const processSearchRequestParams = (params) => params;\n\n/**\n * @name defaultHooks#processNewContactObject\n *\n * @description\n * processNewContactObject default hook\n *\n * @param {object} contact New Contact object\n * @type {function}\n * @returns {object} Processed new Contact object\n */\nexport const processNewContactObject = (contact) => contact;\n\n/**\n * @name defaultHooks#processContactBeforeSave\n *\n * @description\n * processContactBeforeSave default hook\n *\n * @param {object} contact Contact object to be created/updated\n * @type {function}\n * @returns {object} Processed Contact object\n */\nexport const processContactBeforeSave = (contact) => contact;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/default-hooks.js","// Combine state reducers\nimport createInitialState from './initial-state';\nimport createListReducers from './list';\nimport createSearchReducers from './search';\nimport createContactReducers from './contact';\n\n/**\n * Defines the default page size for the contacts page\n * @type {number}\n * @inner\n */\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport default (stateContainer, widget) => {\n  const stateParams = {\n    pageSize: widget.getLongPreference('pageSize') || DEFAULT_PAGE_SIZE,\n    showAvatar: widget.getBooleanPreference('showAvatar') || false,\n  };\n\n  const initialState = createInitialState(stateParams);\n\n  /**\n   * @name ViewModel\n   * @type {object}\n   * @ngKey widget-bbm-contact-ng:viewModel\n   * @inner\n   */\n  return {\n    /**\n     * @name ViewModel#init\n     * @description Initialises view model with initial state\n     * @type {function}\n     * @inner\n     * @return {ViewState}\n     */\n    init: stateContainer.createAction((state = initialState) => state),\n\n    /**\n     * @name ViewModel#getState\n     * @description Returns view state\n     * @type {function}\n     * @inner\n     * @return {ViewState}\n     */\n    getState: stateContainer.getState,\n\n    /**\n     * @name ViewModel#list\n     * @description\n     * Actions for updating the parts of the `ViewState` related to contacts list\n     * @type {ViewModelListActions}\n     * @inner\n     */\n    list: createListReducers(stateContainer),\n\n    /**\n     * @name ViewModel#search\n     * @description\n     * Actions for updating the parts of the `ViewState` related to contacts search\n     * @type {ViewModelSearchActions}\n     * @inner\n     */\n    search: createSearchReducers(stateContainer),\n\n    /**\n     * @name ViewModel#contact\n     * @description\n     * Actions for updating the parts of the `ViewState` related to contact state\n     * @type {ViewModelContactActions}\n     * @inner\n     */\n    contact: createContactReducers(stateContainer),\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/view-model/index.js","export default params => ({\n  contact: {\n    data: null,\n    error: null,\n    loading: false,\n  },\n  contacts: {\n    data: null,\n    error: null,\n    loading: false,\n    requestParams: {\n      from: null,\n      size: params.pageSize,\n    },\n    totalCount: 0,\n  },\n  searching: false,\n  search: {\n    data: null,\n    error: null,\n    loading: false,\n    requestParams: {\n      from: null,\n      size: params.pageSize,\n      query: null,\n    },\n    totalCount: 0,\n  },\n  showAvatar: params.showAvatar,\n});\n\n/**\n * @typedef {Object} ViewState\n * @description\n * The current state of the [ViewModel]{@link module:lib-bb-view-model-ng}.\n *\n * @property {Object} contact\n * @property {Object} contact.data Current contact object\n * @property {Object} contact.error The last encountered error\n * @property {String} contact.error.message Error message\n * @property {boolean} contact.loading Indicates if the contact is being loaded\n *\n * @property {Object} contacts\n * @property {Object[]} contacts.data Collection of contacts\n * @property {Object} contacts.error The last encountered error\n * @property {string} contacts.error.message Error message\n * @property {boolean} contacts.loading Indicates if contacts are loading at the moment\n * @property {RequestParams}\n * contacts.requestParams A set of request params for loading contacts\n * @property {number} contacts.totalCount Total number of contacts\n *\n * @property {boolean} searching Indicates if contacts search is active at the moment\n *\n * @property {Object} search\n * @property {Object[]} search.data Collection of searched contacts\n * @property {Object} search.error The last encountered error\n * @property {string} search.error.message Error message\n * @property {boolean} search.loading Indicates if search contacts are loading at the moment\n * @property {RequestParams}\n * search.requestParams A set of request params for searching contacts\n * @property {number} search.totalCount Total number of search results\n */\n\n/**\n * @typedef {Object} RequestParams\n * @description\n * A set of request params that defines how to load the requested data.\n *\n * @property {number} from The current page (0 indexed), null from the start\n * @property {number} size The number of contacts in the page\n * @property {?string} query Query search parameter\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/view-model/initial-state.js","import { uiError } from './helpers';\n\nexport default stateContainer => ({\n  /**\n   * @name ViewModelListActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelListActions#init\n   * @description Initialize the `ViewState` before loading contacts\n   * @type {function}\n   * @inner\n   * @return {void}\n   */\n  init: stateContainer.createAction(state => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      data: null,\n      error: null,\n      loading: false,\n      requestParams: {\n        ...state.contacts.requestParams,\n        from: null,\n      },\n      totalCount: 0,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#beforeLoad\n   * @description Update the `ViewState` before loading contacts\n   * @type {function}\n   * @inner\n   * @return {void}\n   */\n  beforeLoad: stateContainer.createAction(state => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      error: null,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterLoadSuccess\n   * @description Update the `ViewState` after successfully loading contacts\n   * @type {function}\n   * @inner\n   * @param {ContactsResponse} response Contacts load response\n   * @return {void}\n   */\n  afterLoadSuccess: stateContainer.createAction((state, response) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      data: response.data,\n      error: null,\n      loading: false,\n      requestParams: {\n        ...state.contacts.requestParams,\n        from: response.requestParams.from,\n      },\n      totalCount: response.totalCount,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterLoadError\n   * @description Update the `ViewState` after unsuccessful contacts load\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @return {void}\n   */\n  afterLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n});\n\n/**\n * @typedef {object} ContactsResponse\n * @property {object[]} data Loaded contacts array\n * @property {number} totalCount Total number of contacts\n * @property {LoadRequestParams} requestParams Request parameters object\n */\n\n/**\n * @typedef {object} LoadRequestParams\n * @property {number} from Page number to load\n * @property {number} size Page size to load\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/view-model/list.js","/* eslint-disable import/prefer-default-export */\nimport { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\nconst errorMessages = {\n  [E_AUTH]: 'model.error.auth',\n  [E_CONNECTIVITY]: 'model.error.connectivity',\n  [E_USER]: 'model.error.user',\n  [E_UNEXPECTED]: 'model.error.unexpected',\n};\n\nexport const uiError = error => ({\n  message: errorMessages[error.code],\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/view-model/helpers.js","import { uiError } from './helpers';\n\nexport default stateContainer => ({\n  /**\n   * @name ViewModelSearchActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelSearchActions#setSearch\n   * @description Set the `ViewState` to prepare the search\n   * @type {function}\n   * @inner\n   * @param {SearchRequestParams} params Search request parameters\n   * @return {void}\n   */\n  setSearch: stateContainer.createAction((state, params) => ({\n    ...state,\n    search: {\n      ...state.search,\n      data: null,\n      requestParams: {\n        ...state.search.requestParams,\n        from: null, // reset from for each new search request\n        query: params.query || null,\n      },\n    },\n  })),\n\n  /**\n   * @name ViewModelSearchActions#beforeSearch\n   * @description Update the `ViewState` before search contacts\n   * @type {function}\n   * @inner\n   * @param {SearchRequestParams} params Search request parameters\n   * @return {void}\n   */\n  beforeSearch: stateContainer.createAction((state) => ({\n    ...state,\n    searching: true,\n    search: {\n      ...state.search,\n      error: null,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelSearchActions#afterSearchSuccess\n   * @description Update the `ViewState` after successful contacts search\n   * @type {function}\n   * @inner\n   * @param {ContactSearchResponse} response Search response\n   * @return {void}\n   */\n  afterSearchSuccess: stateContainer.createAction((state, response) => ({\n    ...state,\n    search: {\n      ...state.search,\n      data: response.data,\n      error: null,\n      loading: false,\n      requestParams: {\n        ...state.search.requestParams,\n        from: response.requestParams.from,\n      },\n      totalCount: response.totalCount,\n    },\n  })),\n\n  /**\n   * @name ViewModelSearchActions#afterSearchError\n   * @description Update the `ViewState` after unsuccessful contacts search\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @return {void}\n   */\n  afterSearchError: stateContainer.createAction((state, error) => ({\n    ...state,\n    search: {\n      ...state.search,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelSearchActions#cancel\n   * @description Update the `ViewState` when contacts search canceled\n   * @type {function}\n   * @inner\n   * @return {void}\n   */\n  cancel: stateContainer.createAction(state => ({\n    ...state,\n    searching: false,\n    search: {\n      ...state.search,\n      error: null,\n      loading: false,\n      requestParams: {\n        ...state.search.requestParams,\n        from: null,\n        query: null,\n      },\n      totalCount: 0,\n    },\n  })),\n});\n\n/**\n * @typedef {object} ContactSearchResponse\n * @property {object[]} data Search contacts array\n * @property {number} totalCount Total number of found contacts\n * @property {SearchRequestParams} requestParams Request parameters object\n */\n\n/**\n * @typedef {object} SearchRequestParams\n * @property {number} from Page number to load\n * @property {number} size Page size to load\n * @property {?string} query Query search parameter\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/view-model/search.js","import { uiError } from './helpers';\n\nexport default stateContainer => ({\n  /**\n   * @name ViewModelContactActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelContactActions#setContact\n   * @description Update the `ViewState` with the selected contact\n   * @type {function}\n   * @inner\n   * @param {object} data Contact object\n   * @return {void}\n   */\n  setContact: stateContainer.createAction((state, data) => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      data,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#beforeContactCreate\n   * @description Update the `ViewState` before a contact is submitted to create.\n   * @type {function}\n   *\n   * @return {void}\n   * @inner\n   */\n  beforeContactCreate: stateContainer.createAction(state => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#afterContactCreateSuccess\n   * @description Update the `ViewState` after a successful contact create.\n   * @type {function}\n   *\n   * @param {module:model-bb-contact-ng.Contact} contact\n   * @return {void}\n   * @inner\n   */\n  afterContactCreateSuccess: stateContainer.createAction((state, contact) => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      data: contact,\n      loading: false,\n      error: null,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#afterContactCreateError\n   * @description Update the `ViewState` after an unsuccessful contact create.\n   * @type {function}\n   *\n   * @param {module:model-bb-contact-ng.ModelError} error Response error\n   * @return {void}\n   * @inner\n   */\n  afterContactCreateError: stateContainer.createAction((state, error) => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      loading: false,\n      error: uiError(error),\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#beforeContactUpdate\n   * @description Update the `ViewState` before a contact is submitted to update.\n   * @type {function}\n   *\n   * @return {void}\n   * @inner\n   */\n  beforeContactUpdate: stateContainer.createAction(state => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#afterContactUpdateSuccess\n   * @description Update the `ViewState` after a successful contact update.\n   * @type {function}\n   *\n   * @param {module:model-bb-contact-ng.Contact} contact\n   * @return {void}\n   * @inner\n   */\n  afterContactUpdateSuccess: stateContainer.createAction((state, contact) => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      data: contact,\n      loading: false,\n      error: null,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#afterContactUpdateError\n   * @description Update the `ViewState` after an unsuccessful contact update.\n   * @type {function}\n   *\n   * @param {module:model-bb-contact-ng.ModelError} error Response error\n   * @return {void}\n   * @inner\n   */\n  afterContactUpdateError: stateContainer.createAction((state, error) => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      loading: false,\n      error: uiError(error),\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#beforeContactDelete\n   * @description Update the `ViewState` before a contact is submitted to delete.\n   * @type {function}\n   *\n   * @return {void}\n   * @inner\n   */\n  beforeContactDelete: stateContainer.createAction(state => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#afterContactDeleteSuccess\n   * @description Update the `ViewState` after a successful contact delete.\n   * @type {function}\n   *\n   * @param {module:model-bb-contact-ng.Contact} contact\n   * @return {void}\n   * @inner\n   */\n  afterContactDeleteSuccess: stateContainer.createAction(state => ({\n    ...state,\n    contact: {\n      data: null,\n      loading: false,\n      error: null,\n    },\n  })),\n\n  /**\n   * @name ViewModelContactActions#afterContactDeleteError\n   * @description Update the `ViewState` after an unsuccessful contact delete.\n   * @type {function}\n   *\n   * @param {module:model-bb-contact-ng.ModelError} error Response error\n   * @return {void}\n   * @inner\n   */\n  afterContactDeleteError: stateContainer.createAction((state, error) => ({\n    ...state,\n    contact: {\n      ...state.contact,\n      loading: false,\n      error: uiError(error),\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/view-model/contact.js","/* global angular */\n/**\n * @name ContactService\n * @type {Object}\n * @ngkey widget-bbm-contact-ng:service\n * @description\n * The service encapsulates the core functionality of the Contact\n * Widget. It co-ordinates the communication of data from the `Model`\n * with the communication with the user by updating the {@link ViewState}.\n *\n * Asynchronous methods update the {@link ViewState} in 3 potential\n * stages; \"before\", \"success\", and \"error\", to allow the view to\n * provide feedback to the user.\n */\n\n/**\n * @name createContactService\n * @inner\n * @type {function}\n * @param {module:model-bb-contact-ng.contactModel} model Contacts model\n * @param {ViewModel} viewModel\n * @param {defaultHooks} hooks\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {object} events\n * @return {ContactService}\n */\nexport default (model, viewModel, hooks, stateContainer, events) => {\n  /**\n   * @name getRequestParams\n   * @type {function}\n   * @description\n   * returns the request params from the state\n   * @returns {Object} requestParams Request params from the state\n   * @inner\n   */\n  const getRequestParams = stateContainer.createSelector(\n    state => state.contacts.requestParams\n  );\n\n  /**\n   * @name getSearchRequestParams\n   * @type {function}\n   * @description\n   * returns the search request params from the state\n   * @returns {Object} requestParams Request params from the state\n   * @inner\n   */\n  const getSearchRequestParams = stateContainer.createSelector(\n    state => state.search.requestParams\n  );\n\n  /**\n   * @name getContacts\n   * @type {function}\n   * @description\n   * returns the current list of `contacts`\n   * @returns {Array} contacts List of contacts from the state\n   * @inner\n   */\n  const getContacts = stateContainer.createSelector(\n    state => state.contacts.data\n  );\n\n  /**\n   * @name getSelectedContact\n   * @type {function}\n   * @description\n   * returns the current selected `transaction`\n   * @returns {Object} transaction Transaction from the state\n   * @inner\n   */\n  const getSelectedContact = stateContainer.createSelector(\n    state => state.contact.data\n  );\n\n  /**\n   * @name isAllContactsLoaded\n   * @type {function}\n   * @description\n   * Calculates if all the contacts have been loaded\n   * @returns {boolean}\n   * @inner\n   */\n  const isAllContactsLoaded = stateContainer.createSelector(\n    state => Boolean(\n      state.contacts.data &&\n      state.contacts.data.length >= state.contacts.totalCount\n    )\n  );\n\n  /**\n   * @name isNewContact\n   * @type {function}\n   * @description\n   * Determines if the contact is new or was already existing\n   * @returns {boolean}\n   * @inner\n   */\n  const isNewContact = stateContainer.createSelector(\n    state => Boolean(\n      state.contact.data &&\n      !state.contact.data.id\n    )\n  );\n\n  /**\n   * @name getNextRequestParams\n   * @type {function}\n   * @description\n   * Calculates the request params to load the data for the next request.\n   * Note: It also calculates the data for the first request. Therefore the\n   *       Initial from params need to be null and not 0.\n   * @returns {Object} params Processed request params\n   * @inner\n   */\n  const getNextRequestParams = () => {\n    const requestParams = getRequestParams();\n\n    const from = requestParams.from === null ? 0 : requestParams.from + 1;\n    const size = requestParams.size;\n\n    return hooks.processRequestParams({\n      from,\n      size,\n    });\n  };\n\n  /**\n   * @name getNextSearchRequestParams\n   * @type {function}\n   * @description\n   * Calculates the request params to load the data for the next search request.\n   * Note: It also calculates the data for the first request. Therefore the\n   *       Initial from params need to be null and not 0.\n   * @returns {Object} params Processed search request params\n   * @inner\n   */\n  const getNextSearchRequestParams = () => {\n    const requestParams = getSearchRequestParams();\n\n    const from = requestParams.from === null ? 0 : requestParams.from + 1;\n    const size = requestParams.size;\n    const query = requestParams.query;\n\n    return hooks.processSearchRequestParams({\n      from,\n      size,\n      query,\n    });\n  };\n\n  /**\n   * @name getReloadRequestParams\n   * @type {function}\n   * @description\n   * Calculates the request params to load the data for the next request.\n   * Note: It also calculates the data for the first request. Therefore the\n   *       Initial from params need to be null and not 0.\n   * @returns {Object} params Processed request params\n   * @inner\n   */\n  const getReloadRequestParams = () => {\n    const requestParams = getRequestParams();\n\n    const from = 0;\n    const size = requestParams.from === null\n      ? requestParams.size\n      : requestParams.size * (requestParams.from + 1);\n\n    return hooks.processReloadRequestParams({\n      from,\n      size,\n    });\n  };\n\n  /**\n   * @name recalculateRequestParams\n   * @type {function}\n   * @description\n   * Recalculates the request params to load the data for the next request.\n   * @returns {Object} data Data used to calculate the request params\n   * @inner\n   */\n  const recalculateRequestParams = data => {\n    const requestParams = getRequestParams();\n\n    const from = Math.floor(data.length / requestParams.size);\n    const size = requestParams.size;\n\n    return hooks.processRequestParams({\n      from,\n      size,\n    });\n  };\n\n  /**\n   * @name appendNotifications\n   * @type {function}\n   * @description\n   * Creates a duplicate-free version of an array\n   * @param {Array} array Array of items\n   * @inner\n   */\n  const uniqueArray = (array) => (\n    array.filter((itemOuter, index) =>\n      array.findIndex((itemInner) =>\n        itemOuter.id === itemInner.id) === index\n    )\n  );\n\n  /**\n   * @name appendContacts\n   * @type {function}\n   * @description\n   * Appends the given list of `contacts` to the current list of `contacts`\n   * if this function is used as a merge strategy function\n   * @param {Array} contacts List of `contacts`\n   * @returns {Array} contacts Merged list of `contacts`\n   * @inner\n   */\n  const appendContacts = contacts => uniqueArray(\n    [...getContacts() || [], ...contacts]\n  );\n\n\n  /**\n   * @name replaceContacts\n   * @type {function}\n   * @description\n   * Returns the given list of `contacts` immediately and therefore replaces\n   * the list of `contacts` if this function is used as a merge strategy function\n   * @param {Array} contacts List of `contacts`\n   * @returns {Array} contacts List of `contacts`\n   * @inner\n   */\n  const replaceContacts = contacts => contacts;\n\n  /**\n   * @name loadContacts\n   * @type {function}\n   * @description\n   * Fetch a `page` of `contacts` from the model and\n   * update the {@link ViewState} to display them.\n   * @param {function} mergeFn function defining the merge strategy\n   * @returns {Promise}\n   * @inner\n   */\n  const loadContacts = mergeFn => {\n    const requestParams = getNextRequestParams();\n\n    viewModel.list.beforeLoad();\n\n    return model.getContacts(requestParams)\n      .then(({ data, totalCount }) => {\n        viewModel.list.afterLoadSuccess({\n          data: mergeFn(data),\n          requestParams,\n          totalCount,\n        });\n      })\n      .catch(error => {\n        viewModel.list.afterLoadError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name ContactService#loadMoreContacts\n   * @type {function}\n   * @description\n   * Loads more `contacts` for the currently selected product.\n   */\n  const loadMoreContacts = (() => {\n    let loadMoreContactsPromise;\n\n    return () => {\n      if (loadMoreContactsPromise || isAllContactsLoaded()) {\n        return loadMoreContactsPromise;\n      }\n\n      loadMoreContactsPromise = loadContacts(appendContacts)\n        .then(() => {\n          loadMoreContactsPromise = null;\n        })\n        .catch(error => {\n          loadMoreContactsPromise = null;\n          throw error;\n        });\n\n      return loadMoreContactsPromise;\n    };\n  })();\n\n  /**\n   * @name reloadContacts\n   * @type {function}\n   * @description\n   * Fetch a `page` of `contacts` from the model and\n   * update the {@link ViewState} to display them.\n   * @param {function} mergeFn function defining the merge strategy\n   * @returns {Promise}\n   * @inner\n   */\n  const reloadContacts = () => {\n    const reloadRequestParams = getReloadRequestParams();\n\n    viewModel.list.beforeLoad();\n\n    return model.getContacts(reloadRequestParams)\n      .then(({ data, totalCount }) => {\n        viewModel.list.afterLoadSuccess({\n          data: replaceContacts(data),\n          requestParams: recalculateRequestParams(data),\n          totalCount,\n        });\n      })\n      .catch(error => {\n        viewModel.list.afterLoadError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name searchContacts\n   * @type {function}\n   * @description\n   * Fetch a `page` of `contacts` from the model that meet the given search query and\n   * update the {@link ViewState} to display them.\n   * @param {function} mergeFn function defining the merge strategy\n   * @returns {Promise}\n   * @inner\n   */\n  const searchContacts = mergeFn => {\n    const requestParams = getNextSearchRequestParams();\n    viewModel.search.beforeSearch();\n\n    return model.getContacts(requestParams)\n      .then(({ data, totalCount }) => {\n        viewModel.search.afterSearchSuccess({\n          data: mergeFn(data),\n          requestParams,\n          totalCount,\n        });\n      })\n      .catch(error => {\n        viewModel.search.afterSearchError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name ContactService#searchMoreContacts\n   * @type {function}\n   * @description\n   * Loads more `contacts` for the currently selected product.\n   */\n  const searchMoreContacts = (() => {\n    let searchMoreContactsPromise;\n\n    return () => {\n      if (searchMoreContactsPromise || isAllContactsLoaded()) {\n        return searchMoreContactsPromise;\n      }\n\n      searchMoreContactsPromise = searchContacts(appendContacts)\n        .then(() => {\n          searchMoreContactsPromise = null;\n        })\n        .catch(error => {\n          searchMoreContactsPromise = null;\n          throw error;\n        });\n\n      return searchMoreContactsPromise;\n    };\n  })();\n\n  /**\n   * @name ContactService#setContacts\n   * @type {function}\n   * @description\n   * Sets the selected contact and updates the {@link ViewState} to display it.\n   */\n  const setContacts = () => {\n    viewModel.list.init();\n\n    return loadContacts(replaceContacts);\n  };\n\n  /**\n   * @name ContactService#setInitialContact\n   * @type {function}\n   * @description\n   * Sets the initial contact and updates the {@link ViewState} to display it.\n   */\n  const setInitialContact = () => {\n    const contact = angular.copy(hooks.processNewContactObject(model.getNewContactObject()));\n\n    viewModel.contact.setContact(contact);\n  };\n\n  /**\n   * @name ContactService#setSelectedContact\n   * @type {function}\n   * @description\n   * Sets the selected contact and updates the {@link ViewState} to display it.\n   * @param {Object} contact Contact to select\n   */\n  const setSelectedContact = contact => {\n    viewModel.contact.setContact(contact);\n  };\n\n  /**\n   * @name ContactService#setSearchQuery\n   * @type {function}\n   * @description\n   * Cancels the search and resets the search on the {@link ViewState}.\n   */\n  const setSearchQuery = query => {\n    viewModel.search.setSearch({ query });\n\n    return searchContacts(replaceContacts);\n  };\n\n  /**\n   * @name ContactService#createContact\n   * @type {function}\n   * @description\n   * Creates the new contact\n   */\n  function createContact(contact) {\n    viewModel.contact.beforeContactCreate();\n    events.beforeContactCreate();\n\n    return model.createContact(contact)\n      .then(() => {\n        viewModel.contact.afterContactCreateSuccess(contact);\n        events.afterContactCreateSuccess(contact);\n      })\n      .catch(error => {\n        viewModel.contact.afterContactCreateError(error);\n        events.afterContactCreateError(error);\n        throw error;\n      });\n  }\n\n  /**\n   * @name ContactService#updateContact\n   * @type {function}\n   * @description\n   * Updates the contact\n   */\n  function updateContact(contact) {\n    viewModel.contact.beforeContactUpdate();\n    events.beforeContactUpdate();\n\n    return model.updateContact(contact)\n      .then(() => {\n        viewModel.contact.afterContactUpdateSuccess(contact);\n        events.afterContactUpdateSuccess(contact);\n      })\n      .catch(error => {\n        viewModel.contact.afterContactUpdateError(error);\n        events.afterContactUpdateError(error);\n        throw error;\n      });\n  }\n\n  /**\n   * @name ContactService#saveContact\n   * @type {function}\n   * @description\n   * Determines if the contact should be created or updated and saves the contact\n   */\n  const saveContact = () => {\n    const processedContact = hooks.processContactBeforeSave(getSelectedContact());\n\n    return isNewContact()\n      ? createContact(processedContact)\n      : updateContact(processedContact);\n  };\n\n  /**\n   * @name ContactService#deleteContact\n   * @type {function}\n   * @description\n   * Deletes the contact\n   */\n  const deleteContact = contact => {\n    viewModel.contact.beforeContactDelete();\n    events.beforeContactDelete();\n\n    return model.deleteContact(contact)\n      .then(() => {\n        viewModel.contact.afterContactDeleteSuccess(contact);\n        events.afterContactDeleteSuccess(contact);\n      })\n      .catch(error => {\n        viewModel.contact.afterContactDeleteError(error);\n        events.afterContactDeleteError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name ContactService#cancelSearch\n   * @type {function}\n   * @description\n   * Cancels the search and resets the search on the {@link ViewState}.\n   */\n  const cancelSearch = () => viewModel.search.cancel();\n\n  return {\n    cancelSearch,\n    deleteContact,\n    isNewContact,\n    loadMoreContacts,\n    reloadContacts,\n    saveContact,\n    searchMoreContacts,\n    setContacts,\n    setInitialContact,\n    setSearchQuery,\n    setSelectedContact,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/service.js","export const Event = {\n  /**\n   * A newly created contact is submitted to the server\n   * @event bb.event.contact.create.start\n   * @type {string}\n   */\n  BEFORE_CONTACT_CREATE: 'bb.event.contact.create.start',\n\n  /**\n   * A new contact is created on the server\n   * @event bb.event.contact.create.done\n   * @property {module:model-bb-contact-ng.Contact} contact\n   * @type {string}\n   */\n  AFTER_CONTACT_CREATE_SUCCESS: 'bb.event.contact.create.done',\n\n  /**\n   * A new contact fails to be created on the server\n   * @event bb.event.contact.create.failed\n   * @type {string}\n   * @property {module:lib-bb-model-ng.ModelError} error\n   */\n  AFTER_CONTACT_CREATE_ERROR: 'bb.event.contact.create.failed',\n\n  /**\n   * A contact is submitted for update to the server\n   * @event bb.event.contact.edit.start\n   * @type {string}\n   */\n  BEFORE_CONTACT_UPDATE: 'bb.event.contact.update.start',\n\n  /**\n   * A contact is updated on the server\n   * @event bb.event.contact.edit.done\n   * @property {module:model-bb-contact-ng.Contact} contact\n   * @type {string}\n   */\n  AFTER_CONTACT_UPDATE_SUCCESS: 'bb.event.contact.update.done',\n\n  /**\n   * A contact fails to be updated on the server\n   * @event bb.event.contact.edit.failed\n   * @property {module:lib-bb-model-ng.ModelError} error\n   * @type {string}\n   */\n  AFTER_CONTACT_UPDATE_ERROR: 'bb.event.contact.update.failed',\n\n  /**\n   * A contact is submitted for deletion from the server\n   * @event bb.event.contact.delete.start\n   * @type {string}\n   */\n  BEFORE_CONTACT_DELETE: 'bb.event.contact.delete.start',\n\n  /**\n   * A contact is deleted on the server\n   * @event bb.event.contact.delete.done\n   * @property {module:model-bb-contact-ng.Contact} contact\n   * @type {string}\n   */\n  AFTER_CONTACT_DELETE_SUCCESS: 'bb.event.contact.delete.done',\n\n  /**\n   * A contact fails to be deleted on the server\n   * @event bb.event.contact.delete.failed\n   * @type {string}\n   * @property {module:lib-bb-model-ng.ModelError} error\n   */\n  AFTER_CONTACT_DELETE_ERROR: 'bb.event.contact.delete.failed',\n};\n\nexport default (bus) => ({\n  beforeContactCreate() {\n    bus.publish(Event.BEFORE_CONTACT_CREATE);\n  },\n  afterContactCreateSuccess(contact) {\n    bus.publish(Event.AFTER_CONTACT_CREATE_SUCCESS, { contact });\n  },\n  afterContactCreateError(error) {\n    bus.publish(Event.AFTER_CONTACT_CREATE_ERROR, { error });\n  },\n\n  beforeContactUpdate() {\n    bus.publish(Event.BEFORE_CONTACT_UPDATE);\n  },\n  afterContactUpdateSuccess(contact) {\n    bus.publish(Event.AFTER_CONTACT_UPDATE_SUCCESS, { contact });\n  },\n  afterContactUpdateError(error) {\n    bus.publish(Event.AFTER_CONTACT_UPDATE_ERROR, { error });\n  },\n\n  beforeContactDelete() {\n    bus.publish(Event.BEFORE_CONTACT_DELETE);\n  },\n  afterContactDeleteSuccess(contact) {\n    bus.publish(Event.AFTER_CONTACT_DELETE_SUCCESS, { contact });\n  },\n  afterContactDeleteError(error) {\n    bus.publish(Event.AFTER_CONTACT_DELETE_ERROR, { error });\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/events.js","/* eslint-disable import/prefer-default-export */\nexport const Event = {\n  /**\n   * The widget is bootstrapped (data may not be loaded).\n   * @event cxp.item.loaded\n   * @type {string}\n   * @property {string} id The widget ID\n   */\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n\n  /**\n   * The widget is bootstrapped (data may not be loaded).\n   * @event bb.item.loaded\n   * @type {string}\n   * @property {string} id The widget ID\n   */\n  BB_ITEM_LOADED: 'bb.item.loaded',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-contact-ng/scripts/constants.js"],"sourceRoot":""}