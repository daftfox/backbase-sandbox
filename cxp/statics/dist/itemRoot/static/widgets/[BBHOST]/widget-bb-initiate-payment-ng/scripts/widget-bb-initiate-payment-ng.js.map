{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**************************","webpack:///webpack/bootstrap 70052c6c6190d07a36f3?d006**************************","webpack:///./widget-bb-initiate-payment-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*****************","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-storage-ng\"?d742","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-initiate-payment-ng/scripts/index.js","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"model-bb-payment-orders-ng\"","webpack:///external \"lib-bb-permissions-ng\"","webpack:///./widget-bb-initiate-payment-ng/scripts/controller.js","webpack:///./widget-bb-initiate-payment-ng/scripts/message.js","webpack:///./widget-bb-initiate-payment-ng/scripts/constants.js","webpack:///./widget-bb-initiate-payment-ng/scripts/default-hooks.js"],"names":["defaultHooks","moduleKey","hooksKey","angular","module","widgetModuleKey","eventBusModuleKey","modelPaymentOrdersModuleKey","bbStorageModuleKey","bbIntentModuleKey","bbPermissionsModuleKey","factory","controller","eventBusKey","modelPaymentOrdersKey","bbStorageServiceKey","widgetKey","bbIntentKey","bbPermissionsKey","Controller","run","bus","widget","bbIntent","publish","id","getId","init","name","InitiatePaymentController","hooks","model","bbStorage","Promise","permissions","$ctrl","DEFAULT_MESSAGE_DISMISS_TIME","paymentPreferences","showExchangeRate","getBooleanPreference","Preference","SHOW_EXCHANGE_RATE","urgent","URGENT","recurring","RECURRING","editRole","EDIT_ROLE","notificationDismissTime","getLongPreference","NOTIFICATION_DISMISS","beneficiarySelectType","getStringPreference","BENEFICIARY_SELECT_TYPE","pageSize","PAGE_SIZE","accountsFromPromise","accountsToPromise","originCurrencies","updateAccountsPromise","initPayment","today","Date","payment","amount","value","currency","from","description","paymentReference","to","schedule","startDate","endDate","getFullYear","getMonth","getDate","transferFrequency","Object","assign","singleTransfer","repeat","endingType","EndingType","NEVER","descriptionCounterState","counter","isValid","updateAccountsFrom","params","accountsLoading","list","debit","full","resolve","searchQuery","getAccountsFrom","then","accounts","accountsFrom","processAccountsFrom","hasMore","slice","catch","modelError","accountsLoadError","deleteDraft","draftPaymentId","getCurrencies","defaultItem","crossCurrencyAllowed","currentItem","processCurrencies","currencies","updateCurrencyList","debitAccount","currentCurrency","concat","find","push","sortByCurrentCurrency","a","b","sort","getAccountsTo","debitAccountId","getBeneficiaryAccounts","getAccountsToFull","request","modalSelectorAccounts","response","data","overwrite","totalCount","length","done","err","getBeneficiaryContacts","getContacts","modalSelectorContacts","getExternals","updateAccountsTo","creditAccount","isDebitEqualsCredit","IBAN","isCreditExternalAndNew","externalTransferAllowed","external","isNew","accountsTo","processAccountsTo","privileges","Contacts","view","getPermissions","getDefaultPrivileges","updateAccountSelected","getProductSelectedId","item","updateAccounts","changeVisibility","isHidden","resetPayment","onAccountFromChange","updateRate","currencyFrom","currencyTo","rate","areDifferentCurrencies","getRate","compact","str","replace","isExistingAccount","accountsList","identifier","exists","scan","index","targetAccount","idx","targetSubAccount","canSaveNewContact","beneficiary","creditAccounts","newBeneficiaryAdded","canBeSaved","saveNewContact","clearPaymentError","paymentSubmitError","setPaymentModelData","createdAt","debtorAccount","identification","debtor","arrangementId","creditTransferTransactionInformation","creditInfo","instructedAmount","currencyCode","creditName","creditor","creditorAccount","schemeName","BBAN","endToEndIdentification","remittanceInformation","content","every","parseInt","AFTER","ON","copy","requestedExecutionDate","accountFrom","getPaymentOrderData","isSinglePayment","creditIdentification","toUpperCase","getDefaultCurrency","getDateOnly","paymentMode","paymentType","getDefaultPaymentType","PaymentType","SEPA_CT","instructionPriority","on","getRecurringTransactionDay","additions","processNewPaymentData","purifyDraftPaymentData","credit","creditAcc","getNewContactData","saveContact","createContact","contact","isPaymentDataValid","paymentData","validatePayment","reviewPayment","paymentLoading","paymentValidation","errors","errorMessages","messages","valid","reject","makePayment","saveContactPromise","isCreditorDefined","requestPromise","code","E_USER","paymentOrderData","updatePayment","createPaymentOrder","resp","createPaymentResponseStatus","status","Event","PAYMENT_CREATE_SUCCESS","PAYMENT_EDIT_DONE","error","all","saveDraft","draftPayment","editDraft","handle","Intent","PAYMENT_CREATE","draft","draftMode","removeItem","IntentStorageKey","cancelPaymentEditing","PAYMENT_EDIT_CANCELLED","notifyOnAuthSuccess","PAYMENT_AUTH_SUCCESS","res","notifyOnAuthFail","PAYMENT_AUTH_FAIL","authorizeAndNotify","authorizePayment","paymentId","modalSelectorLoadMore","type","BENEFICIARY_LOAD_TYPES","ACCOUNTS","CONTACTS","bindEvents","subscribe","PAYMENT_EDIT_SEPA_CREDIT_TRANSFER","ACCOUNT_SELECTED","isAccountsFrom","account","CONTACT_CREATE_DONE","CONTACT_UPDATE_DONE","CONTACT_DELETE_DONE","NOTIFICATION_EVENT","notification","notifications","$onInit","INIT_VALIDATION_STATE","accountsErrorMessages","E_AUTH","E_CONNECTIVITY","E_UNEXPECTED","paymentErrorMessages","breachIsShadow","report","shadow","filter","createPaymentLimitsBreachMessage","BreachReport","key","messageKey","shadowMessageKey","breach","createAccountsLoadErrorMessage","createPaymentErrorMessage","SAVE_CONTACT","Privileges","resource","function","DEFAULT_CURRENCY_CODE","getCreditAccounts","getExternalContacts","dateArg","date","month","String","day","year","padStart"],"mappings":"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","file":"widget-bb-initiate-payment-ng/scripts/widget-bb-initiate-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"), require(\"lib-bb-permissions-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-initiate-payment-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-intent-ng\", \"model-bb-payment-orders-ng\", \"lib-bb-permissions-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-initiate-payment-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"), require(\"lib-bb-permissions-ng\"));\n\telse\n\t\troot[\"widget-bb-initiate-payment-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-intent-ng\"], root[\"model-bb-payment-orders-ng\"], root[\"lib-bb-permissions-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_142__, __WEBPACK_EXTERNAL_MODULE_146__, __WEBPACK_EXTERNAL_MODULE_148__, __WEBPACK_EXTERNAL_MODULE_193__, __WEBPACK_EXTERNAL_MODULE_194__, __WEBPACK_EXTERNAL_MODULE_195__, __WEBPACK_EXTERNAL_MODULE_196__, __WEBPACK_EXTERNAL_MODULE_197__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 70052c6c6190d07a36f3","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-initiate-payment-ng/model.xml\n// module id = 0\n// module chunks = 27","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 18\n// module chunks = 0 8 9 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_142__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 142\n// module chunks = 16 27 28 30 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_146__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 146\n// module chunks = 16 27 32","module.exports = __WEBPACK_EXTERNAL_MODULE_148__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 148\n// module chunks = 16 27 28 29 30 31 32 33","/**\n * @module widget-bb-initiate-payment-ng\n *\n * @description\n * Initiate payment widget\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport modelPaymentOrdersModuleKey, { modelPaymentOrdersKey } from 'model-bb-payment-orders-ng';\nimport bbPermissionsModuleKey, { bbPermissionsKey } from 'lib-bb-permissions-ng';\n\nimport Controller from './controller';\nimport * as defaultHooks from './default-hooks';\n\nconst moduleKey = 'widget-bb-initiate-payment-ng';\nconst hooksKey = `${moduleKey}:hooks`;\n\nexport default angular\n  .module(moduleKey, [\n    widgetModuleKey,\n    eventBusModuleKey,\n    modelPaymentOrdersModuleKey,\n    bbStorageModuleKey,\n    widgetModuleKey,\n    bbIntentModuleKey,\n    bbPermissionsModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .controller('InitiatePaymentController', [\n    // dependencies to inject\n    eventBusKey,\n    hooksKey,\n    modelPaymentOrdersKey,\n    bbStorageServiceKey,\n    widgetKey,\n    bbIntentKey,\n    '$q',\n    bbPermissionsKey,\n    /* into */\n    Controller,\n  ])\n  .run([eventBusKey, widgetKey, bbIntentKey, (bus, widget, bbIntent) => {\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bbIntent.init();\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_193__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 193\n// module chunks = 27 28 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_194__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 194\n// module chunks = 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_195__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 195\n// module chunks = 27 28 29 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_196__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-payment-orders-ng\"\n// module id = 196\n// module chunks = 27 28 29 30 31 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_197__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-permissions-ng\"\n// module id = 197\n// module chunks = 27 28 31 33","import angular from 'vendor-bb-angular';\nimport { E_USER } from 'lib-bb-model-errors';\n\nimport { createAccountsLoadErrorMessage, createPaymentErrorMessage } from './message';\nimport {\n  Preference,\n  singleTransfer,\n  Event,\n  EndingType,\n  IntentStorageKey,\n  Intent,\n  INIT_VALIDATION_STATE,\n  BENEFICIARY_LOAD_TYPES,\n} from './constants';\n\n/**\n * @name InitiatePaymentController\n * @type {object}\n *\n * @description\n * Initiate payment widget\n */\nexport default function InitiatePaymentController(\n  bus,\n  hooks,\n  model,\n  bbStorage,\n  widget,\n  bbIntent,\n  Promise,\n  permissions\n) {\n  const $ctrl = this;\n\n  /**\n   * Defines the default notificationDismissTime for the payment orders page\n   * as defined in the widget model.xml\n   * @type {number}\n   */\n  const DEFAULT_MESSAGE_DISMISS_TIME = 3;\n\n  const paymentPreferences = {\n    showExchangeRate: widget.getBooleanPreference(Preference.SHOW_EXCHANGE_RATE),\n    urgent: widget.getBooleanPreference(Preference.URGENT),\n    recurring: widget.getBooleanPreference(Preference.RECURRING),\n    editRole: widget.getBooleanPreference(Preference.EDIT_ROLE),\n    notificationDismissTime:\n      widget.getLongPreference(Preference.NOTIFICATION_DISMISS) || DEFAULT_MESSAGE_DISMISS_TIME,\n    beneficiarySelectType: widget.getStringPreference(Preference.BENEFICIARY_SELECT_TYPE),\n    pageSize: widget.getLongPreference(Preference.PAGE_SIZE),\n  };\n\n  let accountsFromPromise;\n  let accountsToPromise;\n  let originCurrencies;\n  let updateAccountsPromise;\n\n  /**\n   * @description\n   * Initialises new payment object.\n   *\n   * @type {function}\n   * @name InitiatePaymentController#initPayment\n   */\n  const initPayment = () => {\n    const today = new Date();\n\n    // Payment view model\n    $ctrl.payment = {\n      amount: {\n        value: null,\n        currency: null,\n      },\n      from: null,\n      description: null,\n      paymentReference: null,\n      to: null,\n      schedule: {\n        startDate: today,\n        endDate: new Date(\n          today.getFullYear(),\n          today.getMonth() + 1,\n          today.getDate()\n        ),\n        transferFrequency: Object.assign({}, singleTransfer),\n        repeat: null,\n      },\n      endingType: EndingType.NEVER,\n    };\n\n    // Init char counter state\n    $ctrl.descriptionCounterState = { counter: 0, isValid: true };\n  };\n\n  /**\n   * @description\n   * Updates the accounts list for the from (debit) selector.\n   *\n   * @inner\n   * @name InitiatePaymentController#updateAccountsFrom\n   * @type {function}\n   * @param {object} params Request params (with search possibility)\n   * @returns {Promise} Promise with no response.\n   */\n  const updateAccountsFrom = (params = {}) => {\n    $ctrl.accountsLoading = true;\n    updateAccountsFrom.list = updateAccountsFrom.list || {};\n\n    // Getting full debit accounts list from memory (if no search)\n    if (!params.debit && updateAccountsFrom.list.full) {\n      accountsFromPromise = Promise.resolve(updateAccountsFrom.list.full);\n    } else if (\n      // Getting debit list if search is stored\n      params.debit && params.debit.searchQuery &&\n      updateAccountsFrom.list[params.debit.searchQuery]\n    ) {\n      accountsFromPromise = Promise.resolve(updateAccountsFrom.list[params.debit.searchQuery]);\n    } else {\n      // Retrieving accounts from model (if not memoized yet)\n      accountsFromPromise = model.getAccountsFrom(params.debit ? params.debit : {});\n    }\n\n    return Promise.resolve(accountsFromPromise)\n      .then((accounts) => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsFrom = hooks.processAccountsFrom(accounts);\n\n        // No search? List is full? Store debits to memory...\n        if (!params.debit && !accounts.hasMore) {\n          updateAccountsFrom.list.full = accounts.slice();\n        }\n\n        // Is search? List is full? Store searched debits to memory...\n        if (params.debit && params.debit.searchQuery && !accounts.hasMore) {\n          updateAccountsFrom.list[params.debit.searchQuery] = accounts;\n        }\n      })\n      .catch((modelError) => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsLoadError = createAccountsLoadErrorMessage(modelError);\n      });\n  };\n\n  /**\n   * @name InitiatePaymentController#deleteDraft\n   * @type {function}\n   * @description\n   * Save draft payment\n   *\n   * @param {string} draftPaymentId\n   * @returns {Promise}\n   */\n  const deleteDraft = draftPaymentId => model.deleteDraft(draftPaymentId);\n\n  /**\n   * @description\n   * Downloads and caches currencies\n   *\n   * @inner\n   * @name InitiatePaymentController#getCurrencies\n   * @type {function}\n   * @returns {Promise.<object[]>} Promise object.\n   */\n  const getCurrencies = () => {\n    const defaultItem = {\n      id: '',\n      crossCurrencyAllowed: true,\n    };\n    const currentItem = $ctrl.payment.from || defaultItem;\n\n    if (!currentItem.crossCurrencyAllowed) {\n      return Promise.resolve([]);\n    }\n    return Promise.resolve(\n      originCurrencies ||\n      model.getCurrencies()\n        .then(currencies => {\n          originCurrencies = hooks.processCurrencies(currencies);\n          return originCurrencies;\n        })\n        // Return empty array if currencies cannot be loaded\n        .catch(() => [])\n    );\n  };\n\n  /**\n   * @description\n   * Updates the currency list available for the payment and a value.\n   *\n   * @inner\n   * @name InitiatePaymentController#updateCurrencyList\n   * @type {function}\n   * @returns {Promise} A Promise for Currencies get request\n   */\n  const updateCurrencyList = () => getCurrencies()\n    .then(currencies => {\n      const debitAccount = $ctrl.payment.from;\n      let currentCurrency;\n\n      $ctrl.currencies = [].concat(currencies);\n      if (debitAccount && debitAccount.currency) {\n        currentCurrency = currencies.find(currency => currency.name === debitAccount.currency);\n        if (!currentCurrency) {\n          currentCurrency = debitAccount.currency;\n          $ctrl.currencies.push({ name: currentCurrency });\n        } else {\n          currentCurrency = currentCurrency.name;\n        }\n      } else {\n        currentCurrency = (currencies[0] && currencies[0].name) || '';\n      }\n\n      const sortByCurrentCurrency = (a, b) => {\n        if (a.name === currentCurrency) {\n          return -1;\n        } else if (b.name === currentCurrency) {\n          return 1;\n        }\n        return 0;\n      };\n\n      $ctrl.currencies.sort(sortByCurrentCurrency);\n\n      $ctrl.payment.amount = {\n        currency: currentCurrency,\n        value: $ctrl.payment.amount.value,\n      };\n    });\n\n  /**\n   * @description\n   * Proxy function to method on the model\n   *\n   * @inner\n   * @name InitiatePaymentController#getAccountsTo\n   * @type {function}\n   * @param {String} debitAccountId Filter account list with debitAccountId param\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getAccountsTo = debitAccountId => model.getAccountsTo(debitAccountId);\n\n  /**\n   * @description\n   * Get credit accounts available based on params provided\n   *\n   * @inner\n   * @name InitiatePaymentController#getBeneficiaryAccounts\n   * @type {function}\n   *\n   * @param {Object} params Request parameters and callback\n   * @returns {Promise.<object>} A Promise with flat accounts list and total number of items\n   */\n  const getBeneficiaryAccounts = (params) =>\n    model.getAccountsToFull(params.request)\n      .then(response => {\n        $ctrl.modalSelectorAccounts = !$ctrl.modalSelectorAccounts ? response : {\n          ...$ctrl.modalSelectorAccounts,\n          data: params.overwrite ? response.data :\n            [...$ctrl.modalSelectorAccounts.data, ...response.data],\n          totalCount: response.totalCount,\n        };\n\n        // modify request params\n        const hasMore = response.data.length > 0 &&\n          $ctrl.modalSelectorAccounts.data.length < response.totalCount;\n\n        if (typeof params.done === 'function') {\n          params.done(hasMore);\n        }\n      })\n      .catch((err) => {\n        if (typeof params.done === 'function') {\n          params.done(err);\n        }\n      });\n\n  /**\n   * @description\n   * Get contacts available based on params provided\n   *\n   * @inner\n   * @name InitiatePaymentController#getBeneficiaryContacts\n   * @type {function}\n   *\n   * @param {Object} params Request parameters and callback function\n   * @returns {Promise.<object>} A Promise with flat contacts list with total items number\n   */\n  const getBeneficiaryContacts = (params) =>\n    model.getContacts(params.request)\n    .then(response => {\n      $ctrl.modalSelectorContacts = !$ctrl.modalSelectorContacts ? response : {\n        ...$ctrl.modalSelectorContacts,\n        data: params.overwrite ? response.data :\n          [...$ctrl.modalSelectorContacts.data, ...response.data],\n        totalCount: response.totalCount,\n      };\n\n      // modify request params\n      const hasMore = response.data.length > 0 &&\n        $ctrl.modalSelectorContacts.data.length < response.totalCount;\n\n      if (typeof params.done === 'function') {\n        params.done(hasMore);\n      }\n    })\n    .catch((err) => {\n      if (typeof params.done === 'function') {\n        params.done(err);\n      }\n    });\n\n  /**\n   * @description\n   * Proxy function to method on the model\n   *\n   * @inner\n   * @name InitiatePaymentController#getExternals\n   * @type {function}\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getExternals = () => model.getExternals();\n\n  /**\n   * @description\n   * Updates the accounts list for the to selector. Uses account from as a filter for model method\n   *\n   * @inner\n   * @name InitiatePaymentController#updateAccountsTo\n   * @type {function}\n   */\n  const updateAccountsTo = () => {\n    $ctrl.accountsLoading = true;\n\n    const debitAccount = $ctrl.payment.from || {};\n    const creditAccount = $ctrl.payment.to || {};\n\n    const isDebitEqualsCredit = creditAccount.id === debitAccount.id ||\n    creditAccount.IBAN === debitAccount.IBAN;\n\n    const isCreditExternalAndNew = !debitAccount.externalTransferAllowed &&\n      (creditAccount.external || creditAccount.isNew);\n\n    if (debitAccount.id && (isDebitEqualsCredit || isCreditExternalAndNew)) {\n      $ctrl.payment.to = null;\n    }\n\n    const accountsTo = hooks.processAccountsTo(debitAccount,\n      getAccountsTo,\n      ($ctrl.privileges && $ctrl.privileges.Contacts.Contacts.view === false ?\n        () => Promise.resolve([]) : getExternals));\n\n    // accountsTo could be a Promise so it should be processed correspondingly\n    accountsToPromise = Promise.resolve(accountsTo)\n      .then(accounts => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsTo = accounts;\n      })\n      .catch(modelError => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsLoadError = createAccountsLoadErrorMessage(modelError);\n      });\n\n    return accountsToPromise;\n  };\n\n  /**\n   * @name InitiatePaymentController#getPermissions\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Retrieve permissions for respective privilege set and store it\n   * into controller prop\n   *\n   * @return {Promise}\n   *\n   */\n  const getPermissions = () => permissions\n    .getPermissions(hooks.getDefaultPrivileges())\n    .then(privileges => {\n      $ctrl.privileges = privileges;\n    })\n    .catch(() => {\n      $ctrl.privileges = false;\n    });\n\n  /**\n   * @name InitiatePaymentController#updateAccountSelected\n   * @type {function}\n   *\n   * @inner\n   *\n   * @description\n   * Handles account select\n   */\n  const updateAccountSelected = () => {\n    model.getProductSelectedId()\n      .then(id => {\n        if (id && updateAccountsFrom.list.full) {\n          $ctrl.payment.from = updateAccountsFrom.list.full.find(item => item.id === id);\n\n          if ($ctrl.payment.from) {\n            updateCurrencyList();\n            updateAccountsTo();\n          }\n        }\n      });\n  };\n\n  /**\n   * @name InitiatePaymentController#updateAccounts\n   * @type {function}\n   * @description\n   * Update accounts from service (with possible search param)\n   *\n   * @param {object} params\n   * @returns {Promise} A Promise with no response data.\n   */\n  const updateAccounts = (params) => getPermissions()\n    .then(updateAccountsFrom(params))\n    .then(updateCurrencyList)\n    .then(updateAccountsTo);\n\n  /**\n   * @description\n   * Changes view visibility\n   *\n   * @inner\n   * @name InitiatePaymentController#changeVisibility\n   * @param {boolean} isHidden\n   * @type {function}\n   */\n  const changeVisibility = (isHidden) => {\n    $ctrl.isHidden = isHidden;\n  };\n\n  /**\n   * @description\n   * Resets payment model, updates accounts and currency lists\n   *\n   * @type {function}\n   * @name InitiatePaymentController#resetPayment\n   * @returns {Promise} A Promise with no response data.\n   */\n  const resetPayment = () => {\n    initPayment();\n\n    // Check if draft intent already made a request\n    updateAccountsPromise = updateAccountsPromise || updateAccounts();\n\n    return updateAccountsPromise;\n  };\n\n  /**\n   * @description\n   * Account from change handler.\n   *\n   * @see updateCurrencyList\n   * @see updateAccountsTo\n   *\n   * @name InitiatePaymentController#onAccountFromChange\n   * @type {function}\n   * @returns {Promise} A Promise object.\n   */\n  const onAccountFromChange = () => {\n    updateCurrencyList();\n    return updateAccountsTo();\n  };\n\n  /**\n   * @description\n   * Retrieves exchange rate for two currencies.\n   *\n   * @name InitiatePaymentController#updateRate\n   * @type {function}\n   * @returns {Promise}\n   */\n  const updateRate = (currencyFrom, currencyTo) => {\n    $ctrl.rate = null;\n\n    const areDifferentCurrencies = currencyFrom && currencyTo && (currencyTo !== currencyFrom);\n    if (!areDifferentCurrencies) {\n      return Promise.resolve();\n    }\n\n    return model.getRate({ currencyFrom, currencyTo })\n      .then(rate => {\n        $ctrl.rate = rate;\n      });\n  };\n\n  /**\n   * Removes spaces\n   *\n   * @name  compact\n   * @inner\n   * @param  {string} str A given string\n   * @return {string}     Compact string\n   */\n  const compact = str => str.replace(/\\s+/g, '');\n\n  /**\n   * @name isExistingAccount\n   * @inner\n   *\n   * @description check if the account already exists in the accounts list\n   *\n   * @param {Object} { name, identifier }\n   * @param {Array} accountsList\n   * @returns {Boolean}\n   */\n  const isExistingAccount = ({ name, identifier }, accountsList) => {\n    let exists = false;\n\n    const scan = item => {\n      exists = name === item.name && compact(identifier) === compact(item.identifier);\n    };\n\n    for (let index = 0; index < accountsList.length; index++) {\n      const targetAccount = accountsList[index];\n      if (!exists) { scan(targetAccount); } else { break; }\n\n      // if it has sub-accounts list\n      if (targetAccount.accounts && targetAccount.accounts.length) {\n        for (let idx = 0; idx < targetAccount.accounts.length; idx++) {\n          const targetSubAccount = targetAccount.accounts[idx];\n          if (!exists) { scan(targetSubAccount); } else { break; }\n        }\n      }\n    }\n\n    return exists;\n  };\n\n  /**\n   * @description\n   * Checks if layout should show 'save beneficiary' switcher\n   *\n   * @name InitiatePaymentController#canSaveNewContact\n   * @type {function}\n   * @param {object} beneficiary Recipient data\n   * @param {array} creditAccounts Credit accounts and contacts collection\n   * @returns {boolean} True if new contact can be saved\n   */\n  const canSaveNewContact = (beneficiary, creditAccounts) => {\n    const accounts = creditAccounts || []; // to cover null arg issue\n    const newBeneficiaryAdded = !!(beneficiary && beneficiary.name && beneficiary.identifier);\n    const canBeSaved = newBeneficiaryAdded && !isExistingAccount(beneficiary, accounts);\n\n    // reset switcher before any further appearance\n    if (!canBeSaved) {\n      $ctrl.saveNewContact = false;\n    }\n\n    return canBeSaved;\n  };\n\n  /**\n   * @description\n   * Clears payment submit message\n   *\n   * @name InitiatePaymentController#clearPaymentError\n   * @type {function}\n   */\n  const clearPaymentError = () => {\n    $ctrl.paymentSubmitError = null;\n  };\n\n\n    /**\n   * @description\n   * The payment-data is set on te widget model, used for presenting\n   * drafts for example.\n   *\n   * @inner\n   * @name InitiatePaymentController#setPaymentModelData\n   * @type {function}\n   * @param {object} payment Payment data\n   */\n  const setPaymentModelData = (payment) => {\n    $ctrl.payment.id = payment.id;\n    if (payment.createdAt) {\n      $ctrl.payment.createdAt = new Date(payment.createdAt);\n    }\n    // select debtor info\n    if (payment.debtorAccount) {\n      $ctrl.payment.from = {\n        crossCurrencyAllowed: !payment.debtorAccount.crossCurrencyAllowed ?\n          true : payment.debtorAccount.crossCurrencyAllowed,\n        identifier: payment.debtorAccount.identification ?\n          payment.debtorAccount.identification.identification : null,\n        name: payment.debtor ? payment.debtor.name : null,\n        id: payment.debtorAccount.arrangementId,\n      };\n    }\n    // creditor info\n    if (payment.creditTransferTransactionInformation &&\n        payment.creditTransferTransactionInformation.length > 0) {\n      const creditInfo = payment.creditTransferTransactionInformation[0];\n      $ctrl.payment.amount = {};\n\n      // amount and currency\n      if (creditInfo.instructedAmount && creditInfo.instructedAmount.currencyCode) {\n        $ctrl.payment.amount.currency = creditInfo.instructedAmount.currencyCode;\n      }\n\n      if (creditInfo.instructedAmount && creditInfo.instructedAmount.amount) {\n        $ctrl.payment.amount.value = creditInfo.instructedAmount.amount;\n      }\n      // creditor account\n      let creditAccount = {};\n      const creditName = {\n        name: creditInfo.creditor ? creditInfo.creditor.name : null,\n      };\n\n      if (creditInfo.creditorAccount && creditInfo.creditorAccount.identification) {\n        if (creditInfo.creditorAccount.identification.schemeName === 'IBAN') {\n          creditAccount = {\n            identifier: creditInfo.creditorAccount.identification.identification,\n            IBAN: creditInfo.creditorAccount.identification.identification,\n          };\n        } else {\n          creditAccount = {\n            identifier: creditInfo.creditorAccount.identification.identification,\n            BBAN: creditInfo.creditorAccount.identification.identification,\n          };\n        }\n      }\n      $ctrl.payment.to = Object.assign({}, creditName, creditAccount);\n\n      // reference and description\n      $ctrl.payment.paymentReference = creditInfo.endToEndIdentification;\n      $ctrl.payment.description = creditInfo.remittanceInformation ?\n        creditInfo.remittanceInformation.content : null;\n    }\n\n    // schedule\n    if (payment.schedule) {\n      $ctrl.payment.schedule.transferFrequency.value = payment.schedule.transferFrequency;\n\n      if (payment.schedule.transferFrequency === 'WEEKLY') {\n        $ctrl.payment.schedule.transferFrequency.name = 'form.schedule.frequency.weekly';\n      } else if (payment.schedule.transferFrequency === 'DAILY') {\n        $ctrl.payment.schedule.transferFrequency.name = 'form.schedule.frequency.daily';\n      } else if (payment.schedule.transferFrequency === 'MONTHLY') {\n        $ctrl.payment.schedule.transferFrequency.name = 'form.schedule.frequency.monthly';\n      } else if (payment.schedule.transferFrequency === 'QUARTERLY') {\n        $ctrl.payment.schedule.transferFrequency.name = 'form.schedule.frequency.quarterly';\n      } else if (payment.schedule.transferFrequency === 'YEARLY') {\n        $ctrl.payment.schedule.transferFrequency.name = 'form.schedule.frequency.annually';\n      }\n\n      $ctrl.payment.schedule.startDate = payment.schedule.startDate ?\n        new Date(payment.schedule.startDate) : null;\n\n      if (payment.schedule.every) {\n        $ctrl.payment.schedule.transferFrequency.every = parseInt(payment.schedule.every, 10);\n      }\n\n      if (payment.schedule.endDate) {\n        $ctrl.payment.schedule.endDate = new Date(payment.schedule.endDate);\n      }\n\n      if (payment.schedule.repeat) {\n        $ctrl.payment.schedule.repeat = payment.schedule.repeat;\n        $ctrl.payment.endingType = EndingType.AFTER;\n      } else if (payment.schedule.endDate) {\n        $ctrl.payment.endingType = EndingType.ON;\n      }\n    } else {\n      $ctrl.payment.schedule.transferFrequency = angular.copy(singleTransfer);\n      $ctrl.payment.schedule.startDate = new Date(payment.requestedExecutionDate);\n      $ctrl.payment.schedule.endDate = new Date(payment.requestedExecutionDate);\n    }\n\n    // update accountFrom info in editRole\n    if (paymentPreferences.editRole) {\n      const accountFrom = $ctrl.accountsFrom.find(\n        item => item.id === payment.debtorAccount.arrangementId\n      );\n\n      $ctrl.payment.from = Object.assign({}, accountFrom);\n      onAccountFromChange();\n    }\n  };\n\n  /**\n   * @description\n   * Transforms widgets payment data to payment order data\n   * required by the model.\n   *\n   * @inner\n   * @name InitiatePaymentController#getPaymentOrderData\n   * @type {function}\n   * @param {object} payment Payment data\n   * @returns {object} Transformed payment order data\n   */\n  const getPaymentOrderData = payment => {\n    const { to, from, schedule, amount } = payment;\n    const isSinglePayment = !schedule.transferFrequency ||\n      schedule.transferFrequency.value === singleTransfer.value;\n    const creditIdentification = {\n      schemeName: 'IBAN',\n      identification: to.identifier ? to.identifier.toUpperCase() : null,\n    };\n\n    // Default currency code check\n    if (amount.value && !amount.currency) {\n      amount.currency = hooks.getDefaultCurrency();\n    }\n\n    const data = {\n      debtorAccount: {\n        identification: {\n          schemeName: 'ID',\n          identification: from ? from.id : null,\n        },\n      },\n\n      requestedExecutionDate: hooks.getDateOnly(schedule.startDate),\n      paymentMode: isSinglePayment ? 'SINGLE' : 'RECURRING',\n      creditTransferTransactionInformation: [{\n        instructedAmount: {\n          amount: amount.value,\n          currencyCode: amount.currency,\n        },\n        creditor: {\n          name: to.name,\n        },\n        creditorAccount: {\n          identification: creditIdentification,\n          name: to.name,\n        },\n      }],\n      // hook payment type\n      paymentType: hooks.getDefaultPaymentType() || model.PaymentType.SEPA_CT,\n    };\n\n    if (payment.urgent) {\n      data.instructionPriority = 'HIGH';\n    }\n\n    const creditInfo = data.creditTransferTransactionInformation[0];\n    if (payment.paymentReference) {\n      creditInfo.endToEndIdentification = payment.paymentReference;\n    }\n\n    if (payment.description) {\n      creditInfo.remittanceInformation = payment.description;\n    }\n\n    if (!isSinglePayment) {\n      data.schedule = {\n        transferFrequency: schedule.transferFrequency.value,\n        on: hooks.getRecurringTransactionDay(schedule),\n        startDate: hooks.getDateOnly(schedule.startDate),\n        every: schedule.transferFrequency.every,\n        endDate: payment.endingType === EndingType.ON ? hooks.getDateOnly(schedule.endDate) : null,\n        repeat: payment.endingType === EndingType.AFTER ? schedule.repeat : null,\n      };\n    }\n\n    if (typeof payment.additions === 'object') {\n      data.additions = Object.assign({}, payment.additions);\n    }\n\n    if (payment.id) {\n      data.id = payment.id;\n    }\n\n    return hooks.processNewPaymentData(data);\n  };\n\n  /**\n   * @description\n   * Removes not needed data from draft object before sending\n   *\n   * @name InitiatePaymentController#purifyDraftPaymentData\n   * @type {function}\n   * @param {object} payment Payment data\n   * @returns {object} transformed draft payment order data\n   */\n  const purifyDraftPaymentData = payment => {\n    const data = getPaymentOrderData(payment);\n    const credit = data.creditTransferTransactionInformation[0];\n    const creditAcc = credit.creditorAccount.identification.identification;\n\n    if (!data.debtorAccount.identification || !data.debtorAccount.identification.identification) {\n      delete data.debtorAccount;\n    }\n\n    if (!credit.creditor.name) {\n      delete credit.creditor;\n    }\n\n    if (!creditAcc) {\n      delete credit.creditorAccount;\n    }\n\n    if (!credit.instructedAmount.amount) {\n      delete credit.instructedAmount;\n    }\n\n    if (!credit.creditor && !credit.creditorAccount && !credit.instructedAmount) {\n      delete data.creditTransferTransactionInformation;\n    }\n\n    return data;\n  };\n\n  /**\n   * @description\n   * Transofrms widget's payment data to contact data\n   * required by the model.\n   *\n   * @inner\n   * @name InitiatePaymentController#getNewContactData\n   * @type {function}\n   * @param {object} payment Payment data\n   * @returns {object} Transformed contact data\n   */\n  const getNewContactData = payment => ({\n    name: payment.to.name,\n    accounts: [{\n      name: payment.to.name,\n      IBAN: payment.to.identifier,\n    }],\n  });\n\n  /**\n   * @name InitiatePaymentController#saveContact\n   *\n   * @description\n   * Saves a new contact\n   *\n   * @inner\n   * @type {function}\n   * @param {object} contact New contact data\n   * @return {Promise} A Promise for new contact request\n   */\n  const saveContact = contact => model.createContact(contact)\n    .then(updateAccountsTo);\n\n  /**\n   * @description\n   * Checks if payment order data is valid.\n   * It cannot have recurring payment details if recurring payment is disabled.\n   *\n   * @inner\n   * @name InitiatePaymentController#isPaymentDataValid\n   * @type {function}\n   * @param {object} paymentData Payment order data\n   * @returns {boolean} Returns true if data is valid, false otherwise.\n   */\n  const isPaymentDataValid = paymentData => !!paymentPreferences.recurring ||\n    (paymentData.schedule && paymentData.schedule.transferFrequency &&\n      paymentData.schedule.transferFrequency.value === singleTransfer.value);\n\n  /**\n   * @name InitiatePaymentController#validatePayment\n   * @type {function}\n   * @description\n   * Validate payment before sending to bank\n   * @inner\n   *\n   * @param {object} payment to be validated\n   * @returns {Promise}\n   */\n  const validatePayment = payment => model.validatePayment(getPaymentOrderData(payment));\n\n  /**\n   * @description\n   * Validate payment data before moving payment state to review.\n   *\n   * @name InitiatePaymentController#reviewPayment\n   * @type {function}\n   * @param payment   The payment to validate\n   * @returns {Promise} A promise that will be fulfilled with the validation result\n   */\n  const reviewPayment = payment => {\n    $ctrl.paymentLoading = true;\n    $ctrl.paymentValidation = hooks.validatePayment(payment);\n\n    return validatePayment(payment)\n      .then(() => {\n        $ctrl.paymentLoading = false;\n      })\n      .catch(errorMessages => {\n        const errors = errorMessages.messages ? errorMessages.messages : [];\n        $ctrl.paymentLoading = false;\n        $ctrl.paymentValidation = {\n          valid: false,\n          messages: [\n            ...errors,\n          ],\n        };\n\n        return Promise.reject();\n      });\n  };\n\n  /**\n   * @description\n   * Prepares and sends payment order request\n   *\n   * @name InitiatePaymentController#makePayment\n   * @type {function}\n   * @param {object} paymentData New payment order data\n   * @returns {Promise} A Promise object for new payment request\n   */\n  const makePayment = paymentData => {\n    let saveContactPromise;\n\n    $ctrl.paymentLoading = true;\n    clearPaymentError();\n\n    // save new contact (if needed)\n    const isCreditorDefined = paymentData.to && paymentData.to.name && paymentData.to.identifier;\n    if ($ctrl.saveNewContact && isCreditorDefined) {\n      const contact = getNewContactData(paymentData);\n\n      saveContactPromise = Promise.resolve(saveContact(contact)\n        .then(() => {\n          $ctrl.saveNewContact = false;\n        })\n        .catch(() => {\n          $ctrl.saveNewContact = true;\n        }));\n    }\n\n    // make sure we are processing single payment if recurring is disabled via preferences\n    let requestPromise;\n    if (!isPaymentDataValid(paymentData)) {\n      requestPromise = Promise.reject({ code: E_USER });\n    } else {\n      const paymentOrderData = getPaymentOrderData(paymentData);\n\n      if ($ctrl.paymentPreferences.editRole) {\n        requestPromise = Promise.resolve(\n          model.updatePayment(paymentData.id, paymentOrderData)\n        );\n      } else {\n        requestPromise = Promise.resolve(model.createPaymentOrder(paymentOrderData));\n      }\n    }\n\n    requestPromise\n      .then((resp) => {\n        $ctrl.createPaymentResponseStatus = resp.data.status;\n        bus.publish(Event.PAYMENT_CREATE_SUCCESS, $ctrl.createPaymentResponseStatus);\n        $ctrl.paymentLoading = false;\n\n        if ($ctrl.paymentPreferences.editRole) {\n          bus.publish(Event.PAYMENT_EDIT_DONE);\n          changeVisibility(true);\n          $ctrl.initPayment();\n        }\n      })\n      .catch(error => {\n        if (saveContactPromise) {\n          $ctrl.saveNewContact = false;\n        }\n        $ctrl.paymentLoading = false;\n        $ctrl.paymentSubmitError = createPaymentErrorMessage(error);\n        return Promise.reject();\n      });\n\n    if (saveContactPromise) {\n      return Promise.all([requestPromise, saveContactPromise]);\n    }\n\n    return requestPromise;\n  };\n\n  /**\n   * @name InitiatePaymentController#saveDraft\n   * @type {function}\n   * @description\n   * Save draft payment\n   *\n   * @param {object} draftPayment\n   * @returns {Promise}\n   */\n  const saveDraft = draftPayment => model.saveDraft(purifyDraftPaymentData(draftPayment));\n\n  /**\n   * @name InitiatePaymentController#editDraft\n   * @type {function}\n   * @description\n   * Save changes to draft payment\n   *\n   * @param {string} draftPaymentId to be deleted\n   * @param {object} draftPayment\n   * @returns {Promise}\n   */\n  const editDraft = (draftPaymentId, draftPayment) =>\n    model.editDraft(draftPaymentId, purifyDraftPaymentData(draftPayment));\n\n  bbIntent.handle(Intent.PAYMENT_CREATE, (draft) => {\n    if (draft) {\n      $ctrl.draftMode = {\n        ...draft,\n      };\n\n      // Check if $onInit made the request earlier\n      updateAccountsPromise = updateAccountsPromise || updateAccounts();\n\n      updateAccountsPromise.then(() => {\n        setPaymentModelData(draft);\n      });\n\n      // removes draft information from intent library\n      bbStorage.removeItem(IntentStorageKey);\n    } else {\n      $ctrl.draftMode = null;\n    }\n  });\n\n  /**\n   * @name InitiatePaymentController#cancelPaymentEditing\n   * @type {function}\n   * @description\n   * Cancels payment editing\n   */\n  const cancelPaymentEditing = () => {\n    bus.publish(Event.PAYMENT_EDIT_CANCELLED);\n    changeVisibility(true);\n    $ctrl.initPayment();\n  };\n\n  /**\n   * @name InitiatePaymentController#notifyOnAuthSuccess\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on authorization request's success.\n   *\n   * @fires bb.event.payment.auth.success\n   *\n   * @returns {object}\n   */\n  const notifyOnAuthSuccess = res => {\n    bus.publish(Event.PAYMENT_AUTH_SUCCESS, res);\n  };\n\n  /**\n   * @name InitiatePaymentController#notifyOnAuthFail\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Emit events based on authorization request's failure.\n   *\n   * @fires bb.event.payment.auth.fail\n   *\n   * @returns {object}\n   */\n  const notifyOnAuthFail = err => {\n    bus.publish(Event.PAYMENT_AUTH_FAIL, err);\n  };\n\n  /**\n   * @name InitiatePaymentController#authorizeAndNotify\n   * @type {function}\n   *\n   * @description\n   * Requests payment authorization (approval) and notifies on result\n   *\n   * @param {string} paymentId Id of the payment\n   * @returns {Promise}\n   */\n  const authorizeAndNotify = paymentId =>\n    model.authorizePayment(paymentId)\n      .then(notifyOnAuthSuccess)\n      .catch(notifyOnAuthFail);\n\n  /**\n   * @name InitiatePaymentController#modalSelectorLoadMore\n   * @type {function}\n   *\n   * @description\n   * Dispatches \"load more\" request from beneficiary selector\n   *\n   * @param {Object} params\n   */\n  const modalSelectorLoadMore = (params = {}) => {\n    switch (params.type) {\n      case BENEFICIARY_LOAD_TYPES.ACCOUNTS:\n        getBeneficiaryAccounts(params);\n        break;\n      case BENEFICIARY_LOAD_TYPES.CONTACTS:\n        getBeneficiaryContacts(params);\n        break;\n      default: break;\n    }\n  };\n\n  /**\n   * @description\n   * Adds subscriptions to bus events\n   *\n   * @inner\n   * @name InitiatePaymentController#bindEvents\n   * @type {function}\n   */\n  const bindEvents = () => {\n    bus.subscribe(Event.PAYMENT_EDIT_SEPA_CREDIT_TRANSFER, (payment) => {\n      if (payment) {\n        changeVisibility(false);\n        setPaymentModelData(payment);\n        updateCurrencyList();\n      }\n    });\n\n    bus.subscribe(Event.ACCOUNT_SELECTED, data => {\n      if (data.isAccountsFrom) {\n        $ctrl.payment.from = data.account;\n        return onAccountFromChange();\n      }\n\n      $ctrl.payment.to = data.account;\n      return null;\n    });\n\n    bus.subscribe(Event.CONTACT_CREATE_DONE, () => updateAccountsTo());\n    bus.subscribe(Event.CONTACT_UPDATE_DONE, () => updateAccountsTo());\n    bus.subscribe(Event.CONTACT_DELETE_DONE, () => updateAccountsTo());\n\n    bus.subscribe(Event.NOTIFICATION_EVENT, (notification) => {\n      $ctrl.notifications.push(notification);\n    });\n\n    /**\n     * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n     * and will be removed with the update to widget collection 3 (WC3)\n     */\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bus.publish('bb.item.loaded', {\n      id: widget.getId(),\n    });\n  };\n\n  /**\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @name InitiatePaymentController#$onInit\n   * @type {function}\n   * @returns {Promise}\n   */\n  const $onInit = () => resetPayment()\n    .then(updateAccountSelected)\n    .then(bindEvents);\n\n  Object.assign($ctrl, {\n    /**\n     * @description\n     * Status of payment order create. Needed to show proper\n     * message on confirmation screen\n     *\n     * @name InitiatePaymentController#createPaymentResponseStatus\n     * @type {string|null}\n     */\n    createPaymentResponseStatus: null,\n    /**\n     * @description\n     * Flag that tells if accounts list is being loaded\n     *\n     * @name InitiatePaymentController#accountsLoading\n     * @type {boolean} accountsLoading\n     */\n    accountsLoading: false,\n    /**\n     * @description\n     * Store model error key which can be used for translation in the extension\n     *\n     * Possible values:\n     * - account.model.error.auth\n     * - account.model.error.connectivity\n     * - account.model.error.user\n     * - account.model.error.unexpected\n     *\n     * @name InitiatePaymentController#accountsLoadError\n     * @type {object}\n     */\n    accountsLoadError: null,\n    /**\n     * @description\n     * Payment object, containing info - from account, to account, amount, etc.\n     *\n     * @name InitiatePaymentController#payment\n     * @type {object} Payment object\n     */\n    payment: null,\n    /**\n     * @description\n     * List of accounts to do payment from\n     *\n     * @name InitiatePaymentController#accountsFrom\n     * @type {object[]} accountsFrom\n     */\n    accountsFrom: null,\n    /**\n     * @description\n     * List of accounts to payment to\n     *\n     * @name InitiatePaymentController#accountsTo\n     * @type {object[]} accountsTo\n     */\n    accountsTo: null,\n    /**\n     * @description\n     * List of contacts available to user and its total number\n     *\n     * @name InitiatePaymentController#modalSelectorContacts\n     * @type {object} modalSelectorContacts\n     */\n    modalSelectorContacts: null,\n    /**\n     * @description\n     * List of own accounts available to user and its total number\n     *\n     * @name InitiatePaymentController#modalSelectorAccounts\n     * @type {object} modalSelectorAccounts\n     */\n    modalSelectorAccounts: null,\n    /**\n     * @description\n     * List of currencies available for payment\n     *\n     * @name InitiatePaymentController#currencies\n     * @type {object[]} currencies\n     */\n    currencies: null,\n    /**\n     * @description\n     * Flag which indicates is new contact have to be saved\n     *\n     * @name InitiatePaymentController#saveNewContact\n     * @type {boolean} saveNewContact\n     */\n    saveNewContact: false,\n    /**\n     * @description\n     * Rate defined for cross-currency payments\n     *\n     * @name InitiatePaymentController#rate\n     * @type {number}\n     */\n    rate: null,\n    /**\n     * @description\n     * Payment preferences set in the widget preferences\n     *\n     * @name InitiatePaymentController#paymentPreferences\n     * @type {number}\n     */\n    paymentPreferences,\n    /**\n     * @description\n     * Available payment order ending types\n     *\n     * @name InitiatePaymentController#EndingType\n     * @type {object}\n     */\n    EndingType,\n    /**\n     * @description\n     * Single Transfer constant\n     *\n     * @name InitiatePaymentController#singleTransfer\n     * @type {string}\n     */\n    singleTransfer,\n    /**\n     * @description\n     * Store model error key which can be used for translation in the extension\n     *\n     * Possible values:\n     * - payment.model.error.auth\n     * - payment.model.error.connectivity\n     * - payment.model.error.user\n     * - payment.model.error.unexpected\n     *\n     * @name InitiatePaymentController#paymentSubmitError\n     * @type {string}\n     */\n    paymentSubmitError: null,\n    /**\n     * @description\n     * Flag that tells if new payment is being processed\n     *\n     * @name InitiatePaymentController#paymentLoading\n     * @type {boolean} paymentLoading\n     */\n    paymentLoading: false,\n\n    /**\n     * @description\n     * Store payment validations\n     *\n     * @name InitiatePaymentController#paymentValidation\n     * @type {object}\n     * @property {boolean} valid\n     * @property {array.<ValidationMessages>} messages\n     */\n    paymentValidation: INIT_VALIDATION_STATE,\n\n    /**\n     * @description\n     * Container to store char counter state for payment description\n     *\n     * @name InitiatePaymentController#descriptionCounterState\n     * @type {object}\n     */\n    descriptionCounterState: null,\n\n    /**\n     * @description\n     * Container to store retrieved privileges state\n     *\n     * @name InitiatePaymentController#privileges\n     * @type {object}\n     */\n    privileges: null,\n\n    /**\n     * @description\n     * Flag that tells if widget view should be hidden\n     *\n     * @name InitiatePaymentController#isHidden\n     * @type {boolean}\n     */\n    isHidden: paymentPreferences.editRole,\n\n    /**\n     * @description\n     * List of notifications to be shown\n     *\n     * @name InitiatePaymentController#notifications\n     * @type {boolean}\n     */\n    notifications: [],\n\n    // Methods\n    $onInit,\n    resetPayment,\n    onAccountFromChange,\n    deleteDraft,\n    updateRate,\n    canSaveNewContact,\n    clearPaymentError,\n    reviewPayment,\n    makePayment,\n    updateAccounts,\n    initPayment,\n    saveDraft,\n    editDraft,\n    purifyDraftPaymentData,\n    cancelPaymentEditing,\n    authorizeAndNotify,\n    modalSelectorLoadMore,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/controller.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { BreachReport } from './constants';\n\nconst accountsErrorMessages = {\n  [E_AUTH]: 'account.model.error.auth',\n  [E_CONNECTIVITY]: 'account.model.error.connectivity',\n  [E_USER]: 'account.model.error.user',\n  [E_UNEXPECTED]: 'account.model.error.unexpected',\n};\n\nconst paymentErrorMessages = {\n  [E_AUTH]: 'payment.model.error.auth',\n  [E_CONNECTIVITY]: 'payment.model.error.connectivity',\n  [E_USER]: 'payment.model.error.user',\n  [E_UNEXPECTED]: 'payment.model.error.unexpected',\n};\n\n/**\n * @name breachIsShadow\n * @description\n * Returns true if the report is \"shadow\" and false otherwise\n * @inner\n *\n * @param {object[]} report\n * @returns {boolean}\n */\nconst breachIsShadow = (report = []) =>\n  (report.length === 1 && report[0].shadow) ||\n  (report.length > 1 && report.filter(item => item.shadow === true).length === report.length);\n\n/**\n * @name createPaymentLimitsBreachMessage\n * @description\n * Create a view object to show\n * complex message in case of limits breach\n *\n * @inner\n * @type {function}\n * @param {module:lib-bb-model-errors.ModelError} modelError Error from the model\n * @returns {object|null} New payment limits breach error object\n */\nconst createPaymentLimitsBreachMessage = modelError => (\n  modelError[BreachReport.key] ? {\n    messageKey: breachIsShadow(modelError[BreachReport.key]) ?\n      BreachReport.shadowMessageKey : BreachReport.messageKey,\n    breach: true,\n    shadow: breachIsShadow(modelError[BreachReport.key]),\n    report: modelError[BreachReport.key],\n    type: 'danger',\n  } : null\n);\n\n/**\n * @description\n * Create i18n error key from error model based on error message code\n *\n * @inner\n * @type {function}\n * @param {module:lib-bb-model-errors.ModelError} modelError Error from the model\n * @returns {object} Accounts load error\n */\nexport const createAccountsLoadErrorMessage = modelError => ({\n  messageKey: accountsErrorMessages[modelError.code] || accountsErrorMessages[E_UNEXPECTED],\n  type: 'warning',\n});\n\n/**\n * @description\n * Create i18n error key from error model based on error message code\n *\n * @inner\n * @type {function}\n * @param {module:lib-bb-model-errors.ModelError} modelError Error from the model\n * @returns {object} New payment order error\n */\nexport const createPaymentErrorMessage = modelError => (\n  createPaymentLimitsBreachMessage(modelError) || {\n    messageKey: paymentErrorMessages[modelError.code] || paymentErrorMessages[E_UNEXPECTED],\n    type: 'warning',\n  }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/message.js","/**\n * Widget preferences enum\n * @name Preference\n * @type {object}\n */\nexport const Preference = {\n  SAVE_CONTACT: 'bb.payment.save.contact',\n  SHOW_EXCHANGE_RATE: 'bb.payment.show.exchange',\n  URGENT: 'bb.payment.urgent',\n  RECURRING: 'bb.payment.recurring',\n  EDIT_ROLE: 'bb.payment.edit.role',\n  NOTIFICATION_DISMISS: 'bb.payment.notificationDismissTime',\n  BENEFICIARY_SELECT_TYPE: 'bb.payment.beneficiary.select.type',\n  PAGE_SIZE: 'bb.payment.list.pageSize',\n};\n\n/**\n * @description\n * Single transfer constant\n *\n * @name singleTransfer\n * @type {object}\n */\nexport const singleTransfer = {\n  name: 'form.schedule.frequency.once',\n  value: 'ONCE',\n};\n\n/**\n * Widget events enum\n * @type {object}\n */\nexport const Event = {\n  CONTACT_CREATE_DONE: 'bb.event.contact.create.done',\n  CONTACT_DELETE_DONE: 'bb.event.contact.delete.done',\n  CONTACT_UPDATE_DONE: 'bb.event.contact.update.done',\n  ACCOUNT_SELECTED: 'bb.event.account.selected',\n  PAYMENT_CREATE_SUCCESS: 'bb.event.payment.create.success',\n  PAYMENT_EDIT_SEPA_CREDIT_TRANSFER: 'bb.event.payment.edit.sepa.credit.transfer',\n  PAYMENT_EDIT_DONE: 'bb.event.payment.edit.done',\n  PAYMENT_EDIT_CANCELLED: 'bb.event.payment.edit.cancelled',\n  PAYMENT_AUTH_SUCCESS: 'bb.event.payment.auth.success',\n  PAYMENT_AUTH_FAIL: 'bb.event.payment.auth.fail',\n  NOTIFICATION_EVENT: 'bb.event.notifications.notify',\n};\n\n/**\n * Widget intents enum\n * @type {object}\n */\nexport const Intent = {\n  PAYMENT_CREATE: 'go.payment.create',\n};\n\n/**\n * @description\n * Available payment order ending types\n *\n * @name EndingType\n * @type {object}\n */\nexport const EndingType = {\n  NEVER: 'never',\n  ON: 'on',\n  AFTER: 'after',\n};\n\n/**\n * @description\n * Limit breach report constants\n *\n * @type {object}\n */\nexport const BreachReport = {\n  key: 'breachReport',\n  messageKey: 'payment.model.error.breach',\n  shadowMessageKey: 'payment.model.error.breach.shadow',\n};\n\n/**\n * @description storageKey of intent.\n *\n * @type {string}\n */\nexport const IntentStorageKey = 'lib-bb-intent:navigated-intent';\n\n/**\n * @description\n * Config for retrieving user privileges\n *\n * @type {object}\n */\nexport const Privileges = [\n  {\n    resource: 'Payments',\n    function: 'SEPA CT',\n    privileges: ['create', 'approve'],\n  },\n  {\n    resource: 'Contacts',\n    function: 'Contacts',\n    privileges: ['view'],\n  },\n];\n\n/**\n * @name INIT_VALIDATION_STATE\n * @type {{valid: boolean, messages: Array}}\n * @description\n * Initial state before backend validation (payment is valid)\n */\nexport const INIT_VALIDATION_STATE = { valid: true, messages: [] };\n\n/**\n * @name DEFAULT_CURRENCY_CODE\n * @type {String}\n * @description\n * Default currency code if there is none loaded\n */\nexport const DEFAULT_CURRENCY_CODE = 'EUR';\n\n/**\n * @name BENEFICIARY_LOAD_TYPES\n * @description\n * Map of beneficiary loading types\n * @type {Object}\n */\nexport const BENEFICIARY_LOAD_TYPES = {\n  CONTACTS: 'contacts',\n  ACCOUNTS: 'accounts',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/constants.js","import { DEFAULT_CURRENCY_CODE, Privileges } from './constants';\n\n/**\n * @name Hooks\n * @type {object}\n *\n * @description\n * Hooks for widget-bb-initiate-payment-ng\n */\n\n/**\n * @name Hooks#processAccountsTo\n * @type {function}\n *\n * @description\n * Hook for processing account list in 'to' field (credit).\n * Assigned to $ctrl.accountsTo.\n *\n * @param {object} debitAccount Selected debit account (can be null).\n * @param {function} getCreditAccounts Function to retrieve all credit accounts\n * @param {function} getExternalContacts Function to retrieve all external contacts\n * formatted like Product kind\n * @returns {Promise.<array.<module:model-bb-product-summary-ng.Product>>}\n *  Promise that retrieves array of accounts.\n */\n// eslint-disable-next-line no-unused-vars\nexport const processAccountsTo = (debitAccount, getCreditAccounts, getExternalContacts) =>\n  getCreditAccounts((debitAccount && debitAccount.id) || null);\n\n/**\n * @name Hooks#getRecurringTransactionDay\n * @type {function}\n *\n * @description\n * Denotes day on which transfer should be executed.\n * For weekly it will be 1..7 indicating weekday.\n * For monthly it will be 1..31 indicating day of month.\n * For yearly it will be 1..12 indicating month of the year\n *\n * @param {object} schedule Recurring payment schedule object\n * @returns {number} Recurring transaction day\n */\nexport const getRecurringTransactionDay = schedule => schedule.startDate.getDate();\n\n/**\n * @name Hooks#getDateOnly\n * @type {function}\n *\n * @description\n * Parses a javascript date to a yyyy-MM-DD format string, dropping time and timezone information.\n *\n * @param {date} date the date to parse\n * @returns {string} the formatted string/date\n */\nexport const getDateOnly = dateArg => {\n  if (!dateArg) {\n    return null;\n  }\n\n  const date = new Date(dateArg);\n  const month = String(date.getMonth() + 1);\n  const day = String(date.getDate());\n  const year = String(date.getFullYear());\n\n  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n};\n\n/**\n * @name Hooks#processCurrencies\n * @type {function}\n *\n * @description\n * Processes currencies array returned from the service\n *\n * @param {object[]} currencies Initial currencies\n * @returns {object[]} Processed currencies\n */\nexport const processCurrencies = currencies => currencies;\n\n/**\n * @name Hooks#processAccountsFrom\n * @type {function}\n *\n * @description\n * Hook for processing account list in 'from' field (debit).\n * Assigned to $ctrl.accountsFrom.\n *\n * @param {object[]} accounts Initial debit accounts.\n * @returns {object[]} Processed debit accounts.\n */\nexport const processAccountsFrom = accounts => accounts;\n\n/**\n * @name Hooks#processNewPaymentData\n * @type {function}\n *\n * @description\n * Hook for processing new payment order data.\n * Will be passed to model.createPaymentOrder method.\n *\n * @param {object} data Initial new payment order data.\n * @returns {object} Processed new payment order data.\n */\nexport const processNewPaymentData = data => data;\n\n/**\n * @name Hooks#validatePayment\n * @type {function}\n *\n * @description\n * Hook for reviewing new payment order data.\n * Assigned to $ctrl.reviewPayment\n *\n * @param {object} data Initial new payment order data.\n * @returns {Validation} Payment validation object.\n */\n// eslint-disable-next-line no-unused-vars\nexport const validatePayment = payment => ({ valid: true, messages: [] });\n\n/**\n * Validation object\n * @typedef {object}  Validation\n * @property  {boolean} valid\n * @property  {ValidationMessage[]} messages\n */\n\n /**\n  * Validation Messages object\n  * @typedef {object} ValidationMessage\n  * @property {string} messageKey\n  * @property {string} type\n  */\n\n/**\n * @name Hooks#getDefaultCurrency\n * @type {Function}\n *\n * @description\n *\n * @returns {String} Default currency\n */\nexport const getDefaultCurrency = () => DEFAULT_CURRENCY_CODE;\n\n/**\n * @name Hooks#getDefaultPaymentType\n * @type {Function}\n *\n * @description return default payment type\n *\n * @returns {String} Default payment type\n */\nexport const getDefaultPaymentType = () => '';\n\n/**\n * @name Hooks#getDefaultPrivileges\n * @type {Function}\n *\n * @description return Default user Privileges\n *\n * @returns {Object} Default user Privileges\n */\nexport const getDefaultPrivileges = () => Privileges;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/default-hooks.js"],"sourceRoot":""}