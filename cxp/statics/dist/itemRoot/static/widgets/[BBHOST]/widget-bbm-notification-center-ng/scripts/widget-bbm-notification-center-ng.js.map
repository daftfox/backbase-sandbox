{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***********","webpack:///webpack/bootstrap 35bfb9b1c80b5da44aff?9560***********","webpack:///./widget-bbm-notification-center-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*****","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-event-bus-ng\"?8215***","webpack:///external \"lib-bb-model-errors\"?7567**","webpack:///external \"model-bb-notifications-ng\"?9a3a**","webpack:///external \"lib-bb-intent-ng\"?add1**","webpack:///./widget-bbm-notification-center-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-state-container-ng\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"lib-bb-extension-events-ng\"","webpack:///external \"lib-bb-extension-intents-ng\"","webpack:///./widget-bbm-notification-center-ng/scripts/controllers/list.controller.js","webpack:///./widget-bbm-notification-center-ng/scripts/controllers/details.controller.js","webpack:///./widget-bbm-notification-center-ng/scripts/default-hooks.js","webpack:///./widget-bbm-notification-center-ng/scripts/view-model/index.js","webpack:///./widget-bbm-notification-center-ng/scripts/view-model/initial-state.js","webpack:///./widget-bbm-notification-center-ng/scripts/view-model/list.js","webpack:///./widget-bbm-notification-center-ng/scripts/view-model/helpers.js","webpack:///./widget-bbm-notification-center-ng/scripts/view-model/notification.js","webpack:///./widget-bbm-notification-center-ng/scripts/service.js","webpack:///./widget-bbm-notification-center-ng/scripts/events.js","webpack:///./widget-bbm-notification-center-ng/scripts/constants.js"],"names":["defaultHooks","moduleKey","hooksKey","eventServiceKey","serviceKey","viewModelKey","angular","module","modelModuleKey","widgetModuleKey","eventBusModuleKey","intentModuleKey","stateContainerModuleKey","bbExtensionHelpersModuleKey","bbExtensionEventsModuleKey","bbExtensionIntentsModuleKey","factory","eventBusKey","widgetEvents","bbStateContainerKey","widgetKey","createViewModel","modelNotificationsKey","createService","extensionHelpersContextKey","bbIntentKey","bbIntent","service","extensionEventsContextKey","stateContainer","bus","extensionIntentsContextKey","controller","ListController","DetailsController","run","viewModel","bbIntents","eventBus","widget","init","then","publish","Event","CXP_ITEM_LOADED","id","getId","BB_ITEM_LOADED","name","NotificationsListController","$onInit","setNotifications","NotificationsDetailsController","processRequestParams","processReloadRequestParams","params","DEFAULT_PAGE_SIZE","stateParams","pageSize","getLongPreference","initialState","createAction","state","getState","list","notification","data","error","loading","notifications","requestParams","from","size","totalCount","beforeLoad","afterLoadSuccess","response","afterLoadError","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","uiError","message","code","setNotification","afterNotificationReadStatusChangeSuccess","readStatus","read","afterNotificationReadStatusChangeError","beforeNotificationDelete","afterNotificationDeleteSuccess","afterNotificationDeleteError","model","hooks","events","getRequestParams","createSelector","getNotifications","getSelectedNotification","isAllNotificationsLoaded","Boolean","length","getNextRequestParams","getReloadRequestParams","recalculateRequestParams","Math","floor","uniqueArray","array","filter","itemOuter","index","findIndex","itemInner","appendNotifications","replaceNotifications","loadNotifications","load","mergeFn","catch","loadMoreNotifications","loadMoreNotificationsPromise","reloadNotifications","reloadRequestParams","setSelectedNotification","deleteNotification","deleteRecord","notificationId","setNotificationReadStatus","String","putReadRecord","toggleNotificationReadStatus","currentRead","Promise","resolve","AFTER_NOTIFICATION_CHANGE_READ_SUCCESS","BEFORE_NOTIFICATION_DELETE","AFTER_NOTIFICATION_DELETE_SUCCESS","AFTER_NOTIFICATION_DELETE_ERROR"],"mappings":"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","file":"widget-bbm-notification-center-ng/scripts/widget-bbm-notification-center-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"), require(\"lib-bb-extension-intents-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bbm-notification-center-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-model-errors\", \"model-bb-notifications-ng\", \"lib-bb-intent-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-state-container-ng\", \"lib-bb-extension-helpers-ng\", \"lib-bb-extension-events-ng\", \"lib-bb-extension-intents-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bbm-notification-center-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"), require(\"lib-bb-extension-intents-ng\"));\n\telse\n\t\troot[\"widget-bbm-notification-center-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-model-errors\"], root[\"model-bb-notifications-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"lib-bb-extension-events-ng\"], root[\"lib-bb-extension-intents-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_42__, __WEBPACK_EXTERNAL_MODULE_44__, __WEBPACK_EXTERNAL_MODULE_45__, __WEBPACK_EXTERNAL_MODULE_47__, __WEBPACK_EXTERNAL_MODULE_60__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_71__, __WEBPACK_EXTERNAL_MODULE_72__, __WEBPACK_EXTERNAL_MODULE_73__, __WEBPACK_EXTERNAL_MODULE_74__, __WEBPACK_EXTERNAL_MODULE_75__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35bfb9b1c80b5da44aff","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bbm-notification-center-ng/model.xml\n// module id = 0\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_42__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 42\n// module chunks = 6 7 8 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_44__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 44\n// module chunks = 6 12","module.exports = __WEBPACK_EXTERNAL_MODULE_45__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 45\n// module chunks = 6 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_47__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 47\n// module chunks = 6 9 10 12","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-notifications-ng\"\n// module id = 60\n// module chunks = 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_61__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 61\n// module chunks = 9 10 11 12","/**\n * @module widget-bbm-notification-ng\n *\n * @description\n * Mobile notifications widget.\n */\nimport angular from 'vendor-bb-angular';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport modelModuleKey, { modelNotificationsKey } from 'model-bb-notifications-ng';\n\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\n\nimport bbExtensionEventsModuleKey, {\n  extensionEventsContextKey,\n} from 'lib-bb-extension-events-ng';\n\nimport bbExtensionIntentsModuleKey, {\n  extensionIntentsContextKey,\n} from 'lib-bb-extension-intents-ng';\n\nimport ListController from './controllers/list.controller';\nimport DetailsController from './controllers/details.controller';\nimport * as defaultHooks from './default-hooks';\nimport createViewModel from './view-model/index';\nimport createService from './service';\nimport widgetEvents from './events';\nimport { Event } from './constants';\n\nconst moduleKey = 'widget-bbm-notification-center-ng';\nconst hooksKey = `${moduleKey}:hooks`;\nconst eventServiceKey = `${moduleKey}:events`;\nconst serviceKey = `${moduleKey}:service`;\nconst viewModelKey = `${moduleKey}:viewModel`;\n\nexport default angular\n  .module(moduleKey, [\n    modelModuleKey,\n    widgetModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n    stateContainerModuleKey,\n    bbExtensionHelpersModuleKey,\n    bbExtensionEventsModuleKey,\n    bbExtensionIntentsModuleKey,\n  ])\n  .factory(hooksKey, extendHooks(defaultHooks))\n  .factory(eventServiceKey, [\n    eventBusKey,\n    /* into */\n    widgetEvents,\n  ])\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    widgetKey,\n    hooksKey,\n    /* into */\n    createViewModel,\n  ])\n  .factory(serviceKey, [\n    modelNotificationsKey,\n    viewModelKey,\n    hooksKey,\n    bbStateContainerKey,\n    eventServiceKey,\n    /* into */\n    createService,\n  ])\n  .factory(extensionHelpersContextKey, [\n    bbIntentKey,\n    serviceKey,\n    (bbIntent, service) => ({ bbIntent, service }),\n  ])\n  .factory(extensionEventsContextKey, [\n    bbIntentKey,\n    bbStateContainerKey,\n    serviceKey,\n    eventBusKey,\n    (bbIntent, stateContainer, service, bus) => ({\n      bbIntent,\n      stateContainer,\n      service,\n      bus,\n    }),\n  ])\n  .factory(extensionIntentsContextKey, [\n    serviceKey,\n    (service) => ({ service }),\n  ])\n  .controller('NotificationsListController', [\n    serviceKey,\n    /* into */\n    ListController,\n  ])\n  .controller('NotificationsDetailsController', [\n\n    /* into */\n    DetailsController,\n  ])\n  .run([\n    viewModelKey,\n    bbIntentKey,\n    eventBusKey,\n    widgetKey,\n    (viewModel, bbIntents, eventBus, widget) => {\n      viewModel.init();\n\n      bbIntents.init()\n        .then(() => {\n          /**\n           * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n           * and will be removed with the update to widget collection 3 (WC3)\n           */\n          eventBus.publish(Event.CXP_ITEM_LOADED, {\n            id: widget.getId(),\n          });\n\n          eventBus.publish(Event.BB_ITEM_LOADED, {\n            id: widget.getId(),\n          });\n        });\n    },\n  ])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_71__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 71\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_72__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 72\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_73__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 73\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_74__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-events-ng\"\n// module id = 74\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_75__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-intents-ng\"\n// module id = 75\n// module chunks = 12","/**\n * @name NotificationsListController\n * @ngkey NotificationsListController\n * @type {object}\n * @description\n * Notifications widget list controller\n */\nexport default function NotificationsListController(service) {\n  /**\n   * @description\n   * Widget initialization logic - called automatically during the angular cycle.\n   *\n   * @name NotificationsListController#$onInit\n   * @type {function}\n   */\n  const $onInit = () => (\n    service.setNotifications()\n  );\n\n  return {\n    /* Lifecycle hooks */\n    $onInit,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/controllers/list.controller.js","/**\n * @name NotificationsDetailsController\n * @ngkey NotificationsDetailsController\n * @type {object}\n * @description\n * Notifications widget details controller\n */\nexport default function NotificationsDetailsController() {}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/controllers/details.controller.js","/* eslint-disable import/prefer-default-export */\n\n/**\n * @description\n * Hooks for widget-bbm-notification-center-ng.\n *\n * @name defaultHooks\n * @type {Object}\n */\n\n/**\n * @name defaultHooks#processRequestParams\n * @type {function}\n *\n * @description\n * Default hook for notifications query params processing/extending\n *\n * @param {object} params to process\n * @param {?number} params.from The page to list from\n * @param {?number} params.size The number of results per page\n * @returns {Object} Processed params\n */\nexport function processRequestParams(params) {\n  return params;\n}\n\n/**\n * @name defaultHooks#processReloadRequestParams\n * @type {function}\n *\n * @description\n * Default hook for notifications reloading query params processing/extending\n *\n * @param {object} params to process\n * @param {?number} params.from The page to list from\n * @param {?number} params.size The number of results per page\n * @returns {Object} Processed params\n */\nexport function processReloadRequestParams(params) {\n  return params;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/default-hooks.js","// Combine state reducers\nimport createInitialState from './initial-state';\nimport createListReducers from './list';\nimport createNotificationReducers from './notification';\n\n/**\n * Defines the default page size for the notifications page\n * @type {number}\n * @inner\n */\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport default (stateContainer, widget) => {\n  const stateParams = {\n    pageSize: widget.getLongPreference('bb.notification.pageSize') || DEFAULT_PAGE_SIZE,\n  };\n\n  const initialState = createInitialState(stateParams);\n\n  /**\n   * @name ViewModel\n   * @type {object}\n   * @ngKey widget-bb-notifications-ng:viewModel\n   * @inner\n   */\n  return {\n    /**\n     * @name ViewModel#init\n     * @description Initialises view model with initial state\n     * @type {function}\n     * @inner\n     * @return {ViewState}\n     */\n    init: stateContainer.createAction((state = initialState) => state),\n\n    /**\n     * @name ViewModel#getState\n     * @description Returns view state\n     * @type {function}\n     * @inner\n     * @return {ViewState}\n     */\n    getState: stateContainer.getState,\n\n    /**\n     * @name ViewModel#list\n     * @description\n     * Actions for updating the parts of the `ViewState` related to notifications list\n     * @type {ViewModelListActions}\n     * @inner\n     */\n    list: createListReducers(stateContainer),\n\n    /**\n     * @name ViewModel#notification\n     * @description\n     * Actions for updating the parts of the `ViewState` related to notification state\n     * @type {ViewModelNotificationActions}\n     * @inner\n     */\n    notification: createNotificationReducers(stateContainer),\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/view-model/index.js","export default params => ({\n  notification: {\n    data: null,\n    error: null,\n    loading: false,\n  },\n  notifications: {\n    data: null,\n    error: null,\n    loading: false,\n    requestParams: {\n      from: null,\n      size: params.pageSize,\n    },\n    totalCount: 0,\n  },\n});\n\n/**\n * @typedef {Object} ViewState\n * @description\n * The current state of the [ViewModel]{@link module:lib-bb-view-model-ng}.\n *\n * @property {Object} notification\n * @property {Object} notification.data Current notification object\n * @property {Object} notification.error The last encountered error\n * @property {String} notification.error.message Error message\n * @property {boolean} notification.loading Indicates if the notification is being loaded\n *\n * @property {Object} notifications\n * @property {Object[]} notifications.data Collection of notifications\n * @property {Object} notifications.error The last encountered error\n * @property {string} notifications.error.message Error message\n * @property {boolean} notifications.loading Indicates if notifications are loading at the moment\n * @property {RequestParams}\n * notifications.requestParams A set of request params for loading notifications\n * @property {number} notifications.totalCount Total number of notifications\n */\n\n/**\n * @typedef {Object} RequestParams\n * @description\n * A set of request params that defines how to load the requested data.\n *\n * @property {number} from The current page (0 indexed), null from the start\n * @property {number} pageSize The number of notifications in the page\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/view-model/initial-state.js","import { uiError } from './helpers';\n\nexport default stateContainer => ({\n  /**\n   * @name ViewModelListActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelListActions#beforeLoad\n   * @description Update the `ViewState` before loading notifications\n   * @type {function}\n   * @inner\n   * @return {void}\n   */\n  init: stateContainer.createAction(state => ({\n    ...state,\n    notifications: {\n      ...state.notifications,\n      data: null,\n      error: null,\n      loading: false,\n      requestParams: {\n        ...state.notifications.requestParams,\n        from: null,\n      },\n      totalCount: 0,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#beforeLoad\n   * @description Update the `ViewState` before loading notifications\n   * @type {function}\n   * @inner\n   * @return {void}\n   */\n  beforeLoad: stateContainer.createAction(state => ({\n    ...state,\n    notifications: {\n      ...state.notifications,\n      error: null,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterLoadSuccess\n   * @description Update the `ViewState` after successfully loading notifications\n   * @type {function}\n   * @inner\n   * @param {NotificationsResponse} response Notifications load response\n   * @return {void}\n   */\n  afterLoadSuccess: stateContainer.createAction((state, response) => ({\n    ...state,\n    notifications: {\n      ...state.notifications,\n      data: response.data,\n      error: null,\n      loading: false,\n      requestParams: {\n        ...state.notifications.requestParams,\n        from: response.requestParams.from,\n      },\n      totalCount: response.totalCount,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterLoadError\n   * @description Update the `ViewState` after unsuccessful notifications load\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @return {void}\n   */\n  afterLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    notifications: {\n      ...state.notifications,\n      error: uiError(error),\n      loading: false,\n    },\n  })),\n});\n\n/**\n * @typedef {object} NotificationsResponse\n * @property {object[]} data Loaded notifications array\n * @property {number} totalCount Total number of notifications\n * @property {LoadRequestParams} requestParams Request parameters object\n */\n\n/**\n * @typedef {object} LoadRequestParams\n * @property {number} from Page number to load\n * @property {number} size Page size to load\n * @property {string} productId Product ID of notifications to load\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/view-model/list.js","/* eslint-disable import/prefer-default-export */\nimport { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\nconst errorMessages = {\n  [E_AUTH]: 'model.error.auth',\n  [E_CONNECTIVITY]: 'model.error.connectivity',\n  [E_USER]: 'model.error.user',\n  [E_UNEXPECTED]: 'model.error.unexpected',\n};\n\nexport const uiError = error => ({\n  message: errorMessages[error.code],\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/view-model/helpers.js","import { uiError } from './helpers';\n\nexport default stateContainer => ({\n  /**\n   * @name ViewModelNotificationActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelNotificationActions#setNotification\n   * @description Update the `ViewState` with the selected notification\n   * @type {function}\n   * @inner\n   * @param {object} data Notification object\n   * @return {void}\n   */\n  setNotification: stateContainer.createAction((state, data) => ({\n    ...state,\n    notification: {\n      ...state.notification,\n      data,\n    },\n  })),\n\n  /**\n   * @name ViewModelNotificationActions#afterNotificationReadStatusChangeSuccess\n   * @description Update the `ViewState` with the read status\n   * @type {function}\n   * @inner\n   * @param {object} readStatus The read status of the notification\n   * @return {void}\n   */\n  afterNotificationReadStatusChangeSuccess: stateContainer.createAction((state, readStatus) => ({\n    ...state,\n    notification: {\n      ...state.notification,\n      data: {\n        ...state.notification.data,\n        read: readStatus,\n      },\n    },\n  })),\n\n  /**\n   * @name ViewModelNotificationActions#afterNotificationReadStatusChangeError\n   * @description Update the `ViewState` after an unsuccessful read status change\n   * @type {function}\n   * @inner\n   * @param {module:model-bb-notification-ng.ModelError} error Response error\n   * @return {void}\n   */\n  afterNotificationReadStatusChangeError: stateContainer.createAction((state, error) => ({\n    ...state,\n    notification: {\n      ...state.notification,\n      loading: false,\n      error: uiError(error),\n    },\n  })),\n\n  /**\n   * @name ViewModelNotificationActions#beforeNotificationDelete\n   * @description Update the `ViewState` before a notification is submitted to delete.\n   * @type {function}\n   *\n   * @return {void}\n   * @inner\n   */\n  beforeNotificationDelete: stateContainer.createAction(state => ({\n    ...state,\n    notification: {\n      ...state.notification,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelNotificationActions#afterNotificationDeleteSuccess\n   * @description Update the `ViewState` after a successful notification delete.\n   * @type {function}\n   *\n   * @param {module:model-bb-notifications-ng.Notification} notification\n   * @return {void}\n   * @inner\n   */\n  afterNotificationDeleteSuccess: stateContainer.createAction(state => ({\n    ...state,\n    notification: {\n      data: null,\n      loading: false,\n      error: null,\n    },\n  })),\n\n  /**\n   * @name ViewModelNotificationActions#afterNotificationDeleteError\n   * @description Update the `ViewState` after an unsuccessful notification delete.\n   * @type {function}\n   *\n   * @param {module:model-bb-notifications-ng.ModelError} error Response error\n   * @return {void}\n   * @inner\n   */\n  afterNotificationDeleteError: stateContainer.createAction((state, error) => ({\n    ...state,\n    notification: {\n      ...state.notification,\n      loading: false,\n      error: uiError(error),\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/view-model/notification.js","/* global window */\n/**\n * @name NotificationService\n * @type {Object}\n * @ngkey widget-bbm-notifications-ng:service\n * @description\n * The service encapsulates the core functionality of the Notifications\n * Widget. It co-ordinates the communication of data from the `Model`\n * with the communication with the user by updating the {@link ViewState}.\n *\n * Asynchronous methods update the {@link ViewState} in 3 potential\n * stages; \"before\", \"success\", and \"error\", to allow the view to\n * provide feedback to the user.\n */\n\n/**\n * @name createNotificationService\n * @inner\n * @type {function}\n * @param {module:model-bb-notifications-ng.notificationsModel} model Notifications model\n * @param {ViewModel} viewModel\n * @param {defaultHooks} hooks\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {widgetEvents} events\n * @return {NotificationService}\n */\nexport default (model, viewModel, hooks, stateContainer, events) => {\n  /**\n   * @name getRequestParams\n   * @type {function}\n   * @description\n   * returns the request params from the state\n   * @returns {Object} requestParams Request params from the state\n   * @inner\n   */\n  const getRequestParams = stateContainer.createSelector(\n    state => state.notifications.requestParams\n  );\n\n  /**\n   * @name getNotifications\n   * @type {function}\n   * @description\n   * returns the current list of `notifications`\n   * @returns {Array} notifications List of notifications from the state\n   * @inner\n   */\n  const getNotifications = stateContainer.createSelector(\n    state => state.notifications.data\n  );\n\n  /**\n   * @name getSelectedNotification\n   * @type {function}\n   * @description\n   * returns the current selected `notification`\n   * @returns {Object} notification Notification from the state\n   * @inner\n   */\n  const getSelectedNotification = stateContainer.createSelector(\n    state => state.notification.data\n  );\n\n  /**\n   * @name isAllNotificationsLoaded\n   * @type {function}\n   * @description\n   * Calculates if all the notifications have been loaded\n   * @returns {boolean}\n   * @inner\n   */\n  const isAllNotificationsLoaded = stateContainer.createSelector(state => Boolean(\n    state.notifications.data &&\n    state.notifications.data.length >= state.notifications.totalCount\n  ));\n\n  /**\n   * @name getNextRequestParams\n   * @type {function}\n   * @description\n   * Calculates the request params to load the data for the next request.\n   * Note: It also calculates the data for the first request. Therefore the\n   *       Initial from params need to be null and not 0.\n   * @returns {Object} params Processed request params\n   * @inner\n   */\n  const getNextRequestParams = () => {\n    const requestParams = getRequestParams();\n\n    const from = requestParams.from === null ? 0 : requestParams.from + 1;\n    const size = requestParams.size;\n\n    return hooks.processRequestParams({\n      from,\n      size,\n    });\n  };\n\n  /**\n   * @name getReloadRequestParams\n   * @type {function}\n   * @description\n   * Calculates the request params to load the data for the next request.\n   * Note: It also calculates the data for the first request. Therefore the\n   *       Initial from params need to be null and not 0.\n   * @returns {Object} params Processed request params\n   * @inner\n   */\n  const getReloadRequestParams = () => {\n    const requestParams = getRequestParams();\n\n    const from = 0;\n    const size = requestParams.from === null\n      ? requestParams.size\n      : requestParams.size * (requestParams.from + 1);\n\n    return hooks.processReloadRequestParams({\n      from,\n      size,\n    });\n  };\n\n  /**\n   * @name recalculateRequestParams\n   * @type {function}\n   * @description\n   * Recalculates the request params to load the data for the next request.\n   * @returns {Object} data Data used to calculate the request params\n   * @inner\n   */\n  const recalculateRequestParams = data => {\n    const requestParams = getRequestParams();\n\n    const from = Math.floor(data.length / requestParams.size);\n    const size = requestParams.size;\n\n    return hooks.processRequestParams({\n      from,\n      size,\n    });\n  };\n\n  /**\n   * @name appendNotifications\n   * @type {function}\n   * @description\n   * Creates a duplicate-free version of an array\n   * @param {Array} array Array of items\n   * @inner\n   */\n  const uniqueArray = (array) => (\n    array.filter((itemOuter, index) =>\n      array.findIndex((itemInner) =>\n        itemOuter.id === itemInner.id) === index\n    )\n  );\n\n  /**\n   * @name appendNotifications\n   * @type {function}\n   * @description\n   * Appends the given list of `notifications` to the current list of `notifications`\n   * if this function is used as a merge strategy function\n   * @param {Array} notifications List of `notifications`\n   * @returns {Array} notifications Merged list of `notifications`\n   * @inner\n   */\n  const appendNotifications = notifications => uniqueArray(\n    [...getNotifications() || [], ...notifications]\n  );\n\n  /**\n   * @name replaceNotifications\n   * @type {function}\n   * @description\n   * Returns the given list of `notifications` immediately and therefore replaces\n   * the list of `notifications` if this function is used as a merge strategy function\n   * @param {Array} notifications List of `notifications`\n   * @returns {Array} notifications List of `notifications`\n   * @inner\n   */\n  const replaceNotifications = notifications => notifications;\n\n  /**\n   * @name loadNotifications\n   * @type {function}\n   * @description\n   * Fetch a `page` of `notifications` from the model and\n   * update the {@link ViewState} to display them.\n   * @param {function} mergeFn function defining the merge strategy\n   * @returns {Promise}\n   * @inner\n   */\n  const loadNotifications = mergeFn => {\n    const requestParams = getNextRequestParams();\n\n    viewModel.list.beforeLoad();\n\n    return model.load(requestParams)\n      .then(({ data, totalCount }) => {\n        viewModel.list.afterLoadSuccess({\n          data: mergeFn(data),\n          requestParams,\n          totalCount,\n        });\n      })\n      .catch(error => {\n        viewModel.list.afterLoadError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name NotificationService#loadMoreNotifications\n   * @type {function}\n   * @description\n   * Loads more `notifications` for the currently selected product.\n   */\n  const loadMoreNotifications = (() => {\n    let loadMoreNotificationsPromise;\n\n    return () => {\n      if (loadMoreNotificationsPromise || isAllNotificationsLoaded()) {\n        return loadMoreNotificationsPromise;\n      }\n\n      loadMoreNotificationsPromise = loadNotifications(appendNotifications)\n        .then(() => {\n          loadMoreNotificationsPromise = null;\n        })\n        .catch(error => {\n          loadMoreNotificationsPromise = null;\n          throw error;\n        });\n\n      return loadMoreNotificationsPromise;\n    };\n  })();\n\n  /**\n   * @name reloadNotifications\n   * @type {function}\n   * @description\n   * Fetch a `page` of `notifications` from the model and\n   * update the {@link ViewState} to display them.\n   * @returns {Promise}\n   * @inner\n   */\n  const reloadNotifications = () => {\n    const reloadRequestParams = getReloadRequestParams();\n\n    viewModel.list.beforeLoad();\n\n    return model.load(reloadRequestParams)\n      .then(({ data, totalCount }) => {\n        viewModel.list.afterLoadSuccess({\n          data: replaceNotifications(data),\n          requestParams: recalculateRequestParams(data),\n          totalCount,\n        });\n      })\n      .catch(error => {\n        viewModel.list.afterLoadError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name NotificationService#setSelectedNotification\n   * @type {function}\n   * @description\n   * Sets the selected notification and updates the {@link ViewState} to display it.\n   * @param {Object} notification Notification to select\n   */\n  const setSelectedNotification = notification => {\n    viewModel.notification.setNotification(notification);\n  };\n\n  /**\n   * @name NotificationService#setNotifictations\n   * @type {function}\n   * @description\n   * Sets the notifications and updates the {@link ViewState} to display them.\n   */\n  const setNotifications = () => {\n    viewModel.list.init();\n\n    return loadNotifications(replaceNotifications);\n  };\n\n  /**\n   * @name NotificationService#deleteNotification\n   * @type {function}\n   * @description\n   * Deletes the notification\n   * @param {Object} notificationId Id of the notification to delete\n   */\n  const deleteNotification = notificationId => {\n    viewModel.notification.beforeNotificationDelete();\n    events.beforeNotificationDelete();\n\n    return model.deleteRecord(notificationId)\n      .then(() => {\n        viewModel.notification.afterNotificationDeleteSuccess(notificationId);\n        events.afterNotificationDeleteSuccess(notificationId);\n      })\n      .catch(error => {\n        viewModel.notification.afterNotificationDeleteError(error);\n        events.afterNotificationDeleteError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name NotificationService#setNotificationReadStatus\n   * @type {function}\n   * @description\n   * Updates the read status of a notification\n   * @param {Object} notificationId Id of the notification to update\n   * @param {boolean} readStatus new read status for the notification\n   */\n  const setNotificationReadStatus = (notificationId, readStatus) => {\n    const id = String(notificationId);\n    const read = Boolean(readStatus);\n\n    return model.putReadRecord(id, { read })\n      .then(() => {\n        viewModel.notification.afterNotificationReadStatusChangeSuccess(read);\n        events.afterNotificationReadStatusChangeSuccess(id, read);\n      })\n      .catch(error => {\n        viewModel.notification.afterNotificationReadStatusChangeError(error);\n        throw error;\n      });\n  };\n\n  /**\n   * @name NotificationService#toggleNotificationReadStatus\n   * @type {function}\n   * @description\n   * Toggles the read status of a notification\n   * @param {Object} notification Notification to toggle the read status for\n   */\n  const toggleNotificationReadStatus = notification => {\n    if (notification) {\n      const currentRead = notification.read;\n      return setNotificationReadStatus(notification.id, !currentRead);\n    }\n\n    return Promise.resolve();\n  };\n\n  return {\n    deleteNotification,\n    getSelectedNotification,\n    loadMoreNotifications,\n    reloadNotifications,\n    setNotifications,\n    setNotificationReadStatus,\n    setSelectedNotification,\n    toggleNotificationReadStatus,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/service.js","import {\n  Event,\n} from './constants';\n\n/**\n * @description\n * Events for widget-bbm-notification-center-ng.\n *\n * @name Events\n * @type {function}\n */\nexport default (bus) => ({\n  afterNotificationReadStatusChangeSuccess(id, read) {\n    bus.publish(Event.AFTER_NOTIFICATION_CHANGE_READ_SUCCESS, { id, read });\n  },\n\n  beforeNotificationDelete() {\n    bus.publish(Event.BEFORE_NOTIFICATION_DELETE);\n  },\n\n  afterNotificationDeleteSuccess(notification) {\n    bus.publish(Event.AFTER_NOTIFICATION_DELETE_SUCCESS, { notification });\n  },\n\n  afterNotificationDeleteError(error) {\n    bus.publish(Event.AFTER_NOTIFICATION_DELETE_ERROR, { error });\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/events.js","/* eslint-disable import/prefer-default-export */\nexport const Event = {\n  /**\n   * The widget is bootstrapped (data may not be loaded).\n   * @event cxp.item.loaded\n   * @type {string}\n   * @property {string} id The widget ID\n   */\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n\n  /**\n   * The widget is bootstrapped (data may not be loaded).\n   * @event bb.item.loaded\n   * @type {string}\n   * @property {string} id The widget ID\n   */\n  BB_ITEM_LOADED: 'bb.item.loaded',\n\n  /**\n   * The read status of a notification has been changed\n   * @event bb.event.notification.read.change\n   * @type {string}\n   * @property {boolean} read The read status of the notification\n   */\n  AFTER_NOTIFICATION_CHANGE_READ_SUCCESS: 'bb.event.notification.read.change',\n\n  /**\n   * A notification is submitted for deletion from the server\n   * @event bb.event.notification.delete.start\n   * @type {string}\n   */\n  BEFORE_NOTIFICATION_DELETE: 'bb.event.notification.delete.start',\n\n  /**\n   * A notification is deleted on the server\n   * @event bb.event.notification.delete.done\n   * @property {module:model-bb-notifications-ng.Contact} notification\n   * @type {string}\n   */\n  AFTER_NOTIFICATION_DELETE_SUCCESS: 'bb.event.notification.delete.done',\n\n  /**\n   * A notification fails to be deleted on the server\n   * @event bb.event.notification.delete.failed\n   * @type {string}\n   * @property {module:lib-bb-model-ng.ModelError} error\n   */\n  AFTER_NOTIFICATION_DELETE_ERROR: 'bb.event.notification.delete.failed',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/constants.js"],"sourceRoot":""}