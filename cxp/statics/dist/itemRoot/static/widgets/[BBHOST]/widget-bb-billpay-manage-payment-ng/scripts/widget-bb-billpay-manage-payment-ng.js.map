{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*********","webpack:///webpack/bootstrap f3d2485eec67eb2fdf62?1eb6*********","webpack:///./widget-bb-billpay-manage-payment-ng/model.xml","webpack:///external \"lib-bb-model-errors\"?7567*","webpack:///external \"vendor-bb-angular\"?a114**","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-event-bus-ng\"?8215","webpack:///external \"lib-bb-widget-extension-ng\"?b547","webpack:///external \"lib-bb-intent-ng\"?add1","webpack:///external \"lib-bb-state-container-ng\"?8d56","webpack:///external \"lib-bb-storage-ng\"?d742","webpack:///external \"lib-bb-extension-helpers-ng\"?e731","webpack:///external \"model-bb-billpay-ng\"?1f93","webpack:///external \"lib-bb-billpay-errors\"?3df2","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/index.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/pay-a-bill-controller.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/datepicker-controller.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/recurring-controller.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/edit-payment-controller.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/constants.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/service.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/date-service.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/account-service.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/payment-service.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/expedited-service.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/view-model.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/helpers.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/default-hooks.js","webpack:///./widget-bb-billpay-manage-payment-ng/scripts/events.js"],"names":["moduleKey","hooksKey","serviceKey","dateServiceKey","accountServiceKey","paymentServiceKey","expeditedServiceKey","eventServiceKey","viewModelKey","errorHelperUtilitiesKey","errorHookUtilitiesKey","angular","module","widgetModuleKey","eventBusModuleKey","modelBillpayModuleKey","bbExtensionHelpersModuleKey","stateContainerModuleKey","bbIntentModuleKey","bbStorageModuleKey","factory","eventBusKey","widgetEvents","defaultHooks","ErrorHelperUtilities","ErrorHookUtilities","modelBillpayKey","widgetKey","bbStorageServiceKey","ManagePaymentService","DateService","AccountService","ExpeditedService","PaymentService","bbStateContainerKey","ManagePaymentViewModel","extensionHelpersContextKey","bbIntentKey","managePaymentService","dateService","accountService","paymentService","expeditedService","bbIntent","errorHelperUtilities","managePaymentViewModel","controller","PayABillController","DatepickerController","RecurringController","EditPaymentController","run","eventBus","service","subscribe","getPayeesSummary","catch","name","bus","widget","stateContainer","BillpaySummaryNotification","displayNotification","notificationStatus","notificationMessage","clear","set","status","message","display","$ctrl","viewState","notification","getInitData","newPayeeId","getAccounts","$onInit","state","copy","publish","id","getId","handle","payee","intentNotification","undefined","initHandler","init","Object","assign","datepickerAllowedKeys","RUSH_CSS_CLASS","datepickerAllowedKeyCodes","keys","datepickerAllowedKeyValues","map","key","filter","value","index","arr","indexOf","datepickerKeyDown","event","preventDefault","which","keyCode","isDatepickerPastDate","date","isDateInPast","isDatepickerInvalidDate","isDayDisabledRush","mode","getDatepickerError","datepicker","$viewValue","$modelValue","isDatepickerValidFormat","isValidDate","options","showWeeks","todaysDate","getDateNow","currencyCode","getCurrencyCode","formatMonth","setOptions","customOptions","datepickerDateFormat","openDatepicker","holder","isOpen","rushIsAvailable","newPayment","paymentServicesObj","paymentDate","isRushing","isDateRush","rushHasBeenChosen","rushDatepickerOptions","showWaivedFees","exposeFee","hasFeeBeenWaived","customClass","dateDisabled","rushFee","getExpeditedFee","rush","available","fee","isNaN","finalPaymentDatepickerOptions","isWeekend","isBadFirstPaymentDate","firstPaymentDatepickerOptions","datepickerError","form","datepickerHasError","datepickerErrorClass","bbStorage","getState","STORAGE_PAYEE_ID","initialPayeeId","resetNewPayment","account","paymentAmount","currency","fromDate","toDate","frequency","frequencyEnd","numberOfInstances","finalPaymentDate","alert","paymentScheduledAlert","paymentSentAlert","modelExpirationAlert","getInitialPayee","payees","find","updatePaymentDateForNewPayee","minDate","REGULAR_PAYMENT","Date","nextPaymentDate","minPaymentDate","initPayee","existingPayee","initialPayee","setPayeeToStorage","payeeId","setItem","retrievePayeeFromStorage","getItem","then","clearPayeeFromStorage","removeItem","accounts","firstAccount","summaryIntent","create","callIntentResponse","returnToPreviousScreen","data","cancelConfirm","updatePayment","payment","length","acct","accountNumber","paymentAccountNumber","newPayee","pyee","displayName","nickName","payeeName","getServerDate","parseFloat","paymentMemo","paymentAccount","useStateFromStorage","STORAGE_PAYMENT_ID","paymentId","getPayment","respond","viewModel","model","events","transformPaymentData","payeeID","accountType","routingNumber","overnightDeliveryAddress","address1","address2","city","postalCode","trim","transformPaymentsData","payments","beforeGetPayeesSummary","response","afterGetPayeesSummarySuccess","payeeSummaries","error","afterGetPayeesSummaryError","beforeGetAccounts","afterGetAccountsSuccess","afterGetAccountsError","getStringPreference","postPaymentsRecord","transformedPayments","handleSuccess","afterPostPaymentsRecordSuccess","beforePostPaymentsRecord","afterPostPaymentsRecordError","postRecurringPaymentsRecord","beforePostRecurringPaymentsRecord","afterPostRecurringPaymentsRecordSuccess","afterPostRecurringPaymentsRecordError","putPaymentRecord","transformedPayment","afterPutPaymentRecordSuccess","beforePutPaymentRecord","afterPutPaymentRecordError","now","MS_PER_DAY","DATE_FORMAT_REGEXP","SEMI_MONTHLY_DAY_INTERVAL","DAYS_IN_WEEK","DAYS_IN_BIWEEK","SEMI_PERIOD_ITERATIONS","MONTHS_IN_SEMI_ANNUAL","MONTHS_IN_QUARTER","discardTime","UTC","getFullYear","getMonth","getDate","test","getTime","dateDiffInDays","date1","date2","TypeError","utc1","utc2","Math","floor","isLastDayOfMonth","originalDate","nextMonth","firstDayNextMonth","dateDiffInFullMonths","date1DayOfMonth","date2DayOfMonth","lastMonthIsFull","datesAreBothLastDaysOfMonth","date2FallsBeforeDate1ButAtEndOfMonth","months","monthDifferenceValid","dateDiffInFullYears","monthsDiff","getDateTodayPlusAYear","today","setDate","getAsDate","str","areSameDate","e","isDateBefore","dateToTest","referenceDate","isDateBeforeOrSame","isDateAfterOrSame","getDay","getRegularPaymentDate","cutoffTime","earliestPaymentDate","getRegularEarliestPaymentDate","isDateInRushPeriodAndNotWeekend","dateToCheck","rushDateStr","regularDateStr","rushDate","regularDate","isDateRushNoCutOff","isExpedited","getEarliestPaymentDate","isDateRushCutoff","getPaymentDate","addDay","days","newDate","valueOf","atLeastOneDateIsValidInRushPeriod","diff","datesToCheck","Array","from","v","i","some","dt","hasRushPeriod","isDateSelectable","firstRegularDate","isInvalidDate","isPastDate","isWeekendDate","checkForFinalPaymentMonthSkip","isDateAfterAYear","isAfterAYear","rawDate","matches","match","year","month","day","getFirstFreePaymentDate","rushPayment","hasWaivedRush","convertDateToServerDayString","dayStr","toString","monthStr","showFinalRecurringPaymentDate","showFinalRecurringPaymentDateAndNumInstances","getFinalRecurringPaymentDate","numberOfExtraInstances","transformFinalPaymentDate","weekly","monthsToAdd","daysToAdd","setMonth","monthly","quarterly","annually","setFullYear","finalPaymentDateDayOfWeek","finalPaymentDateDayOfMonth","calculateNumberOfInstances","getNumberOfInstancesFromDates","dateDiffInMonths","expectedLastDate","expectedNextDate","isNextDateAvailable","obfuscateAccountNumber","accNo","substring","accountNameOrNumber","accountNickName","obfuscatedAccountNumber","accountNameAndNumber","summarisePayments","reduce","paymentData","pd","newPaymentValue","paymentsByAccount","total","rushFeeTotal","rushUsed","push","payeeDisplayName","paymentFee","hasBeenUsed","beforeGetPayment","afterGetPaymentSuccess","afterGetPaymentError","EXPEDITED_PAYMENT","OVERNIGHT_CHECK","getCutoffTime","getBooleanPreference","hooks","errorHookUtilities","setState","addPaymentServicesObj","paymentServices","services","paymentServiceType","addNewPaymentObj","createAction","current","isLoadingPayees","isNewPayee","transformPayee","isLoadingAccounts","paymentAccounts","longDisplayName","transformAccount","postPaymentsError","isPostingPayment","paymentsSummary","addPaymentErrors","isPostingRecurringPayments","postRecurringPaymentsError","postingRecurringPaymentsComplete","newRecurringPaymentsId","errorMap","thisError","transformErrorMap","getErrorMap","errors","isLoadingPayment","transformPayment","putPaymentError","isPuttingPayment","clearBackendError","inputName","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","uiError","modelError","code","identity","any","Events","BEFORE_GET_ACCOUNTS","AFTER_GET_ACCOUNTS","AFTER_GET_ACCOUNTS_ERROR","BEFORE_GET_PAYEES_SUMMARY","AFTER_GET_PAYEES_SUMMARY","AFTER_GET_PAYEES_SUMMARY_ERROR","BEFORE_POST_PAYMENTS_RECORD","AFTER_POST_PAYMENTS_RECORD","AFTER_POST_PAYMENTS_RECORD_ERROR","BEFORE_POST_RECURRING_PAYMENTS_RECORD","AFTER_POST_RECURRING_PAYMENTS_RECORD","AFTER_POST_RECURRING_PAYMENTS_RECORD_ERROR","BEFORE_GET_PAYMENT","AFTER_GET_PAYMENT","AFTER_GET_PAYMENT_ERROR","BEFORE_PUT_PAYMENT","AFTER_PUT_PAYMENT","AFTER_PUT_PAYMENT_ERROR"],"mappings":"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","file":"widget-bb-billpay-manage-payment-ng/scripts/widget-bb-billpay-manage-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lib-bb-model-errors\"), require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"model-bb-billpay-ng\"), require(\"lib-bb-billpay-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-billpay-manage-payment-ng\", [\"lib-bb-model-errors\", \"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-intent-ng\", \"lib-bb-state-container-ng\", \"lib-bb-storage-ng\", \"lib-bb-extension-helpers-ng\", \"model-bb-billpay-ng\", \"lib-bb-billpay-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-billpay-manage-payment-ng\"] = factory(require(\"lib-bb-model-errors\"), require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"model-bb-billpay-ng\"), require(\"lib-bb-billpay-errors\"));\n\telse\n\t\troot[\"widget-bb-billpay-manage-payment-ng\"] = factory(root[\"lib-bb-model-errors\"], root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"model-bb-billpay-ng\"], root[\"lib-bb-billpay-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_45__, __WEBPACK_EXTERNAL_MODULE_47__, __WEBPACK_EXTERNAL_MODULE_54__, __WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_56__, __WEBPACK_EXTERNAL_MODULE_57__, __WEBPACK_EXTERNAL_MODULE_58__, __WEBPACK_EXTERNAL_MODULE_59__, __WEBPACK_EXTERNAL_MODULE_60__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_62__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f3d2485eec67eb2fdf62","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-billpay-manage-payment-ng/model.xml\n// module id = 0\n// module chunks = 10","module.exports = __WEBPACK_EXTERNAL_MODULE_45__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 45\n// module chunks = 6 7 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_47__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 47\n// module chunks = 7 8 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_54__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 54\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 55\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_56__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 56\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 57\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_58__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 58\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_59__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 59\n// module chunks = 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 60\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_61__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-billpay-ng\"\n// module id = 61\n// module chunks = 9 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_62__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-billpay-errors\"\n// module id = 62\n// module chunks = 9 10","/**\n * @module widget-bb-billpay-manage-payment-ng\n *\n * @description\n * Billpay manage payment\n */\nimport angular from 'vendor-bb-angular';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\n\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\n\nimport modelBillpayModuleKey, {\n  modelBillpayKey,\n} from 'model-bb-billpay-ng';\n\nimport stateContainerModuleKey, {\n  bbStateContainerKey,\n} from 'lib-bb-state-container-ng';\n\nimport bbIntentModuleKey, {\n  bbIntentKey,\n} from 'lib-bb-intent-ng';\n\nimport bbStorageModuleKey, {\n  bbStorageServiceKey,\n} from 'lib-bb-storage-ng';\n\nimport { ErrorHelperUtilities, ErrorHookUtilities } from 'lib-bb-billpay-errors';\n\nimport PayABillController from './pay-a-bill-controller';\nimport DatepickerController from './datepicker-controller';\nimport RecurringController from './recurring-controller';\nimport EditPaymentController from './edit-payment-controller';\nimport ManagePaymentService from './service';\nimport DateService from './date-service';\nimport AccountService from './account-service';\nimport PaymentService from './payment-service';\nimport ExpeditedService from './expedited-service';\nimport ManagePaymentViewModel from './view-model';\n\n\nimport defaultHooks from './default-hooks';\nimport widgetEvents from './events';\n\nconst moduleKey = 'widget-bb-billpay-manage-payment-ng';\nconst hooksKey = `${moduleKey}:hooks`;\nconst serviceKey = `${moduleKey}:service`;\nconst dateServiceKey = `${moduleKey}:date-service`;\nconst accountServiceKey = `${moduleKey}:account-service`;\nconst paymentServiceKey = `${moduleKey}:payment-service`;\nconst expeditedServiceKey = `${moduleKey}:expedited-service`;\nconst eventServiceKey = `${moduleKey}:events`;\nconst viewModelKey = `${moduleKey}:view-model`;\nconst errorHelperUtilitiesKey = `${moduleKey}:errorHelperUtilities`;\nconst errorHookUtilitiesKey = `${moduleKey}:errorHookUtilities`;\n\nexport default angular\n  .module(moduleKey, [\n    widgetModuleKey,\n    eventBusModuleKey,\n    modelBillpayModuleKey,\n    bbExtensionHelpersModuleKey,\n    stateContainerModuleKey,\n    bbIntentModuleKey,\n    bbStorageModuleKey,\n  ])\n\n  .factory(eventServiceKey, [\n    eventBusKey,\n    /* into */\n    widgetEvents,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(errorHelperUtilitiesKey, [\n    /* into */\n    ErrorHelperUtilities,\n  ])\n\n  .factory(errorHookUtilitiesKey, [\n    /* into */\n    ErrorHookUtilities,\n  ])\n\n  .factory(serviceKey, [\n    viewModelKey,\n    modelBillpayKey,\n    eventServiceKey,\n    widgetKey,\n    bbStorageServiceKey,\n    /* into */\n    ManagePaymentService,\n  ])\n\n  .factory(dateServiceKey, [\n    expeditedServiceKey,\n    /* into */\n    DateService,\n  ])\n\n  .factory(accountServiceKey, [\n    /* into */\n    AccountService,\n  ])\n\n  .factory(expeditedServiceKey, [\n    widgetKey,\n    /* into */\n    ExpeditedService,\n  ])\n\n  .factory(paymentServiceKey, [\n    dateServiceKey,\n    expeditedServiceKey,\n    modelBillpayKey,\n    viewModelKey,\n    eventServiceKey,\n    /* into */\n    PaymentService,\n  ])\n\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    hooksKey,\n    dateServiceKey,\n    accountServiceKey,\n    errorHookUtilitiesKey,\n    /* into */\n    ManagePaymentViewModel,\n  ])\n\n  // Add `model` and `service` to the `context` provided to the extension `helpers` key\n  .factory(extensionHelpersContextKey, [\n    serviceKey,\n    dateServiceKey,\n    accountServiceKey,\n    paymentServiceKey,\n    expeditedServiceKey,\n    bbIntentKey,\n    errorHelperUtilitiesKey,\n    viewModelKey,\n    /* into */\n    (\n      managePaymentService,\n      dateService,\n      accountService,\n      paymentService,\n      expeditedService,\n      bbIntent,\n      errorHelperUtilities,\n      managePaymentViewModel\n    ) => ({\n      managePaymentService,\n      dateService,\n      accountService,\n      paymentService,\n      expeditedService,\n      bbIntent,\n      errorHelperUtilities,\n      managePaymentViewModel,\n    }),\n  ])\n\n  .controller('PayABillController', [\n    // dependencies to inject\n    eventBusKey,\n    widgetKey,\n    bbStateContainerKey,\n    serviceKey,\n    bbIntentKey,\n    /* into */\n    PayABillController,\n  ])\n\n  .controller('DatepickerController', [\n    // dependencies to inject\n    serviceKey,\n    dateServiceKey,\n    expeditedServiceKey,\n    /* into */\n    DatepickerController,\n  ])\n\n  .controller('RecurringController', [\n    // dependencies to inject\n    eventBusKey,\n    widgetKey,\n    bbStateContainerKey,\n    serviceKey,\n    bbIntentKey,\n    bbStorageServiceKey,\n    /* into */\n    RecurringController,\n  ])\n\n  .controller('EditPaymentController', [\n    // dependencies to inject\n    eventBusKey,\n    widgetKey,\n    bbStateContainerKey,\n    paymentServiceKey,\n    serviceKey,\n    dateServiceKey,\n    bbIntentKey,\n    bbStorageServiceKey,\n    /* into */\n    EditPaymentController,\n  ])\n\n  .run([\n    eventBusKey,\n    serviceKey,\n    (eventBus, service) => {\n      // subcribe to remove payment success event\n      eventBus.subscribe('bb.event.billpay.removePayment.after', () => {\n        service.getPayeesSummary()\n          .catch(() => {\n            // error handling is dealt with in the service\n          });\n      });\n    },\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/index.js","import angular from 'vendor-bb-angular';\n\n/**\n * @name PayABillController\n *\n * @description\n * Billpay pay a bill widget controller\n *\n * @type {function}\n */\nexport default function PayABillController(\n  bus,\n  widget,\n  stateContainer,\n  managePaymentService,\n  bbIntent) {\n  /**\n   * @constructor BillpaySummaryNotification\n   * @description Creates a new empty hidden notification\n   */\n  function BillpaySummaryNotification() {\n    let displayNotification = false;\n    let notificationStatus = '';\n    let notificationMessage = '';\n\n    return {\n      /**\n       * @name Notification#clear\n       * @type {function}\n       * @description Clear & hide the notification\n       */\n      clear: () => {\n        displayNotification = false;\n        notificationStatus = '';\n        notificationMessage = '';\n      },\n\n      /**\n       * @name Notification#set\n       * @type {function}\n       * @description Set and show the notification\n       */\n      set: ({ status, message }) => {\n        displayNotification = true;\n        notificationStatus = status;\n        notificationMessage = message;\n      },\n\n      /**\n       * @name Notification#display\n       * @type {boolean}\n       * @description Expose the display property\n       */\n      get display() { return displayNotification; },\n\n      /**\n       * @name Notification#status\n       * @type {string}\n       * @description Expose the status property\n       */\n      get status() { return notificationStatus; },\n\n      /**\n       * @name Notification#message\n       * @type {string}\n       * @description Expose the message property\n       */\n      get message() { return notificationMessage; },\n    };\n  }\n\n  const $ctrl = this;\n  const viewState = {};\n  const notification = new BillpaySummaryNotification();\n\n  /**\n   * @name getInitData\n   * @type {function}\n   * @param {string} [newPayeeId] id of the newly created payee\n   * @description fetch data required for initialisation\n   * @inner\n   */\n  const getInitData = (newPayeeId) => {\n    managePaymentService.getPayeesSummary(newPayeeId)\n      .catch(() => {\n        // error handling is dealt with in the service\n      });\n    managePaymentService.getAccounts()\n      .catch(() => {\n        // error handling is dealt with in the service\n      });\n  };\n\n  /**\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @name PayABillController#$onInit\n   * @type {function}\n   * @returns {void}\n   */\n  const $onInit = () => {\n    stateContainer.subscribe((state) => angular.copy(state, $ctrl.viewState));\n\n    // Deprecated in Mobile SDK 3.0\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bus.publish('bb.item.loaded', {\n      id: widget.getId(),\n    });\n\n    // Handle the intent to create a new payment\n    bbIntent.handle('intent.rb.billpay.single-bill.create', (id) => {\n      getInitData(id);\n    });\n\n    // Handle the general view intent.\n    // Passed an object of options. Run functions based on options\n    bbIntent.handle('intent.rb.billpay.summary.view', ({\n      payee,\n      notification: intentNotification,\n    } = {}) => {\n      const newPayeeId = payee ? payee.id : undefined;\n      getInitData(newPayeeId);\n\n      // Display any success/error message\n      if (intentNotification) {\n        notification.set(intentNotification);\n      }\n    });\n\n    // Handle when no intent is called\n    bbIntent.initHandler(getInitData);\n\n    bbIntent.init();\n  };\n\n  Object.assign($ctrl, {\n    $onInit,\n    viewState,\n    notification,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/pay-a-bill-controller.js","// Keys which are allowed in the datepicker\nconst datepickerAllowedKeys = {\n  8: 'Backspace',\n  9: 'Tab',\n  20: 'CapsLock',\n  27: 'Escape',\n  37: 'ArrowLeft',\n  39: 'ArrowRight',\n  46: 'Delete',\n  48: '0',\n  49: '1',\n  50: '2',\n  51: '3',\n  52: '4',\n  53: '5',\n  54: '6',\n  55: '7',\n  56: '8',\n  57: '9',\n  96: '0', // numpad 0\n  97: '1', // numpad 1\n  98: '2', // numpad 2\n  99: '3', // numpad 3\n  100: '4', // numpad 4\n  101: '5', // numpad 5\n  102: '6', // numpad 6\n  103: '7', // numpad 7\n  104: '8', // numpad 8\n  105: '9', // numpad 9\n  144: 'NumLock',\n  191: '/',\n};\n\nconst RUSH_CSS_CLASS = 'highlight-date-secondary';\n\nconst datepickerAllowedKeyCodes = Object.keys(datepickerAllowedKeys);\nconst datepickerAllowedKeyValues = datepickerAllowedKeyCodes\n  .map((key) => datepickerAllowedKeys[key])\n  .filter((value, index, arr) => arr.indexOf(value) === index);\n\nconst datepickerKeyDown = (event) => {\n  if (event.key !== undefined) {\n    if (datepickerAllowedKeyValues.indexOf(event.key) === -1) {\n      event.preventDefault();\n    }\n  } else if (datepickerAllowedKeyCodes.indexOf(event.which || event.keyCode) === -1) {\n    event.preventDefault();\n  }\n};\n\n// Check if is datepicker past date\nconst isDatepickerPastDate = (date, dateService) => dateService.isDateInPast(date);\n\nconst isDatepickerInvalidDate = (payee, date, dateService) =>\n  dateService.isDayDisabledRush(payee, { date, mode: 'day' });\n\nconst getDatepickerError = (payee, dateService, { datepicker: { $viewValue, $modelValue } }) => {\n  if (!dateService.isDatepickerValidFormat($viewValue) || !dateService.isValidDate($modelValue)) {\n    return 'datepicker.error.format';\n  } else if (isDatepickerPastDate($modelValue, dateService)) {\n    return 'datepicker.error.date-in-past';\n  } else if (isDatepickerInvalidDate(payee, $modelValue, dateService)) {\n    return 'datepicker.error.wrong-date';\n  }\n  return '';\n};\n\n/**\n * @constructor DatepickerController\n * @name DatepickerController\n * @param {ManagePaymentService} managePaymentService\n * @param {DateService} dateService\n * @param {ExpeditedService} expeditedService\n *\n * @description Controller used to isolate form state from view state. Clones view state\n * in order to mutate it\n */\nexport default function DatepickerController(managePaymentService, dateService, expeditedService) {\n  const $ctrl = this;\n  /**\n   * @name DatepickerController#options\n   * @type {object}\n   * @description options object for datepicker\n   */\n  const options = {\n    showWeeks: false,\n    todaysDate: dateService.getDateNow(),\n    currencyCode: managePaymentService.getCurrencyCode(),\n    formatMonth: 'MMM',\n  };\n\n  const setOptions = (customOptions) => Object.assign(\n    $ctrl, {\n      options: {\n        ...options,\n        ...customOptions,\n      },\n    }\n  );\n\n  /**\n   * @name DatepickerController#datepickerDateFormat\n   * @type {string}\n   * @description the datepicker date format\n   */\n  const datepickerDateFormat = 'MM/dd/yy';\n\n  /**\n   * @name DatepickerController#openDatepicker\n   * @type {function}\n   * @description open the datepicker for this holder\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   */\n  const openDatepicker = (holder) => Object.assign(holder.datepicker, { isOpen: true });\n\n  /**\n   * @name DatepickerController#rushIsAvailable\n   * @type {function}\n   * @description return true if rush is available but not selected for this payee\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @return {boolean}\n   */\n  const rushIsAvailable = ({ newPayment, paymentServicesObj }) =>\n    dateService.rushIsAvailable(newPayment.paymentDate, paymentServicesObj);\n\n  /**\n   * @name isRushing\n   * @inner\n   * @type {function}\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @description indicate if payment is rushing\n   * @returns {boolean}\n   */\n  const isRushing = ({ newPayment, paymentServicesObj }) =>\n    dateService.isDateRush(newPayment.paymentDate, paymentServicesObj);\n\n  /**\n    * @name DatepickerController#rushHasBeenChosen\n    * @type {function}\n    * @description return true if rush has been selected for this payee\n    * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n    * @return {boolean}\n    */\n  const rushHasBeenChosen = (payee) => isRushing(payee);\n\n\n  /**\n   * @name DatepickerController#rushDatepickerOptions\n   * @type {function}\n   * @description Build custom options object\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @returns {object}\n   */\n  const rushDatepickerOptions = (payee) => {\n    const { paymentServicesObj } = payee;\n    const { showWaivedFees } = expeditedService;\n    const exposeFee = !expeditedService.hasFeeBeenWaived(paymentServicesObj) || showWaivedFees;\n\n    const customClass = ({ date, mode }) => (\n      // Only run this over the 'day' view of calendar\n      mode === 'day' && dateService.isDateRush(date, paymentServicesObj) && exposeFee\n        ? RUSH_CSS_CLASS\n        : ''\n    );\n\n    const dateDisabled = ({ date, mode }) =>\n      dateService.isDayDisabledRush(payee, { date, mode });\n\n    const rushFee = expeditedService.getExpeditedFee(paymentServicesObj);\n    const rush = {\n      available: () => (rushIsAvailable(payee) || rushHasBeenChosen(payee)) && exposeFee,\n      fee: isNaN(rushFee) ? null : expeditedService.getExpeditedFee(paymentServicesObj),\n    };\n\n    return {\n      customClass,\n      rush,\n      dateDisabled,\n    };\n  };\n\n  /**\n * @name DatepickerController#finalPaymentDatepickerOptions\n * @type {function}\n * @description Build custom options object for first payment.\n *   Only need to disable weekends & holidays as minDate covers past dates\n * @returns {object}\n */\n  const finalPaymentDatepickerOptions = () => ({\n    dateDisabled: ({ date, mode }) => {\n      if (mode !== 'day') {\n        return false;\n      }\n      return dateService.isWeekend(date) || dateService.isDateInPast(date);\n    },\n  });\n\n  /**\n   * @name dateDisabled\n   * @type {function}\n   * @description Check if the date passed is a disabled date\n   * @param {object} obj datepicker object made up of date and mode\n   * @param {date} obj.date a date\n   * @param {string} obj.mode mode of datepicker e.g. day\n   * @return {boolean} if the date is to be disabled\n   * @inner\n   */\n  const dateDisabled = ({ date, mode }) => {\n    if (mode !== 'day') {\n      return false;\n    }\n    return dateService.isBadFirstPaymentDate(date);\n  };\n\n  /**\n   * @name DatepickerController#firstPaymentDatepickerOptions\n   * @type {function}\n   * @description Build custom options object for first payment\n   * @returns {object}\n   */\n  const firstPaymentDatepickerOptions = () => ({ dateDisabled });\n\n  /**\n   * @name DatepickerController#datepickerError\n   * @type {function}\n   * @description Returns error string key if there is an error present\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @param {DatepickerForm} form\n   * @return {string} error key or empty string\n   */\n  const datepickerError = (payee, form) =>\n    getDatepickerError(payee, dateService, form);\n\n  /**\n    * @name DatepickerController#datepickerHasError\n    * @type {function}\n    * @description Check if the datepicker has errors\n    * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n    * @param {DatepickerForm} form\n    * @return {boolean} the datepicker has errors\n    */\n  const datepickerHasError = (payee, form) =>\n    !!getDatepickerError(payee, dateService, form);\n\n  /**\n   * @name DatepickerController#datepickerErrorClass\n   * @type {function}\n   * @description get datepicker error class\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @param {DatepickerForm} form\n   * @return {{'was-validated is-invalid':boolean}} object with error class indicator\n   */\n  const datepickerErrorClass = (payee, form) =>\n    ({ 'was-validated is-invalid': !!getDatepickerError(payee, dateService, form) });\n\n  Object.assign($ctrl, {\n    options,\n    datepickerKeyDown,\n    setOptions,\n    datepickerDateFormat,\n    openDatepicker,\n    rushDatepickerOptions,\n    finalPaymentDatepickerOptions,\n    firstPaymentDatepickerOptions,\n    rushHasBeenChosen,\n    rushIsAvailable,\n    datepickerHasError,\n    datepickerError,\n    datepickerErrorClass,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/datepicker-controller.js","/**\n * @module widget-bb-billpay-pay-recurring-bill-ng\n * @name RecurringController\n *\n * @param {module:lib-bb-event-bus-ng.EventBus} bus\n * @param {module:lib-bb-widget-ng.Widget} widget\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {ManagePaymentService} managePaymentService\n * @description Billpay - recurring payment\n */\n\nexport default function RecurringController(\n  bus,\n  widget,\n  stateContainer,\n  managePaymentService,\n  bbIntent,\n  bbStorage\n) {\n  const $ctrl = this;\n  const viewState = Object.assign({}, stateContainer.getState());\n  const newPayment = {};\n  const STORAGE_PAYEE_ID = 'billpay.payRecurringBill.payeeId';\n  let initialPayeeId;\n\n  /**\n   * @name RecurringController#resetNewPayment\n   * @type {function}\n   * @description Set the newPayment object to an initial state. Use the passed account if given\n   * @param {object} [account]\n   * @return {object}\n   */\n  const resetNewPayment = (account) => {\n    Object.assign(newPayment, {\n      account: account || null,\n      payee: null,\n      paymentDate: null,\n      paymentAmount: {\n        value: 0,\n        currency: null,\n      },\n      fromDate: {\n        datepicker: {\n          isOpen: false,\n        },\n      },\n      toDate: {\n        datepicker: {\n          isOpen: false,\n        },\n      },\n      frequency: null,\n      frequencyEnd: 'manual',\n      numberOfInstances: 1,\n      finalPaymentDate: null,\n      alert: {\n        paymentScheduledAlert: true,\n        paymentSentAlert: true,\n        modelExpirationAlert: true,\n      },\n    });\n  };\n\n  /**\n   * @name RecurringController#getInitialPayee\n   * @type {function}\n   * @description Get the payee specified by intents if one has not already been selected on the UI\n   * @return {Payee}\n   */\n  const getInitialPayee = () => {\n    if (newPayment.payee) {\n      return newPayment.payee;\n    }\n    return initialPayeeId && viewState.payees\n      ? viewState.payees.find(payee => payee.id === initialPayeeId)\n      : null;\n  };\n\n  /**\n   * @name updatePaymentDateForNewPayee\n   * @type {function}\n   * @description Update the payment date with the nextPaymentDate field from the regular payment\n   *   service on the selected payee. Also stop a date from before then being used.\n   *   Unset the finalPaymentDate\n   * @param {object} newPayment\n   */\n  const updatePaymentDateForNewPayee = () => {\n    const { payee } = newPayment;\n    // REGULAR_PAYMENT should always be present\n    const minDate = payee.paymentServicesObj.REGULAR_PAYMENT\n      ? new Date(payee.paymentServicesObj.REGULAR_PAYMENT.nextPaymentDate)\n      : new Date();\n\n    Object.assign(newPayment, {\n      paymentDate: minDate,\n      minPaymentDate: minDate,\n      finalPaymentDate: null,\n    });\n  };\n\n  /**\n   * @name initPayee\n   * @type {function}\n   * @description Initialise the payee select. If there is a payee pre-provided then set it into\n   *   newPayment and update the payment date based on that payee\n   * @param {object} $ctrl\n   * @param {object} $ctrl.newPayment\n   * @param {function} $ctrl.getInitialPayee\n   */\n  const initPayee = () => {\n    // Track if a payee is already set in the newPayment\n    const existingPayee = newPayment.payee;\n    const initialPayee = getInitialPayee();\n    if (initialPayee && initialPayee !== existingPayee) {\n      Object.assign(newPayment, {\n        payee: initialPayee,\n      });\n      updatePaymentDateForNewPayee();\n    }\n  };\n\n  /**\n   * @name setPayeeToStorage\n   * @inner\n   * @type {function}\n   * @description Set the given payee id to the initialPayeeId. Also into the session storage so if\n   *   the user refreshes the page, the payee will be persisted\n   * @param {string} payeeId\n   */\n  const setPayeeToStorage = (payeeId) => {\n    initialPayeeId = payeeId;\n    bbStorage.setItem(STORAGE_PAYEE_ID, payeeId);\n  };\n\n  /**\n   * @name retrievePayeeFromStorage\n   * @inner\n   * @type {function}\n   * @description Retrieve the payeeId from session storage and set the initialPayeeId if it exists\n   */\n  const retrievePayeeFromStorage = () => {\n    bbStorage.getItem(STORAGE_PAYEE_ID).then((payeeId) => {\n      if (payeeId) {\n        initialPayeeId = payeeId;\n      }\n    });\n  };\n\n  /**\n   * @name clearPayeeFromStorage\n   * @type {function}\n   * @description Clear the payeeId from session storage. To be called by the extension when the\n   *   user completes the flow (setting up a payment or cancelling)\n   */\n  const clearPayeeFromStorage = () => {\n    bbStorage.removeItem(STORAGE_PAYEE_ID);\n  };\n\n  /**\n   * @type {function}\n   * @name RecurringController#$onInit\n   * @return {void}\n   * @description AngularJS Lifecycle hook used to initialize the controller\n   */\n  const $onInit = () => {\n    stateContainer.subscribe((state) => Object.assign($ctrl.viewState, state));\n\n    resetNewPayment();\n\n    // cascade so that if second request is OK it doesn't override a failure on first\n    managePaymentService.getPayeesSummary()\n      .then(managePaymentService.getAccounts)\n      .catch(() => {\n        // error handling is dealt with in the service\n      });\n\n    // Handle the intent to create a new payment\n    bbIntent.handle('intent.rb.billpay.recurring-bill.create', (payeeId) => {\n      setPayeeToStorage(payeeId);\n    });\n\n    // Default handler for no intent\n    bbIntent.initHandler(retrievePayeeFromStorage);\n\n    bbIntent.init();\n\n    // Deprecated in Mobile SDK 3.0\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bus.publish('bb.item.loaded', {\n      id: widget.getId(),\n    });\n  };\n\n  Object.assign($ctrl, {\n    $onInit,\n    newPayment,\n    viewState,\n    resetNewPayment,\n    getInitialPayee,\n    updatePaymentDateForNewPayee,\n    initPayee,\n    payees: () => viewState.payees,\n    accounts: () => viewState.accounts,\n    firstAccount: () => viewState.accounts && viewState.accounts[0],\n    clearPayeeFromStorage,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/recurring-controller.js","import { STORAGE_PAYMENT_ID } from './constants';\n\n/**\n * @module widget-bb-billpay-manage-payment-ng\n * @name EditPaymentController\n *\n * @description Billpay - edit payment\n */\nexport default function EditPaymentController(\n  bus,\n  widget,\n  stateContainer,\n  paymentService,\n  managePaymentService,\n  dateService,\n  bbIntent,\n  bbStorage) {\n  const $ctrl = this;\n\n  const summaryIntent = bbIntent.create('intent.rb.billpay.summary.view');\n  let callIntentResponse = () => {};\n  const returnToPreviousScreen = (data) => {\n    callIntentResponse(data);\n  };\n\n  /**\n   * @type {object}\n   * @name EditPaymentController#payee\n   * @description payee control data\n   */\n  const payee = { datepicker: { isOpen: false }, cancelConfirm: { isOpen: false }, newPayment: {} };\n\n  /**\n   * @type {function}\n   * @inner\n   * @name updatePayment\n   * @return {void}\n   * @description initialise editPayment with backend data\n   */\n  const updatePayment = (payment, accounts, payees) => {\n    const account = payment && accounts && accounts.length\n      ? accounts.find(acct => acct.accountNumber === payment.paymentAccountNumber)\n      : null;\n\n    const newPayee = payment && payees && payees.length\n      ? payees.\n        map(pyee => Object.assign(pyee, { displayName: pyee.nickName || pyee.name })).\n        find(pyee => pyee.name === payment.payeeName)\n      : {};\n\n    Object.assign(payee, {\n      ...newPayee,\n      newPayment: {\n        id: payment ? payment.id : null,\n        paymentDate: payment && payment.paymentDate\n          ? dateService.getServerDate(payment.paymentDate)\n          : null,\n        paymentAmount: {\n          value: payment ? parseFloat(payment.paymentAmount) : 0,\n          currency: null,\n        },\n        paymentMemo: payment ? payment.paymentMemo : null,\n        paymentAccount: account,\n      },\n    });\n  };\n  updatePayment();\n\n  /**\n   * @type {function}\n   * @name useStateFromStorage\n   * @description method used when no intent was fired, uses storage to determine state\n   * @inner\n   */\n  const useStateFromStorage = () => {\n    callIntentResponse = () => { summaryIntent(); };\n    return bbStorage.getItem(STORAGE_PAYMENT_ID).then((paymentId) => {\n      if (paymentId) {\n        paymentService.getPayment(paymentId)\n          .catch(() => {\n            // error handling is dealt with in the service\n          });\n      }\n    });\n  };\n\n  /**\n   * @type {function}\n   * @name EditPaymentController#$onInit\n   * @return {void}\n   * @description AngularJS Lifecycle hook used to initialize the controller\n   */\n  const $onInit = () => {\n    stateContainer.subscribe(({ payment, accounts, payees }) =>\n      updatePayment(payment, accounts, payees));\n\n    // cascade so that if second request is OK it doesn't override a failure on first\n    managePaymentService.getPayeesSummary()\n      .then(managePaymentService.getAccounts)\n      .catch(() => {\n        // error handling is dealt with in the service\n      });\n\n    bbIntent.handle('intent.rb.billpay.single-bill.edit', (paymentId, respond) => {\n      bbStorage.setItem(STORAGE_PAYMENT_ID, paymentId);\n      paymentService.getPayment(paymentId)\n        .catch(() => {\n          // error handling is dealt with in the service\n        });\n      callIntentResponse = respond;\n    });\n\n    bbIntent.initHandler(useStateFromStorage);\n\n    bbIntent.init();\n  };\n\n  Object.assign($ctrl, {\n    $onInit,\n    payee,\n    returnToPreviousScreen,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/edit-payment-controller.js","/* eslint-disable import/prefer-default-export */\nexport const STORAGE_PAYMENT_ID = 'billpay.payABill.editPaymentId';\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/constants.js","import { STORAGE_PAYMENT_ID } from './constants';\n\n/**\n* The purpose of this module is to provide the main structure of the\n* Manage Payment widget. Outlining the workflows, connecting the data from the\n* model to the view via the customizations provided by the extension.\n*\n* @constructor ManagePaymentService\n* @param {StateContainer} viewModel\n* @param {BillpayModel} model\n* @param {object} events\n* @description The core functionality of the Manage Payment widget\n*/\nexport default function ManagePaymentService(viewModel, model, events, widget, bbStorage) {\n  /**\n   * @name transformPaymentData\n   * @inner\n   * @type {function}\n   * @param {object} payment\n   * @description Remove any unwanted properties, and apply any necessary changes to data before\n   *  it is posted or put\n   */\n  const transformPaymentData = (\n    { payeeID,\n      paymentAccount: { accountNumber, accountType, routingNumber },\n      paymentAmount,\n      paymentDate,\n      paymentMemo,\n      overnightDeliveryAddress: {\n        address1,\n        address2,\n        city,\n        state,\n        postalCode,\n      },\n    }\n  ) => {\n    const overnightDeliveryAddress = {\n      address1,\n      city,\n      state,\n      postalCode,\n      // optional field\n      ...address2 && address2.trim().length && {\n        address2,\n      },\n    };\n\n    return {\n      payeeID,\n      paymentAmount,\n      paymentDate,\n      paymentAccount: {\n        accountNumber,\n        accountType,\n        routingNumber,\n      },\n      // Add the memo to the obj if it exists\n      ...!!paymentMemo && { paymentMemo },\n      // Add overnight address if exists and populated\n      ...!!(overnightDeliveryAddress.address1) && { overnightDeliveryAddress },\n    };\n  };\n\n  /**\n   * @name transformPaymentsData\n   * @inner\n   * @type {function}\n   * @param {array} payments\n   * @description Remove any unwanted properties, and apply any necessary changes to data before\n   *  it is posted\n   */\n  const transformPaymentsData = payments => payments.map(transformPaymentData);\n\n  return {\n    /**\n     * @name ManagePaymentService#getPayeesSummary\n     * @type {function}\n     * @param {string} [newPayeeId] id of last created payee\n     * @return {Promise<void>}\n     * @description Update the view with a list of payees loaded from the data source\n     */\n    getPayeesSummary(newPayeeId) {\n      viewModel.beforeGetPayeesSummary();\n      events.beforeGetPayeesSummary();\n      return model.getPayeesSummary()\n        .then((response) => {\n          viewModel.afterGetPayeesSummarySuccess({ payeeSummaries: response, newPayeeId });\n          events.afterGetPayeesSummarySuccess(response);\n        })\n        .catch((error) => {\n          viewModel.afterGetPayeesSummaryError(error);\n          events.afterGetPayeesSummaryError(error);\n          throw error;\n        });\n    },\n\n    /**\n     * @name ManagePaymentService#getAccounts\n     * @type {function}\n     * @return {Promise<void>}\n     * @description Update the view with a list of accounts loaded from the data source\n     */\n    getAccounts() {\n      viewModel.beforeGetAccounts();\n      events.beforeGetAccounts();\n      return model.getAccounts()\n        .then((response) => {\n          viewModel.afterGetAccountsSuccess(response);\n          events.afterGetAccountsSuccess(response);\n        })\n        .catch((error) => {\n          viewModel.afterGetAccountsError(error);\n          events.afterGetAccountsError(error);\n          throw error;\n        });\n    },\n\n    /**\n     * @name ManagePaymentService#getCurrencyCode\n     * @type {function}\n     * @return {string}\n     * @description REturn the currency code from widget preferences\n     */\n    getCurrencyCode() {\n      return widget.getStringPreference('currency');\n    },\n\n    /**\n     * @name ManagePaymentService#postPaymentsRecord\n     * @type {function}\n     * @return {Promise<void>}\n     * @description Update the view with information about outcome of creating a batch of payments\n     */\n    postPaymentsRecord(payments) {\n      // Ensure we only have the correct data\n      const transformedPayments = { payments: transformPaymentsData(payments) };\n      const handleSuccess = (response) => {\n        viewModel.afterPostPaymentsRecordSuccess();\n        events.afterPostPaymentsRecordSuccess(response);\n      };\n      viewModel.beforePostPaymentsRecord();\n      events.beforePostPaymentsRecord();\n      return model.postPaymentsRecord(transformedPayments)\n        .then(handleSuccess)\n        .catch((error) => {\n          viewModel.afterPostPaymentsRecordError(error);\n          events.afterPostPaymentsRecordError(error);\n          throw error;\n        });\n    },\n\n    /**\n     * @name ManagePaymentService#postRecurringPaymentsRecord\n     * @type {function}\n     * @param {object} payment - The recurring payment to post\n     * @return {Promise<void>}\n     * @description Update the view with info about outcome of creating a recurring of payment\n     */\n    postRecurringPaymentsRecord(payment) {\n      viewModel.beforePostRecurringPaymentsRecord();\n      events.beforePostRecurringPaymentsRecord();\n      return model.postRecurringPaymentsRecord(payment)\n        .then((response) => {\n          viewModel.afterPostRecurringPaymentsRecordSuccess(response);\n          events.afterPostRecurringPaymentsRecordSuccess(response);\n        })\n        .catch((error) => {\n          viewModel.afterPostRecurringPaymentsRecordError(error);\n          events.afterPostRecurringPaymentsRecordError(error);\n          throw error;\n        });\n    },\n\n    /**\n     * @name ManagePaymentService#putPaymentRecord\n     * @type {function}\n     * @return {Promise<void>}\n     * @description Update the view with information about outcome of updating a payment\n     */\n    putPaymentRecord(payment) {\n      // Ensure we only have the correct data\n      const transformedPayment = { payment: transformPaymentData(payment) };\n      const handleSuccess = (response) => {\n        viewModel.afterPutPaymentRecordSuccess(response);\n        events.afterPutPaymentRecordSuccess(response);\n        bbStorage.removeItem(STORAGE_PAYMENT_ID);\n      };\n      viewModel.beforePutPaymentRecord();\n      events.beforePutPaymentRecord();\n      return model.putPaymentRecord(payment.id, transformedPayment)\n        .then(handleSuccess)\n        .catch((error) => {\n          viewModel.afterPutPaymentRecordError(error);\n          events.afterPutPaymentRecordError(error);\n          throw error;\n        });\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/service.js","/**\n * @constructor DateService\n * @param {object} expeditedService\n * @param {Date} [now] - current date, only set for testing\n * @description Encapsulate all date handling functionality for billpay.\n */\nexport default function DateService(expeditedService, now) {\n  const MS_PER_DAY = 1000 * 60 * 60 * 24;\n  const DATE_FORMAT_REGEXP = /^\\d{2}\\/\\d{2}\\/\\d{2}$/;\n  const SEMI_MONTHLY_DAY_INTERVAL = 15;\n  const DAYS_IN_WEEK = 7;\n  const DAYS_IN_BIWEEK = 14;\n  const SEMI_PERIOD_ITERATIONS = 2;\n  const MONTHS_IN_SEMI_ANNUAL = 6;\n  const MONTHS_IN_QUARTER = 3;\n\n  const discardTime = date => Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Determine if the date format is valid\n  const isDatepickerValidFormat = (value) => DATE_FORMAT_REGEXP.test(value);\n\n  const isValidDate = (date) => date instanceof Date && !isNaN(date.getTime());\n\n  const dateDiffInDays = (date1, date2) => {\n    if (!isValidDate(date1) || !isValidDate(date2)) {\n      throw new TypeError('dateDiffInDays: You need to pass valid dates.');\n    }\n\n    // Discard the time and time-zone information.\n    const utc1 = discardTime(date1);\n    const utc2 = discardTime(date2);\n\n    return Math.floor((utc2 - utc1) / MS_PER_DAY);\n  };\n\n  /**\n   * @name isLastDayOfMonth\n   * @type {function}\n   * @description check if the date passed is the last day of the month\n   * @param {Date} date - the date to check\n   * @return {boolean}\n   * @inner\n  */\n  const isLastDayOfMonth = (date) => {\n    const originalDate = new Date(date);\n    const nextMonth = originalDate.getMonth() + 1;\n    const firstDayNextMonth = new Date(originalDate.getFullYear(), nextMonth, 0);\n    return (originalDate.getDate() === firstDayNextMonth.getDate());\n  };\n\n  // See how many full months difference are between two dates\n  // Full months only, e.g. (31st Jan, 1st Feb) will return 0\n  const dateDiffInFullMonths = (date1, date2) => {\n    // The day of the month for the two dates\n    const date1DayOfMonth = date1.getDate();\n    const date2DayOfMonth = date2.getDate();\n\n    // If the second date is later than or equal day in the month, then the month diff is valid\n    const lastMonthIsFull = date2DayOfMonth >= date1DayOfMonth;\n\n    // If both dates are the last of their respective months, then the month difference is valid\n    const datesAreBothLastDaysOfMonth = isLastDayOfMonth(date1) && isLastDayOfMonth(date2);\n\n    // If date2 is on the last day of the month, and date1 is later in the month than date2\n    // then the month difference is valid\n    const date2FallsBeforeDate1ButAtEndOfMonth =\n      isLastDayOfMonth(date2) && (date1DayOfMonth > date2DayOfMonth);\n\n    // Get general month difference\n    const months = (date2.getMonth() - date1.getMonth())\n      + (12 * (date2.getFullYear() - date1.getFullYear()));\n    // Is the final month difference a full month\n    const monthDifferenceValid =\n      lastMonthIsFull || datesAreBothLastDaysOfMonth || date2FallsBeforeDate1ButAtEndOfMonth;\n\n    return monthDifferenceValid ? months : months - 1;\n  };\n\n  const dateDiffInFullYears = (date1, date2) => {\n    // full years only, e.g. (31st Oct, 20th Feb) will return 0\n    const monthsDiff = dateDiffInFullMonths(date1, date2);\n    return Math.floor(monthsDiff / 12);\n  };\n\n  const getDateNow = () => (now ? new Date(now.getTime()) : new Date());\n\n  const getDateTodayPlusAYear = () => {\n    const today = getDateNow();\n    return new Date(today.setDate(today.getDate() + 365));\n  };\n\n  const getAsDate = (str) => new Date(str);\n\n  const areSameDate = (date1, date2) => {\n    try {\n      return dateDiffInDays(date1, date2) === 0;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const isDateBefore = (dateToTest, referenceDate) => {\n    try {\n      return referenceDate && dateDiffInDays(referenceDate, dateToTest) < 0;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const isDateBeforeOrSame = (dateToTest, referenceDate) => {\n    try {\n      return referenceDate && dateDiffInDays(referenceDate, dateToTest) <= 0;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const isDateAfterOrSame = (dateToTest, referenceDate) => {\n    try {\n      return referenceDate && dateDiffInDays(referenceDate, dateToTest) >= 0;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const isDateInPast = date => isDateBefore(date, getDateNow());\n\n  const isWeekend = date => date.getDay() === 0 || date.getDay() === 6;\n\n  const getRegularPaymentDate = (paymentServicesObj) => {\n    const payment = paymentServicesObj.REGULAR_PAYMENT;\n    if (payment) {\n      const cutoffTime = new Date(payment.cutoffTime);\n      return getDateNow() < cutoffTime ? payment.earliestPaymentDate : payment.nextPaymentDate;\n    }\n    return undefined;\n  };\n\n  const getRegularEarliestPaymentDate = (paymentServicesObj) => {\n    const payment = paymentServicesObj.REGULAR_PAYMENT;\n    if (payment) {\n      return payment.earliestPaymentDate;\n    }\n    return undefined;\n  };\n\n  const isDateInRushPeriodAndNotWeekend = (dateToCheck, rushDateStr, regularDateStr) => {\n    if (!rushDateStr || !regularDateStr || !dateToCheck || isWeekend(dateToCheck)) {\n      return false;\n    }\n    const rushDate = getAsDate(rushDateStr);\n    const regularDate = getAsDate(regularDateStr);\n\n    // date to check must be equal or greater than rush payment date\n    // and less than regular payment date\n    return isDateAfterOrSame(dateToCheck, rushDate) && isDateBefore(dateToCheck, regularDate);\n  };\n\n  const isDateRushNoCutOff = (dateToCheck, paymentServicesObj) => {\n    if (!expeditedService.isExpedited(paymentServicesObj)) {\n      return false;\n    }\n    const rushDateStr = expeditedService.getEarliestPaymentDate(paymentServicesObj);\n    const regularDateStr = getRegularEarliestPaymentDate(paymentServicesObj);\n    return isDateInRushPeriodAndNotWeekend(dateToCheck, rushDateStr, regularDateStr);\n  };\n\n  const isDateRushCutoff = (dateToCheck, paymentServicesObj) => {\n    if (!expeditedService.isExpedited(paymentServicesObj)) {\n      return false;\n    }\n    const rushDateStr = expeditedService.getPaymentDate(getDateNow(), paymentServicesObj);\n    const regularDateStr = getRegularPaymentDate(paymentServicesObj);\n    return isDateInRushPeriodAndNotWeekend(dateToCheck, rushDateStr, regularDateStr);\n  };\n\n  const addDay = (date, days) => {\n    const newDate = new Date(date.valueOf());\n    newDate.setDate(newDate.getDate() + days);\n    return newDate;\n  };\n\n  const atLeastOneDateIsValidInRushPeriod = (rushDate, regularDate) => {\n    const diff = dateDiffInDays(rushDate, regularDate);\n    if (diff <= 0) {\n      return false;\n    }\n    const datesToCheck = Array.from({ length: diff }, (v, i) => addDay(rushDate, i));\n    return datesToCheck.some((dt) => !isWeekend(dt));\n  };\n\n  const hasRushPeriod = (paymentServicesObj) => {\n    if (!expeditedService.isExpedited(paymentServicesObj)) {\n      return false;\n    }\n    const rushDateStr = expeditedService.getPaymentDate(getDateNow(), paymentServicesObj);\n    const regularDateStr = getRegularPaymentDate(paymentServicesObj);\n\n    if (!rushDateStr || !regularDateStr) {\n      return false;\n    }\n    const rushDate = getAsDate(rushDateStr);\n    const regularDate = getAsDate(regularDateStr);\n\n    // rush date must be earlier than regular date or no rush period\n    // at least one day in period must be weekday\n    return isDateBefore(rushDate, regularDate) &&\n      atLeastOneDateIsValidInRushPeriod(rushDate, regularDate);\n  };\n\n  const isDateSelectable = (paymentServicesObj, date) => {\n    const firstRegularDate = getAsDate(getRegularPaymentDate(paymentServicesObj));\n\n    // Disable dates before first regular date that aren't rush\n    const isInvalidDate =\n      !isDateRushCutoff(date, paymentServicesObj) &&\n      isDateBefore(date, firstRegularDate);\n    // Disable all dates before today (there might not be regular/rush info)\n    const isPastDate = isDateInPast(date);\n    // Disable weekends\n    const isWeekendDate = isWeekend(date);\n    return !(isInvalidDate || isWeekendDate || isPastDate);\n  };\n\n  const isDayDisabledRush = ({ paymentServicesObj }, { date, mode }) =>\n    // Only run this over the 'day' view of calendar\n    (mode === 'day' ? !isDateSelectable(paymentServicesObj, date) : false);\n\n  const checkForFinalPaymentMonthSkip = (paymentDate, finalPaymentDate) => {\n    if (finalPaymentDate.getDate() !== paymentDate.getDate()) {\n      finalPaymentDate.setDate(0);\n    }\n    return finalPaymentDate;\n  };\n\n  /**\n   * @name isBadFirstPaymentDate\n   * @type {function}\n   * @description Take a date, and return true if it is not allowed as a first payment date\n   * @param {date} date\n   * @return {boolean}\n   * @inner\n   */\n  const isBadFirstPaymentDate = (date) => {\n    const isDateAfterAYear = () => !isDateBefore(date, getDateTodayPlusAYear());\n    // Disable all dates before today\n    const isPastDate = isDateInPast(date);\n    // Disable any dates further than a year from today\n    const isAfterAYear = isDateAfterAYear();\n    // Disable any weekend dates\n    const isWeekendDate = isWeekend(date);\n    return isPastDate || isAfterAYear || isWeekendDate;\n  };\n\n  return {\n\n    /**\n     * @name DateService#isBadFirstPaymentDate\n     * @type {function}\n     * @description Take a date, and return true if it is not allowed as a first payment date\n     * @param {date} date\n     * @return {boolean}\n     */\n    isBadFirstPaymentDate,\n    /**\n     * @name DateService#isDatepickerValidFormat\n     * @type {function}\n     * @description return a boolean for date validity\n     * @param {string} value the date value to validate\n     * @return {boolean} is the date value a valid format\n     */\n    isDatepickerValidFormat,\n\n    /**\n     * @name DateService#getDateNow\n     * @type {function}\n     * @description return the current date and time.\n     * @return {Date} the date now\n     */\n    getDateNow,\n\n    /**\n     * @name DateService#getDateTodayPlusAYear\n     * @type {function}\n     * @description return the current date plus a year\n     * @return {Date} the date now plus 1 year\n     */\n    getDateTodayPlusAYear,\n\n    /**\n     * @name DateService#getAsDate\n     * @type {function}\n     * @description read the param as a date string\n     * @param {string} str - string to read\n     * @return {Date} the date from the string\n     */\n    getAsDate,\n\n    /**\n     * @name DateService#getServerDate\n     * @type {function}\n     * @description read the param as date string and return Date in current locale\n     * @param {string} rawDate - string to read must be in format YYYY-MM-DD...\n     * @throws {TypeError} if rawDate doesn't match YYYY-MM-DD...\n     * @return {Date} the date from the string\n     */\n    getServerDate: (rawDate) => {\n      const matches = (rawDate || '').match(/^(\\d{4})-(\\d{2})-(\\d{2}).*$/);\n\n      if (matches && matches.length === 4) {\n        const [, year, month, day] = matches;\n        // return date in current locale\n        return new Date(year, month - 1, day);\n      }\n      throw new TypeError('getServerDate: Invalid or no raw date');\n    },\n\n    /**\n     * @name DateService#areSameDate\n     * @type {function}\n     * @description return true if the two dates are on the same day ignoring time.\n     * @param {Date} date1 - first date\n     * @param {Date} date2 - second date\n     * @return {boolean} dates are on same day\n     */\n    areSameDate,\n\n    /**\n     * @name DateService#isDateInPast\n     * @type {function}\n     * @description Is the passed date in the past\n     * @param {Date} date - The date being checked\n     * @return {boolean} Is the date in the past\n     */\n    isDateInPast,\n\n    /**\n     * @name DateService#isDateBefore\n     * @type {function}\n     * @description Is the passed date before the reference date\n     * @param {Date} date - The date being checked\n     * @param {Date} referenceDate - The date being checked against\n     * @return {boolean} Is the date before the reference date\n     */\n    isDateBefore,\n\n    /**\n     * @name DateService#isWeekend\n     * @type {function}\n     * @description return true if the date day is Saturday or Sunday.\n     * @param {Date} date - date to check\n     * @return {boolean} date is weekend\n     */\n    isWeekend,\n\n    /**\n     * @name DateService#isValidDate\n     * @type {function}\n     * @description Decide if the passed date is valid\n     * @param {Date} date - date to check\n     * @return {boolean} date is valid\n     */\n    isValidDate,\n\n    /**\n     * @name DateService#getFirstFreePaymentDate\n     * @type {function}\n     * @description return first free payment date, regular payment or rush if the fee has been\n     *   waived\n     * @param {object} obj\n     * @param {module:model-bb-billpay-ng.PaymentServices} obj.paymentServicesObj\n     * @return {Date} first free payment date\n     */\n    getFirstFreePaymentDate: ({ paymentServicesObj }) => {\n      const rushPayment = expeditedService.isExpedited(paymentServicesObj);\n      const rushDateStr = expeditedService.getPaymentDate(getDateNow(), paymentServicesObj);\n      const regularDateStr = getRegularPaymentDate(paymentServicesObj);\n      const hasWaivedRush = rushPayment && expeditedService.hasFeeBeenWaived(paymentServicesObj);\n\n      return getAsDate(hasWaivedRush\n        ? rushDateStr\n        : regularDateStr\n      );\n    },\n\n    /**\n     * @name DateService#getEarliestPaymentDate\n     * @type {function}\n     * @description returns the earliest payment date\n     * @param {module:model-bb-billpay-ng.PaymentServices} obj.paymentServicesObj payment service\n     *  object\n     * @return {Date} earliest payment date\n     */\n    getEarliestPaymentDate: (paymentService) =>\n      (paymentService\n        ? getAsDate(paymentService.earliestPaymentDate)\n        : getDateNow()),\n\n    /**\n     * @name DateService#isDateRush\n     * @type {function}\n     * @description return true if the date is a rush date and before cutoff\n     * @param {Date} dateToCheck\n     * @param {module:model-bb-billpay-ng.PaymentServices} paymentServicesObj\n     * @return {boolean} date is a rush date and before cutoff\n     */\n    isDateRush: isDateRushCutoff,\n\n    /**\n     * @name DateService#isDateRushNoCutOff\n     * @type {function}\n     * @description return true if the date is a rush date, ignoring cutoff\n     * @param {Date} dateToCheck\n     * @param {module:model-bb-billpay-ng.PaymentServices} paymentServicesObj\n     * @return {boolean} date is a rush date\n     */\n    isDateRushNoCutOff,\n\n    /**\n     * @name DateService#rushIsAvailable\n     * @type {function}\n     * @description return a boolean on whether rush is available for a date\n     * @param {Date} datetoCheck the date to validate on\n     * @param {module:model-bb-billpay-ng.PaymentServices} paymentServicesObj\n     * @return {boolean} rush is available for date\n     */\n    rushIsAvailable: (dateToCheck, paymentServicesObj) =>\n      hasRushPeriod(paymentServicesObj)\n      && !isDateRushCutoff(dateToCheck, paymentServicesObj),\n\n    /**\n     * @name DateService#convertDateToServerDayString\n     * @type {function}\n     * @description return a date in format YYYY-MM-DD for POSTing to the server\n     * @param {Date} the date to format\n     * @return {string} formatted date\n     */\n    convertDateToServerDayString: (date) => {\n      const day = date.getDate();\n      const month = date.getMonth() + 1;\n      const year = date.getFullYear();\n\n      const dayStr = (day < 10 ? '0' : '') + day.toString();\n      const monthStr = (month < 10 ? '0' : '') + month.toString();\n\n      return `${year}-${monthStr}-${dayStr}`;\n    },\n\n    /**\n     * @name DateService#isDateSelectable\n     * @type {function}\n     * @description determines if the date can be selected\n     * @param {module:model-bb-billpay-ng.PaymentServices} paymentServicesObj\n     * @param {Date} date\n     * @return {boolean} date is selectable\n     */\n    isDateSelectable,\n\n    /**\n     * @name DateService#isDayDisabledRush\n     * @type {function}\n     * @description a method to run on dates to disable those that cannot be payment dates\n     * @param {module:model-bb-billpay-ng.PaymentServices} paymentServicesObj\n     * @param {object} obj\n     * @param {Date} obj.date\n     * @param {string} obj.mode\n     * @return {boolean} is date to be disabled\n     */\n    isDayDisabledRush,\n\n    /**\n     * @name DateService#showFinalRecurringPaymentDate\n     * @type {function}\n     * @description show the date if the required fields are filled in\n     * @param {object} newPayment\n     * @return {boolean}\n     */\n    showFinalRecurringPaymentDate: ({ paymentDate, frequency, numberOfInstances, frequencyEnd }) =>\n      frequencyEnd === 'number' && isValidDate(paymentDate)\n      && !!frequency && !!numberOfInstances,\n\n    /**\n     * @name DateService#showFinalRecurringPaymentDateAndNumInstances\n     * @type {function}\n     * @description show the date & number of instances if the required fields are filled in\n     * @param {object} newPayment\n     * @return {boolean}\n     */\n    showFinalRecurringPaymentDateAndNumInstances:\n      ({ frequencyEnd, paymentDate, finalPaymentDate, frequency }) =>\n        frequencyEnd === 'date' && !!frequency\n        && isValidDate(paymentDate) && isValidDate(finalPaymentDate)\n        && !isDateInPast(finalPaymentDate)\n        && !isWeekend(finalPaymentDate)\n        && isDateBeforeOrSame(paymentDate, finalPaymentDate),\n\n    /**\n     * @name DateService#dateDiffInFullMonths\n     * @type {function}\n     * @description the amount of full months difference between dates\n     * @param {Date} date1 - The start date to check from\n     * @param {Date} date2 - The end date to check to\n     * @return {number}\n     */\n    dateDiffInFullMonths,\n\n    /**\n     * @name DateService#dateDiffInFullYears\n     * @type {function}\n     * @description the amount of full years difference between dates\n     * @param {Date} date1 - The start date to check from\n     * @param {Date} date2 - The end date to check to\n     * @return {number}\n     */\n    dateDiffInFullYears,\n\n    /**\n     * @name DateService#getFinalRecurringPaymentDate\n     * @type {function}\n     * @description return the final recurring payment date given a starting date, frequency and\n     *   no. of instances\n     * @param {date} paymentDate\n     * @param {string} frequency\n     * @param {number} numberOfInstances\n     * @return {date}\n     */\n    getFinalRecurringPaymentDate: (paymentDate, frequency, numberOfInstances) => {\n      const numberOfExtraInstances = numberOfInstances - 1;\n      let finalPaymentDate = new Date(paymentDate.getTime());\n\n      const transformFinalPaymentDate = {\n        weekly: () =>\n          finalPaymentDate.setDate(finalPaymentDate.getDate()\n          + (numberOfExtraInstances * DAYS_IN_WEEK)),\n        'bi-weekly': () =>\n          finalPaymentDate.setDate(finalPaymentDate.getDate()\n            + (numberOfExtraInstances * DAYS_IN_BIWEEK)),\n        'semi-monthly': () => {\n          const monthsToAdd = Math.floor(numberOfExtraInstances / SEMI_PERIOD_ITERATIONS);\n          const daysToAdd = numberOfExtraInstances % SEMI_PERIOD_ITERATIONS === 0\n            ? 0\n            : SEMI_MONTHLY_DAY_INTERVAL;\n\n          // Add the whole months\n          finalPaymentDate.setMonth(finalPaymentDate.getMonth() + monthsToAdd);\n          finalPaymentDate = checkForFinalPaymentMonthSkip(paymentDate, finalPaymentDate);\n          finalPaymentDate.setDate(finalPaymentDate.getDate() + daysToAdd);\n        },\n        monthly: () => {\n          finalPaymentDate.setMonth(finalPaymentDate.getMonth() + numberOfExtraInstances);\n          finalPaymentDate = checkForFinalPaymentMonthSkip(paymentDate, finalPaymentDate);\n        },\n        quarterly: () => {\n          finalPaymentDate.setMonth(finalPaymentDate.getMonth() +\n            (numberOfExtraInstances * MONTHS_IN_QUARTER));\n          finalPaymentDate = checkForFinalPaymentMonthSkip(paymentDate, finalPaymentDate);\n        },\n        'semi-annually': () => {\n          finalPaymentDate.setMonth(finalPaymentDate.getMonth() +\n            (numberOfExtraInstances * MONTHS_IN_SEMI_ANNUAL));\n          finalPaymentDate = checkForFinalPaymentMonthSkip(paymentDate, finalPaymentDate);\n        },\n        annually: () => {\n          finalPaymentDate.setFullYear(finalPaymentDate.getFullYear() + numberOfExtraInstances);\n          finalPaymentDate = checkForFinalPaymentMonthSkip(paymentDate, finalPaymentDate);\n        },\n      };\n\n      transformFinalPaymentDate[frequency]();\n\n      // Check that the date is valid (not a weekend, or a holiday). If weekend, go back to friday\n      const finalPaymentDateDayOfWeek = finalPaymentDate.getDay();\n      let finalPaymentDateDayOfMonth = finalPaymentDate.getDate();\n\n      if (finalPaymentDateDayOfWeek === 0) {\n        finalPaymentDateDayOfMonth -= 2;\n      } else if (finalPaymentDateDayOfWeek === 6) {\n        finalPaymentDateDayOfMonth -= 1;\n      }\n      finalPaymentDate.setDate(finalPaymentDateDayOfMonth);\n\n      return finalPaymentDate;\n    },\n\n    /**\n     * @name DateService#calculateNumberOfInstances\n     * @type {function}\n     * @description return the number of instances (payments) that will be made\n     * between two dates with a frequency set, until BUT NOT after the date\n     * @param {object} newPayment\n     * @param {date} newPayment.paymentDate the first payment date\n     * @param {date} newPayment.finalPaymentDate the date which\n     * payments are made up to but not after\n     * @param {string} newPayment.frequency the name of the frequency of payments to be made\n     * @return {number}\n     */\n    calculateNumberOfInstances: ({ paymentDate, finalPaymentDate, frequency }) => {\n      const getNumberOfInstancesFromDates = {\n        weekly: () =>\n          Math.floor(dateDiffInDays(paymentDate, finalPaymentDate) / DAYS_IN_WEEK),\n        'bi-weekly': () =>\n          Math.floor(dateDiffInDays(paymentDate, finalPaymentDate) / DAYS_IN_BIWEEK),\n        'semi-monthly': () => {\n          const dateDiffInMonths = dateDiffInFullMonths(paymentDate, finalPaymentDate);\n          const numberOfExtraInstances = (dateDiffInMonths * SEMI_PERIOD_ITERATIONS);\n\n          // check if a semi-monthly occurance is required i.e. expected\n          // date from the added months is before the selected end date\n          const expectedLastDate = new Date(paymentDate);\n          expectedLastDate.setMonth(expectedLastDate.getMonth() + dateDiffInMonths);\n          const expectedNextDate = new Date(expectedLastDate.setDate(\n            expectedLastDate.getDate() + SEMI_MONTHLY_DAY_INTERVAL)\n          );\n\n          // add another instance for the semi monthly interval if it is before selected end date\n          const isNextDateAvailable = isDateBeforeOrSame(expectedNextDate, finalPaymentDate);\n          return isNextDateAvailable ? numberOfExtraInstances + 1 : numberOfExtraInstances;\n        },\n        monthly: () =>\n          dateDiffInFullMonths(paymentDate, finalPaymentDate),\n        quarterly: () =>\n          Math.floor(dateDiffInFullMonths(paymentDate, finalPaymentDate) / MONTHS_IN_QUARTER),\n        'semi-annually': () =>\n          Math.floor(dateDiffInFullMonths(paymentDate, finalPaymentDate) / MONTHS_IN_SEMI_ANNUAL),\n        annually: () =>\n          dateDiffInFullYears(paymentDate, finalPaymentDate),\n      };\n\n      const numberOfInstances = getNumberOfInstancesFromDates[frequency]();\n      // 1 is the first payment on the start date that is always made\n      return numberOfInstances + 1;\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/date-service.js","/**\n* @constructor AccountService\n* @description Encapsulate all account handling functionality\n*/\nexport default function AccountService() {\n  const obfuscateAccountNumber = (accNo) => `****${accNo.substring(4)}`;\n\n  return {\n    /**\n     * @name AccountService#accountNameOrNumber\n     * @type {function}\n     * @description return the account nickname, else a blurred acc number\n     * @param {module:model-bb-billpay-ng.PaymentAccount} account\n     * @return {string}\n     */\n    accountNameOrNumber(account) {\n      const { accountNickName, accountNumber } = account;\n      const obfuscatedAccountNumber = obfuscateAccountNumber(accountNumber);\n\n      return accountNickName || obfuscatedAccountNumber;\n    },\n\n    /**\n     * @name AccountService#accountNameAndNumber\n     * @type {function}\n     * @description return the account nickname & blurred acc number, else just a blurred acc number\n     * @param {module:model-bb-billpay-ng.PaymentAccount} account\n     * @return {string}\n     */\n    accountNameAndNumber({ accountNickName, accountNumber }) {\n      const obfuscatedAccountNumber = obfuscateAccountNumber(accountNumber);\n\n      return accountNickName ?\n        `${accountNickName} (${obfuscatedAccountNumber})` : obfuscatedAccountNumber;\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/account-service.js","/**\n* @constructor PaymentService\n* @param {DateService} dateService\n* @param {ExpeditedService} expeditedService\n* @param {BillpayModel} model\n* @param {StateContainer} viewModel\n* @param {Object} events\n* @description Encapsulate all payment handling functionality for billpay.\n*/\nexport default function PaymentService(dateService, expeditedService, model, viewModel, events) {\n  // List the valid payments to be made and group them by account for display\n  const summarisePayments = (payees) =>\n    payees.reduce((paymentData, payee) => {\n      const pd = paymentData;\n      const {\n        paymentAmount,\n        paymentAccount,\n        paymentDate,\n        paymentMemo,\n        overnightDeliveryAddress } = payee.newPayment;\n      const { accountNumber } = paymentAccount;\n      let newPaymentValue = parseFloat(paymentAmount.value);\n\n      if (!newPaymentValue) return pd;\n\n      // If no group for this account exists, create it\n      if (!pd.paymentsByAccount[accountNumber]) {\n        Object.assign(pd.paymentsByAccount, {\n          [accountNumber]: {\n            paymentAccount,\n            payees: [],\n            total: 0,\n            rushFeeTotal: 0,\n            rushUsed: false,\n          },\n        });\n      }\n\n      // Add rush fee to total if applicable\n      const isDateRush = dateService.isDateRush(paymentDate, payee.paymentServicesObj);\n      let rushFee = 0;\n      if (isDateRush) {\n        rushFee = expeditedService.getExpeditedFee(payee.paymentServicesObj);\n        newPaymentValue += rushFee;\n        pd.paymentsByAccount[accountNumber].rushFeeTotal += rushFee;\n        pd.paymentsByAccount[accountNumber].rushUsed = true;\n      }\n\n      // Add this payee and increase the total of the group\n      pd.paymentsByAccount[accountNumber].payees.push(payee);\n      pd.paymentsByAccount[accountNumber].total += newPaymentValue;\n\n      // Push the payment pnto the overall list of payments\n      pd.payments.push({\n        paymentMemo,\n        paymentAccount,\n        payeeID: payee.id,\n        payeeDisplayName: payee.nickName || payee.name,\n        rush: {\n          paymentFee: rushFee,\n          hasBeenUsed: isDateRush,\n        },\n        paymentAmount: parseFloat(paymentAmount.value),\n        paymentDate: dateService.convertDateToServerDayString(paymentDate),\n        overnightDeliveryAddress,\n      });\n\n      return pd;\n    }, {\n      paymentsByAccount: {},\n      payments: [],\n    });\n\n  return {\n    /**\n     * @name PaymentService#summarisePayments\n     * @type {function}\n     * @description Return a summary of payments. Listed & grouped by payment account\n     * @param {module:model-bb-billpay-ng.PayeeSummary[]} payees The list of payees\n     * @return {Object} Object containing an object of payments by account, and a list of payments\n     */\n    summarisePayments,\n\n    /**\n     * @name PaymentService#getPayment\n     * @type {function}\n     * @return {Promise<void>}\n     * @description Update the view with a payment loaded from the data source\n     */\n    getPayment(id) {\n      viewModel.beforeGetPayment();\n      events.beforeGetPayment();\n      return model.getPayment(id)\n        .then((response) => {\n          viewModel.afterGetPaymentSuccess(response);\n          events.afterGetPaymentSuccess(response);\n        })\n        .catch((error) => {\n          viewModel.afterGetPaymentError(error);\n          events.afterGetPaymentError(error);\n          throw error;\n        });\n    },\n\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/payment-service.js","/**\n * @constructor ExpeditedService\n * @description Encapsulate all expedite functionality\n */\nexport default function ExpeditedService(widget) {\n  /**\n   * @name getPayment\n   * @type {function}\n   * @description get payment object\n   * @param {object} paymentServicesObj\n   * @param {object} [paymentServicesObj.EXPEDITED_PAYMENT]\n   * @param {object} [paymentServicesObj.OVERNIGHT_CHECK]\n   * @return {object|undefined}\n   */\n  const getPayment = ({ EXPEDITED_PAYMENT, OVERNIGHT_CHECK }) =>\n    EXPEDITED_PAYMENT || OVERNIGHT_CHECK;\n\n  /**\n   * @name isExpedited\n   * @inner\n   * @type {function}\n   * @description return true if payment is expedited\n   * @param {object} paymentServicesObj\n   * @return {boolean}\n   */\n  const isExpedited = (paymentServicesObj) => !!(getPayment(paymentServicesObj));\n\n  /**\n   * @name getExpeditedFee\n   * @inner\n   * @type {function}\n   * @description return paymentFee from payment object\n   * @param {object} paymentServicesObj\n   * @return {number|undefined}\n   */\n  const getExpeditedFee = (paymentServicesObj) => {\n    const payment = getPayment(paymentServicesObj);\n    return payment ? payment.paymentFee : undefined;\n  };\n\n  return {\n    /**\n     * @name ExpeditedService#isExpedited\n     * @type {function}\n     * @description return true if payment is expedited\n     * @param {object} paymentServicesObj\n     * @return {boolean}\n     */\n    isExpedited,\n\n    /**\n     * @name ExpeditedService#getExpeditedFee\n     * @type {function}\n     * @description return paymentFee from payment object\n     * @param {object} paymentServicesObj\n     * @return {number|undefined}\n     */\n    getExpeditedFee,\n\n    /**\n     * @name ExpeditedService#getEarliestPaymentDate\n     * @type {function}\n     * @description return earliestPaymentDate from payment object\n     * @param {object} paymentServicesObj\n     * @return {string|undefined}\n     */\n    getEarliestPaymentDate: (paymentServicesObj) => {\n      const payment = getPayment(paymentServicesObj);\n      return payment ? payment.earliestPaymentDate : undefined;\n    },\n\n    /**\n     * @name ExpeditedService#getCutoffTime\n     * @type {function}\n     * @description return cutoffTime from payment object\n     * @param {object} paymentServicesObj\n     * @return {string|undefined}\n     */\n    getCutoffTime: (paymentServicesObj) => {\n      const payment = getPayment(paymentServicesObj);\n      return payment ? payment.cutoffTime : undefined;\n    },\n\n    /**\n     * @name ExpeditedService#getPaymentDate\n     * @type {function}\n     * @description return earliest or next payment date  from payment object depending upon cutoff\n     * @param {object} paymentServicesObj\n     * @return {string|undefined}\n     */\n    getPaymentDate: (now, paymentServicesObj) => {\n      const payment = getPayment(paymentServicesObj);\n      if (payment) {\n        const cutoffTime = new Date(payment.cutoffTime);\n        return now < cutoffTime ? payment.earliestPaymentDate : payment.nextPaymentDate;\n      }\n      return undefined;\n    },\n\n    /**\n     * @name BillpayViewPaymentsService#hasFeeBeenWaived\n     * @type {function}\n     * @description Is there an expedited payment and has the fee for it been waived\n     * @param {object} paymentServicesObj\n     * @return {boolean}\n     */\n    hasFeeBeenWaived: (paymentServicesObj) =>\n      isExpedited(paymentServicesObj) && getExpeditedFee(paymentServicesObj) === 0,\n\n    /**\n     * @name BillpayViewPaymentsService#showWaivedFees\n     * @type {boolean}\n     * @description Return the showWaivedRushFees value from widget preferences\n     */\n    get showWaivedFees() {\n      return widget.getBooleanPreference('showWaivedRushFees');\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/expedited-service.js","import { uiError } from './helpers';\n\n/**\n * @constructor ManagePaymentViewModel\n * @param {StateContainer} viewModel\n * @param {Hooks} hooks\n */\nexport default function ManagePaymentViewModel(\n  viewModel,\n  hooks,\n  dateService,\n  accountService,\n  errorHookUtilities\n) {\n  viewModel.setState(hooks.setState({}));\n\n  // set payment services as a map on payee for keyed access\n  const addPaymentServicesObj = (payee) => {\n    const paymentServices = payee.paymentServices || [];\n\n    return Object.assign(payee, {\n      paymentServicesObj: paymentServices.reduce((services, service) =>\n        Object.assign(services, { [service.paymentServiceType]: service }), {}),\n    });\n  };\n\n  /**\n   * @name addNewPaymentObj\n   * @type {function}\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @param {module:model-bb-billpay-ng.PaymentAccount} [paymentAccount]\n   * @description Take a payee and set/reset the newPayment object. Setting the paymentAccount if\n   *  provided\n   * @return {Object} transformed payee\n   */\n  const addNewPaymentObj = (payee, paymentAccount) =>\n    Object.assign(payee, {\n      newPayment: {\n        paymentDate: dateService.getFirstFreePaymentDate(payee),\n        paymentAmount: {\n          currency: null,\n          value: 0,\n        },\n        paymentMemo: '',\n        paymentAccount: paymentAccount || null,\n        overnightDeliveryAddress: payee.overnightDeliveryAddress || {\n          address1: null,\n          address2: null,\n          city: null,\n          state: null,\n          postalCode: null,\n        },\n      },\n    });\n\n\n  return {\n    /**\n     * @name ManagePaymentViewModel#beforeGetPayeesSummary\n     * @type {function}\n     * @description Amend the view to inform the user the list of payees is being loaded\n     * @return {ViewState} The new state of the view model\n     */\n    beforeGetPayeesSummary: viewModel.createAction((current) =>\n      hooks.beforeGetPayeesSummary({\n        ...current,\n        isLoadingPayees: true,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterGetPayeesSummarySuccess\n     * @type {function}\n     * @description Amend the view to display the list of payees\n     * @param {object} updateData data used to update viewmodel\n     * @param {Array<module:model-bb-billpay-ng.PayeeSummary>} updateData.payeeSummaries\n     * @param {string} [updateData.newPayeeId] id of last created payee\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetPayeesSummarySuccess: viewModel.createAction(\n      (current, { payeeSummaries, newPayeeId }) => {\n        // If there are already accounts populated then keep track of the first one\n        const { accounts } = current;\n        const account = accounts && accounts.length && accounts[0];\n\n        return hooks.afterGetPayeesSummarySuccess({\n          ...current,\n          payees: payeeSummaries\n            .map(addPaymentServicesObj)\n            .map(payee => ({\n              ...payee,\n              isNewPayee: newPayeeId && newPayeeId.length && payee.id === newPayeeId,\n            }))\n            .map(payee => addNewPaymentObj(payee, account))\n            .map(hooks.transformPayee),\n          isLoadingPayees: false,\n        });\n      }),\n\n    /**\n     * @name ManagePaymentViewModel#afterGetPayeesSummaryError\n     * @type {function}\n     * @description Amend the view to display the error encountered when loading the list of payees\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetPayeesSummaryError: viewModel.createAction((current, error) =>\n      hooks.afterGetPayeesSummaryError({\n        ...current,\n        error: uiError(error),\n        isLoadingPayees: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#beforeGetAccounts\n     * @type {function}\n     * @description Amend the view to inform the user the list of accounts is being loaded\n     * @param {ViewState} current The current state of the view model\n     * @return {ViewState} The new state of the view model\n     */\n    beforeGetAccounts: viewModel.createAction((current) =>\n      hooks.beforeGetAccounts({\n        ...current,\n        isLoadingAccounts: true,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterGetAccountsSuccess\n     * @type {function}\n     * @description Amend the view to display the list of accounts\n     * @param {Array<module:model-bb-billpay-ng.PaymentAccount>} paymentAccounts\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetAccountsSuccess: viewModel.createAction((current, paymentAccounts) =>\n      hooks.afterGetAccountsSuccess({\n        ...current,\n        accounts: paymentAccounts\n          .map(account => ({\n            ...account,\n            displayName: accountService.accountNameOrNumber(account),\n            longDisplayName: accountService.accountNameAndNumber(account),\n          }))\n          .map(hooks.transformAccount),\n        isLoadingAccounts: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterGetAccountsError\n     * @type {function}\n     * @description Amend the view to display the error encountered when loading the list of\n     *    accounts\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetAccountsError: viewModel.createAction((current, error) =>\n      hooks.afterGetAccountsError({\n        ...current,\n        error: uiError(error),\n        isLoadingAccounts: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#beforePostPaymentsRecord\n     * @type {function}\n     * @description Amend the view to inform the user the payment is currently being created\n     * @return {ViewState} The new state of the view model\n     */\n    beforePostPaymentsRecord: viewModel.createAction((current) =>\n      hooks.beforePostPaymentsRecord({\n        ...current,\n        postPaymentsError: false,\n        isPostingPayment: true,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterPostPaymentsRecordSuccess\n     * @type {function}\n     * @description Amend the view to inform the user that the payments have successfully been\n     *  created\n     * @return {ViewState} The new state of the view model\n     */\n    afterPostPaymentsRecordSuccess: viewModel.createAction((current) =>\n      hooks.afterPostPaymentsRecordSuccess({\n        ...current,\n        isPostingPayment: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterPostPaymentsRecordError\n     * @type {function}\n     * @description Amend the view to display the error encountered when creating the payments\n     *  including any available payments errors\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterPostPaymentsRecordError: viewModel.createAction((current, error) =>\n      hooks.afterPostPaymentsRecordError({\n        ...current,\n        paymentsSummary: {\n          ...current.paymentsSummary,\n          payments: errorHookUtilities.addPaymentErrors(current, error),\n        },\n        error: uiError(error),\n        postPaymentsError: true,\n        isPostingPayment: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#beforePostRecurringPaymentsRecord\n     * @type {function}\n     * @description Amend the view to inform the user the recurring payment is currently being\n     *   created\n     * @return {ViewState} The new state of the view model\n     */\n    beforePostRecurringPaymentsRecord: viewModel.createAction((current) =>\n      hooks.beforePostRecurringPaymentsRecord({\n        ...current,\n        isPostingRecurringPayments: true,\n        postRecurringPaymentsError: false,\n        postingRecurringPaymentsComplete: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterPostRecurringPaymentsRecordSuccess\n     * @type {function}\n     * @description Amend the view to inform the user that the recurring payment has successfully\n     *   been created\n     * @param {object} newPayment\n     * @param {object} newPayment.id - The new payment id\n     * @return {ViewState} The new state of the view model\n     */\n    afterPostRecurringPaymentsRecordSuccess: viewModel.createAction((current, { id }) =>\n      hooks.afterPostRecurringPaymentsRecordSuccess({\n        ...current,\n        isPostingRecurringPayments: false,\n        postingRecurringPaymentsComplete: true,\n        newRecurringPaymentsId: id,\n        errorMap: {},\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterPostRecurringPaymentsRecordError\n     * @type {function}\n     * @description Amend the view to display the error encountered when creating the recurring\n     *   payment\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterPostRecurringPaymentsRecordError: viewModel.createAction((current, error) => {\n      const thisError = errorHookUtilities.transformErrorMap(error);\n      return hooks.afterPostRecurringPaymentsRecordError({\n        ...current,\n        error: thisError,\n        errorMap: errorHookUtilities.getErrorMap(thisError.errors),\n        isPostingRecurringPayments: false,\n        postRecurringPaymentsError: true,\n      });\n    }),\n\n    /**\n     * @name ManagePaymentViewModel#beforeGetPayment\n     * @type {function}\n     * @description Amend the view to inform the user the payment is being loaded\n     * @return {ViewState} The new state of the view model\n     */\n    beforeGetPayment: viewModel.createAction((current) =>\n      hooks.beforeGetPayment({\n        ...current,\n        isLoadingPayment: true,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterGetPaymentSuccess\n     * @type {function}\n     * @description Amend the view to display the payment\n     * @param {Array<module:model-bb-billpay-ng.Payment>} payment\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetPaymentSuccess: viewModel.createAction((current, payment) =>\n      hooks.afterGetPaymentSuccess({\n        ...current,\n        payment: hooks.transformPayment(payment),\n        isLoadingPayment: false,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterGetPaymentError\n     * @type {function}\n     * @description Amend the view to display the error encountered when loading the payment\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetPaymentError: viewModel.createAction((current, error) =>\n      hooks.afterGetPaymentError({\n        ...current,\n        error: uiError(error),\n        isLoadingPayment: false,\n      })\n    ),\n\n    /**\n    * @name ManagePaymentViewModel#beforePutPaymentRecord\n    * @type {function}\n    * @description Amend the view to inform the user the payment is currently being updated\n    * @return {ViewState} The new state of the view model\n    */\n    beforePutPaymentRecord: viewModel.createAction((current) =>\n      hooks.beforePutPaymentRecord({\n        ...current,\n        putPaymentError: false,\n        isPuttingPayment: true,\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterPutPaymentRecordSuccess\n     * @type {function}\n     * @description Amend the view to inform the user that the payments have successfully been\n     *  updated\n     * @return {ViewState} The new state of the view model\n     */\n    afterPutPaymentRecordSuccess: viewModel.createAction((current) =>\n      hooks.afterPutPaymentRecordSuccess({\n        ...current,\n        isPuttingPayment: false,\n        errorMap: {},\n      })\n    ),\n\n    /**\n     * @name ManagePaymentViewModel#afterPutPaymentRecordError\n     * @type {function}\n     * @description Amend the view to display the error encountered when updating the payment\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterPutPaymentRecordError: viewModel.createAction((current, error) => {\n      const thisError = errorHookUtilities.transformErrorMap(error);\n      return hooks.afterPutPaymentRecordError({\n        ...current,\n        error: thisError,\n        errorMap: errorHookUtilities.getErrorMap(thisError.errors),\n        putPaymentError: true,\n        isPuttingPayment: false,\n      });\n    }),\n\n    /**\n     * @name ManagePaymentViewModel#clearBackendError\n     * @type {function}\n     * @param {string} inputName the input to clear error against\n     * @description Amend the state to clear an input error\n     */\n    clearBackendError: viewModel.createAction((current, inputName) => ({\n      ...current,\n      errorMap: errorHookUtilities.clearBackendError(inputName, current),\n    })),\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/view-model.js","/* eslint-disable import/prefer-default-export */\nimport { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\nconst errorMessages = {\n  [E_AUTH]: 'billpay.model.error.auth',\n  [E_CONNECTIVITY]: 'billpay.model.error.connectivity',\n  [E_USER]: 'billpay.model.error.user',\n  [E_UNEXPECTED]: 'billpay.model.error.unexpected',\n};\n\n/**\n * @name uiError\n *\n * @inner\n * @type {function}\n * @description Creates an error object for template\n * @param {object} modelError Error object\n * @returns {{message: string}}\n */\nexport const uiError = (modelError) => {\n  let message = '';\n\n  if (modelError && modelError.code) {\n    message = errorMessages[modelError.code];\n  }\n\n  return { message };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/helpers.js","// By default return the unchanged argument\nconst identity = any => any;\n\n/**\n * @name Hooks\n * @type {object}\n * @extends module:lib-bb-widget-extension-ng.Hooks\n */\nexport default {\n  /**\n   * @name Hooks#setState\n   * @type {function}\n   * @description add any state required by extension\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  setState: identity,\n\n  /**\n   * @name Hooks#transformPayee\n   * @type {function}\n   * @description Make any modifications needed to the loaded payee\n   * @param {PayeeSummary} payee The current state of the payee\n   * @return {Object} The transformed payee\n   */\n  transformPayee: identity,\n\n  /**\n   * @name Hooks#transformAccount\n   * @type {function}\n   * @description Make any modifications needed to the loaded account\n   * @param {PaymentAccount} account The current state of the account\n   * @return {Object} The transformed account\n   */\n  transformAccount: identity,\n\n  /**\n   * @name Hooks#transformPayment\n   * @type {function}\n   * @description Make any modifications needed to the loaded payment\n   * @param {Payment} payment The current state of the payment\n   * @return {Object} The transformed payment\n   */\n  transformPayment: identity,\n\n  /**\n   * @name Hooks#beforeGetPayeesSummary\n   * @type {function}\n   * @description Amend the view before loading the list of payees\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeGetPayeesSummary: identity,\n\n  /**\n   * @name Hooks#afterGetPayeesSummarySuccess\n   * @type {function}\n   * @description Amend the view after successfully loading the list of payees\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetPayeesSummarySuccess: identity,\n\n  /**\n   * @name Hooks#afterGetPayeesSummaryError\n   * @type {function}\n   * @description Amend the view after unsuccessfully loading the list of payees\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetPayeesSummaryError: identity,\n\n  /**\n   * @name Hooks#beforeGetAccounts\n   * @type {function}\n   * @description Amend the view before loading the list of accounts\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeGetAccounts: identity,\n\n  /**\n   * @name Hooks#afterGetAccountsSuccess\n   * @type {function}\n   * @description Amend the view after successfully loading the list of accounts\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetAccountsSuccess: identity,\n\n  /**\n   * @name Hooks#afterGetAccountsError\n   * @type {function}\n   * @description Amend the view after unsuccessfully loading the list of accounts\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetAccountsError: identity,\n\n  /**\n   * @name Hooks#beforePostPaymentsRecord\n   * @type {function}\n   * @description Amend the view before posting a new batch of payments\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforePostPaymentsRecord: identity,\n\n  /**\n   * @name Hooks#afterPostPaymentsRecordSuccess\n   * @type {function}\n   * @description Amend the view after successfully posting a new batch of payments\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterPostPaymentsRecordSuccess: identity,\n\n  /**\n   * @name Hooks#afterPostPaymentsRecordError\n   * @type {function}\n   * @description Amend the view after unsuccessfully posting a new batch of payments\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterPostPaymentsRecordError: identity,\n\n  /**\n   * @name Hooks#beforePostRecurringPaymentsRecord\n   * @type {function}\n   * @description Amend the view before posting a new recurring payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforePostRecurringPaymentsRecord: identity,\n\n  /**\n   * @name Hooks#afterPostRecurringPaymentsRecordSuccess\n   * @type {function}\n   * @description Amend the view after successfully posting a new recurring payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterPostRecurringPaymentsRecordSuccess: identity,\n\n  /**\n   * @name Hooks#afterPostRecurringPaymentsRecordError\n   * @type {function}\n   * @description Amend the view after unsuccessfully posting a new recurring payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterPostRecurringPaymentsRecordError: identity,\n\n  /**\n   * @name Hooks#beforeGetPayment\n   * @type {function}\n   * @description Amend the view before loading the payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeGetPayment: identity,\n\n  /**\n   * @name Hooks#afterGetPaymentSuccess\n   * @type {function}\n   * @description Amend the view after successfully loading the payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetPaymentSuccess: identity,\n\n  /**\n   * @name Hooks#afterGetPaymentError\n   * @type {function}\n   * @description Amend the view after unsuccessfully loading the payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetPaymentError: identity,\n\n  /**\n   * @name Hooks#beforePutPaymentRecord\n   * @type {function}\n   * @description Amend the view before putting a payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforePutPaymentRecord: identity,\n\n  /**\n   * @name Hooks#afterPutPaymentRecordSuccess\n   * @type {function}\n   * @description Amend the view after successfully putting  a payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterPutPaymentRecordSuccess: identity,\n\n  /**\n   * @name Hooks#afterPutPaymentRecordError\n   * @type {function}\n   * @description Amend the view after unsuccessfully putting a payment\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterPutPaymentRecordError: identity,\n};\n\n/**\n * @typedef {Object} PayeeSummary\n * @extends module:data-bb-billpay-http-ng.PayeeSummary\n */\n\n/**\n * @typedef {Object} PaymentAccount\n * @extends module:data-bb-billpay-http-ng.PaymentAccount\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/default-hooks.js","/**\n * @description Events that the widget fires\n * @type {object}\n */\nconst Events = {\n  BEFORE_GET_ACCOUNTS: 'bb.event.billpay.getAccounts.before',\n  AFTER_GET_ACCOUNTS: 'bb.event.billpay.getAccounts.after',\n  AFTER_GET_ACCOUNTS_ERROR: 'bb.event.billpay.getAccounts.error',\n  BEFORE_GET_PAYEES_SUMMARY: 'bb.event.billpay.getPayeesSummary.before',\n  AFTER_GET_PAYEES_SUMMARY: 'bb.event.billpay.getPayeesSummary.after',\n  AFTER_GET_PAYEES_SUMMARY_ERROR: 'bb.event.billpay.getPayeesSummary.error',\n  BEFORE_POST_PAYMENTS_RECORD: 'bb.event.billpay.postPaymentsRecord.before',\n  AFTER_POST_PAYMENTS_RECORD: 'bb.event.billpay.postPaymentsRecord.after',\n  AFTER_POST_PAYMENTS_RECORD_ERROR: 'bb.event.billpay.postPaymentsRecord.error',\n  BEFORE_POST_RECURRING_PAYMENTS_RECORD: 'bb.event.billpay.postRecurringPaymentsRecord.before',\n  AFTER_POST_RECURRING_PAYMENTS_RECORD: 'bb.event.billpay.postRecurringPaymentsRecord.after',\n  AFTER_POST_RECURRING_PAYMENTS_RECORD_ERROR: 'bb.event.billpay.postRecurringPaymentsRecord.error',\n  BEFORE_GET_PAYMENT: 'bb.event.billpay.getPayment.before',\n  AFTER_GET_PAYMENT: 'bb.event.billpay.getPayment.after',\n  AFTER_GET_PAYMENT_ERROR: 'bb.event.billpay.getPayment.error',\n  BEFORE_PUT_PAYMENT: 'bb.event.billpay.putPayment.before',\n  AFTER_PUT_PAYMENT: 'bb.event.billpay.putPayment.after',\n  AFTER_PUT_PAYMENT_ERROR: 'bb.event.billpay.putPayment.error',\n};\n\nexport default (bus) => ({\n\n  /**\n   * @name beforeGetAccounts\n   * @type {function}\n   * @description Before get accounts event\n   */\n  beforeGetAccounts: () => {\n    bus.publish(Events.BEFORE_GET_ACCOUNTS);\n  },\n\n  /**\n   * @name afterGetAccountsSuccess\n   * @type {function}\n   * @param {object} data Account data\n   * @description After get accounts event\n   */\n  afterGetAccountsSuccess: (data) => {\n    bus.publish(Events.AFTER_GET_ACCOUNTS, { data });\n  },\n\n  /**\n   * @name afterGetAccountsError\n   * @type {function}\n   * @param {object} error Error while getting accounts\n   * @description After get accounts error\n   */\n  afterGetAccountsError: (error) => {\n    bus.publish(Events.AFTER_GET_ACCOUNTS_ERROR, { error });\n  },\n\n  /**\n   * @name beforeGetPayeesSummary\n   * @type {function}\n   * @description Before get payees summary event\n   */\n  beforeGetPayeesSummary: () => {\n    bus.publish(Events.BEFORE_GET_PAYEES_SUMMARY);\n  },\n\n  /**\n   * @name afterGetPayeesSummarySuccess\n   * @type {function}\n   * @param {object} data Payee summary data\n   * @description After get payees summary event\n   */\n  afterGetPayeesSummarySuccess: (data) => {\n    bus.publish(Events.AFTER_GET_PAYEES_SUMMARY, { data });\n  },\n\n  /**\n   * @name afterGetPayeesSummaryError\n   * @type {function}\n   * @param {object} error Error after get payees summary\n   * @description After get payees summary error event\n   */\n  afterGetPayeesSummaryError: (error) => {\n    bus.publish(Events.AFTER_GET_PAYEES_SUMMARY_ERROR, { error });\n  },\n\n  /**\n   * @name beforePostPaymentsRecord\n   * @type {function}\n   * @description Before post payments record event\n   */\n  beforePostPaymentsRecord: () => {\n    bus.publish(Events.BEFORE_POST_PAYMENTS_RECORD);\n  },\n\n  /**\n   * @name afterPostPaymentsRecordSuccess\n   * @type {function}\n   * @param {object} data Payment data\n   * @description Afterpost payments record success event\n   */\n  afterPostPaymentsRecordSuccess: (data) => {\n    bus.publish(Events.AFTER_POST_PAYMENTS_RECORD, { data });\n  },\n\n  /**\n   * @name afterPostPaymentsRecordError\n   * @type {function}\n   * @param {object} error Error while posting payments\n   * @description After post payments error\n   */\n  afterPostPaymentsRecordError: (error) => {\n    bus.publish(Events.AFTER_POST_PAYMENTS_RECORD_ERROR, { error });\n  },\n\n  /**\n   * @name beforePostRecurringPaymentsRecord\n   * @type {function}\n   * @description Before post recurring payment record event\n   */\n  beforePostRecurringPaymentsRecord: () => {\n    bus.publish(Events.BEFORE_POST_RECURRING_PAYMENTS_RECORD);\n  },\n\n  /**\n   * @name afterPostRecurringPaymentsRecordSuccess\n   * @type {function}\n   * @description After post recurring payment record success event\n   */\n  afterPostRecurringPaymentsRecordSuccess: (data) => {\n    bus.publish(Events.AFTER_POST_RECURRING_PAYMENTS_RECORD, { data });\n  },\n\n  /**\n   * @name afterPostRecurringPaymentsRecordError\n   * @type {function}\n   * @description After post recurring payment record error event\n   */\n  afterPostRecurringPaymentsRecordError: (error) => {\n    bus.publish(Events.AFTER_POST_RECURRING_PAYMENTS_RECORD_ERROR, { error });\n  },\n\n  /**\n   * @name Events#beforeGetPayment\n   * @type {function}\n   * @description trigger BEFORE_GET_PAYMENT event\n   */\n  beforeGetPayment: () => {\n    bus.publish(Events.BEFORE_GET_PAYMENT);\n  },\n\n  /**\n   * @name Events#afterGetPaymentSuccess\n   * @type {function}\n   * @description trigger AFTER_GET_PAYMENT event\n   * @param {module:model-bb-billpay-ng.Payment} payment\n   */\n  afterGetPaymentSuccess: (payment) => {\n    bus.publish(Events.AFTER_GET_PAYMENT, { payment });\n  },\n\n  /**\n   * @name Events#afterGetPaymentError\n   * @type {function}\n   * @description trigger AFTER_GET_PAYMENT_ERROR event\n   * @param {module:lib-bb-model-errors.ModelError} error\n   */\n  afterGetPaymentError: (error) => {\n    bus.publish(Events.AFTER_GET_PAYMENT_ERROR, { error });\n  },\n\n  /**\n   * @name Events#beforePutPaymentRecord\n   * @type {function}\n   * @description trigger BEFORE_PUT_PAYMENT event\n   */\n  beforePutPaymentRecord: () => {\n    bus.publish(Events.BEFORE_PUT_PAYMENT);\n  },\n\n  /**\n   * @name Events#afterPutPaymentRecordSuccess\n   * @type {function}\n   * @description trigger AFTER_PUT_PAYMENT event\n   * @param {module:model-bb-billpay-ng.Payment} payment\n   */\n  afterPutPaymentRecordSuccess: (payment) => {\n    bus.publish(Events.AFTER_PUT_PAYMENT, { payment });\n  },\n\n  /**\n   * @name Events#afterPutPaymentRecordError\n   * @type {function}\n   * @description trigger AFTER_PUT_PAYMENT_ERROR event\n   * @param {module:lib-bb-model-errors.ModelError} error\n   */\n  afterPutPaymentRecordError: (error) => {\n    bus.publish(Events.AFTER_PUT_PAYMENT_ERROR, { error });\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-billpay-manage-payment-ng/scripts/events.js"],"sourceRoot":""}