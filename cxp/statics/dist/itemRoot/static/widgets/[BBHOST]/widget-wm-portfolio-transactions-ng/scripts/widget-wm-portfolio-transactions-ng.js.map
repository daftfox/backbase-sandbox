{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**********************************","webpack:///webpack/bootstrap d0309a746b17cd403690?c295**********************************","webpack:///./widget-wm-portfolio-transactions-ng/model.xml","webpack:///external \"lib-bb-state-container-ng\"?8d56*******","webpack:///external \"lib-wm-portfolio-view-model-helper\"?8f7a*******","webpack:///external \"vendor-bb-angular\"?a114*************","webpack:///external \"lib-bb-event-bus-ng\"?8215*","webpack:///external \"lib-bb-widget-extension-ng\"?b547******","webpack:///external \"model-wm-portfolio-summary-ng\"?e4f4******","webpack:///external \"lib-bb-intent-ng\"?add1**","webpack:///external \"lib-bb-widget-ng\"?84ad*","webpack:///./widget-wm-portfolio-transactions-ng/scripts/index.js","webpack:///./widget-wm-portfolio-transactions-ng/scripts/controller.js","webpack:///./widget-wm-portfolio-transactions-ng/scripts/constants.js","webpack:///./widget-wm-portfolio-transactions-ng/scripts/view-model.js","webpack:///./widget-wm-portfolio-transactions-ng/scripts/service.js"],"names":["viewModelKey","portfolioTransactionsServiceKey","angular","module","modelPortfolioSummaryModuleKey","eventBusModuleKey","widgetModuleKey","bbIntentModuleKey","stateContainerModuleKey","factory","bbStateContainerKey","ViewModel","modelPortfolioSummaryKey","PortfolioTransactionsService","extensionContextKey","portfolioTransactionsService","controller","eventBusKey","widgetKey","bbIntentKey","Controller","run","viewModel","init","name","PortfolioTransactionsController","eventBus","widgetInstance","bbIntents","widgetItemsPerPage","getLongPreference","WidgetPropNames","ITEMS_PER_PAGE","DEFAULT_PAGE_SIZE","setSize","applyFilter","filterState","load","reload","portfolioId","positionId","positionInstrumentName","filter","account","id","instrumentName","publish","Event","UPDATE_TRANSACTION_FILTER","initIntents","handle","Intent","TRANSACTION_LIST","$onInit","loadFilterOptions","loadMore","done","getState","appliedFilter","then","catch","loadTransactionDetails","switchPositionType","state","errors","initialFilterOptions","assetClasses","categories","accounts","startDate","Date","setMonth","getMonth","getDate","setDate","setHours","setMilliseconds","endDate","initialFilterState","isin","counterpartyName","counterpartyAccount","timePeriod","assetClass","transactionCategory","amountRangeFrom","amountRangeTo","initialState","portfolioTransactions","data","list","loading","initialLoading","isFilterOpen","allTransactionsLoaded","size","from","filterOptions","positionType","portfolioTransactionsError","getPageParams","length","stateContainer","beforeLoadPortfolioTransactions","afterLoadPortfolioTransactionsSuccess","doMerge","doSelectPositionType","ids","map","reduce","current","afterLoadPortfolioTransactionsError","error","code","afterLoadFilterOptionsSuccess","concat","afterLoadFilterOptionsError","type","afterLoadTransactionDetailsSuccess","details","afterLoadTransactionDetailsError","model","fromDate","toDate","portfolioFilter","iSIN","subPortfolioId","fromAmount","toAmount","category","selectedFilter","Object","keys","newFilter","key","assign","getSelectedPortfolioId","loadTransactions","raw","loadTransactionsFilterOptions"],"mappings":"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","file":"widget-wm-portfolio-transactions-ng/scripts/widget-wm-portfolio-transactions-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lib-bb-state-container-ng\"), require(\"lib-wm-portfolio-view-model-helper\"), require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-wm-portfolio-summary-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-widget-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-wm-portfolio-transactions-ng\", [\"lib-bb-state-container-ng\", \"lib-wm-portfolio-view-model-helper\", \"vendor-bb-angular\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"model-wm-portfolio-summary-ng\", \"lib-bb-intent-ng\", \"lib-bb-widget-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-wm-portfolio-transactions-ng\"] = factory(require(\"lib-bb-state-container-ng\"), require(\"lib-wm-portfolio-view-model-helper\"), require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-wm-portfolio-summary-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-widget-ng\"));\n\telse\n\t\troot[\"widget-wm-portfolio-transactions-ng\"] = factory(root[\"lib-bb-state-container-ng\"], root[\"lib-wm-portfolio-view-model-helper\"], root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-wm-portfolio-summary-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-widget-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_86__, __WEBPACK_EXTERNAL_MODULE_88__, __WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_120__, __WEBPACK_EXTERNAL_MODULE_125__, __WEBPACK_EXTERNAL_MODULE_126__, __WEBPACK_EXTERNAL_MODULE_129__, __WEBPACK_EXTERNAL_MODULE_152__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0309a746b17cd403690","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-wm-portfolio-transactions-ng/model.xml\n// module id = 0\n// module chunks = 35","module.exports = __WEBPACK_EXTERNAL_MODULE_86__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 86\n// module chunks = 19 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_88__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-wm-portfolio-view-model-helper\"\n// module id = 88\n// module chunks = 19 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 93\n// module chunks = 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_120__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 120\n// module chunks = 27 28 35 36","module.exports = __WEBPACK_EXTERNAL_MODULE_125__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 125\n// module chunks = 28 29 30 31 32 33 34 35 36","module.exports = __WEBPACK_EXTERNAL_MODULE_126__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-wm-portfolio-summary-ng\"\n// module id = 126\n// module chunks = 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_129__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 129\n// module chunks = 28 33 34 35 36","module.exports = __WEBPACK_EXTERNAL_MODULE_152__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 152\n// module chunks = 33 34 35 37","/**\n * @module widget-wm-portfolio-transactions-ng\n *\n * @description\n * Portfolio transactions widget.\n *\n *\n * @example\n *  <div ng-controller=\"PortfolioTransactionsController as $ctrl\">\n *    <ul>\n *       <li ng-repeat=\"transaction in $ctrl.portfolioTransactions\">{{transaction.id}}</li>\n *    </ul>\n *  </div>\n */\nimport angular from 'vendor-bb-angular';\nimport { extensionContextKey } from 'lib-bb-widget-extension-ng';\nimport eventBusModuleKey, { eventBusKey }\n  from 'lib-bb-event-bus-ng';\nimport modelPortfolioSummaryModuleKey, { modelPortfolioSummaryKey }\n  from 'model-wm-portfolio-summary-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport Controller from './controller';\nimport ViewModel from './view-model';\nimport PortfolioTransactionsService from './service';\n\nconst viewModelKey = 'viewModel';\nconst portfolioTransactionsServiceKey = 'portfolioTransactionsService';\n\n/**\n * @name default\n * @type {string}\n * @description Angular module name\n */\nexport default angular\n  .module('widget-wm-portfolio-transactions-ng', [\n    modelPortfolioSummaryModuleKey,\n    eventBusModuleKey,\n    widgetModuleKey,\n    bbIntentModuleKey,\n    stateContainerModuleKey,\n  ])\n\n  .factory(viewModelKey, [bbStateContainerKey, ViewModel])\n  .factory(\n    portfolioTransactionsServiceKey,\n    [modelPortfolioSummaryKey, viewModelKey, PortfolioTransactionsService]\n  )\n  .factory(extensionContextKey, [\n    portfolioTransactionsServiceKey,\n    portfolioTransactionsService => ({ portfolioTransactionsService }),\n  ])\n\n  .controller('PortfolioTransactionsController', [\n    eventBusKey,\n    widgetKey,\n    bbIntentKey,\n    viewModelKey,\n    portfolioTransactionsServiceKey,\n    /* into */\n    Controller,\n  ])\n  .run([viewModelKey, viewModel => {\n    viewModel.init();\n  }])\n  .name;\n\n/**\n * @description Portfolio transactions type definition\n * @typedef {object} PortfolioTransactions\n * @property {array} data Set of portfolio transaction ids\n * @property {object} list Normalized set of portfolio transactions\n * @property {boolean} loading Loading flag\n */\n\n/**\n * @typedef {Object}               initialFilterState  - Initial state of transactions` filter\n * @property {String}              instrumentName      - Name of the instrument in transaction\n * @property {String}              isin                - Instrument/asset international code\n * @property {String}              counterpartyName    - Name of counterparty of the transaction\n * @property {String}              counterpartyAccount - Account id of counterpart in transaction\n * @property {timePeriod}          timePeriod          - Time period of transactions to filter\n * @property {assetClass}          assetClass          - Asset class selected to filter\n * @property {transactionCategory} transactionCategory - Transactions category selected to filter\n * @property {account}             account             - Acount selected to filter\n * @property {Number}              amountRangeFrom     - Amount to filter from\n * @property {Number}              amountRangeTo       - Amount to filter to\n */\n\n/**\n * @typedef {Object}        timePeriod\n * @property {Date}         startDate                  - start date\n * @property {Date}         endDate                    - end date\n */\n\n/**\n * @typedef {Object}        assetClass\n * @property {String}       name                       - asset class name\n * @property {String}       id                         - id of asset class\n */\n\n/**\n * @typedef {Object}        transactionCategory\n * @property {String}       name                       - transaction category name\n * @property {String}       id                         - id of transaction category\n */\n\n/**\n * @typedef {Object}        account\n * @property {String}       name                       - account name\n * @property {String}       id                         - id of account\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-portfolio-transactions-ng/scripts/index.js","import { DEFAULT_PAGE_SIZE, Event, Intent, WidgetPropNames } from './constants';\n\n/**\n * @name PortfolioTransactionsController\n * @ngkey PortfolioTransactionsController\n * @type {object}\n * @description\n * Portfolio Transactions controller.\n */\nexport default function PortfolioTransactionsController(\n  eventBus,\n  widgetInstance,\n  bbIntents,\n  viewModel,\n  portfolioTransactionsService\n) {\n  const widgetItemsPerPage =\n    widgetInstance.getLongPreference(WidgetPropNames.ITEMS_PER_PAGE) ||\n    DEFAULT_PAGE_SIZE;\n  if (widgetItemsPerPage) { viewModel.setSize(widgetItemsPerPage); }\n\n  /**\n   * @public\n   * @name PortfolioTransactionsController#applyFilter\n   * @description applies transactions filter,\n   * reload data passing applied filter in request\n   * @type {function}\n   * @param {object} filterState state of the filter to apply\n   * @returns {promise}\n   */\n  const applyFilter = (filterState) => {\n    viewModel.applyFilter(filterState);\n    return portfolioTransactionsService.load(filterState, false, false);\n  };\n\n  /**\n   * @private\n   * @description Reload widget using provided filter options\n   * @type {function}\n   * @fires update.transactions.filter\n   */\n  const reload = ({ portfolioId, positionId, positionInstrumentName }) => {\n    const filter = {\n      account: { id: portfolioId },\n      positionId,\n      instrumentName: positionInstrumentName,\n    };\n    eventBus.publish(Event.UPDATE_TRANSACTION_FILTER, filter);\n  };\n\n  /**\n   * @private\n   * @description Adds intent\n   * @type {function}\n   * @fires view.transactions\n   */\n  const initIntents = () => {\n    bbIntents.handle(Intent.TRANSACTION_LIST, reload);\n    bbIntents.init(() => null);\n  };\n\n  /*\n   * Widget initialization logic.\n   */\n  const $onInit = () => {\n    portfolioTransactionsService.loadFilterOptions();\n    initIntents();\n    return portfolioTransactionsService.load();\n  };\n\n  /**\n   * @description\n   * Loads more transactions and append them to the transaction's list\n   *\n   * @public\n   * @name PortfolioTransactionsController#loadMore\n   * @type {function}\n   * @returns {promise}\n   * @param {function} done Callback function for `ui-bb-load-more-ng` component\n   */\n  const loadMore = (done) => portfolioTransactionsService\n    .load(viewModel.getState().appliedFilter)\n    .then(done)\n    .catch(done);\n\n  return {\n    loadTransactionDetails: portfolioTransactionsService.loadTransactionDetails,\n    load: portfolioTransactionsService.load,\n    applyFilter,\n    switchPositionType: viewModel.switchPositionType,\n    $onInit,\n    loadMore,\n    get state() {\n      return viewModel.getState();\n    },\n    get errors() {\n      return viewModel.getState().errors;\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-portfolio-transactions-ng/scripts/controller.js","/**\n * @name Event\n * @type {object}\n *\n * @description\n * Widget events to be handled\n *\n * @property {string} TRANSACTION_LIST  Used to display a transaction list\n * to move to the transaction list\n * @property {string} UPDATE_TRANSACTION_FILTER  Used to set a new filters for transactions\n */\nexport const Event = {\n  UPDATE_TRANSACTION_FILTER: 'update.transactions.filter',\n};\n\n/**\n * @name Intent\n * @type {object}\n *\n * @description\n * Widget intents to be handled\n *\n * @property {string} TRANSACTION_LIST  Used when clicking on the transaction icon\n * to move to the transaction list\n */\nexport const Intent = {\n  TRANSACTION_LIST: 'view.transactions',\n};\n\n/**\n * @name WidgetPropNames\n * @type {object}\n *\n * @description\n * Custom widget properties\n *\n * @property {string} ITEMS_PER_PAGE  Number of items to display per page\n */\nexport const WidgetPropNames = {\n  ITEMS_PER_PAGE: 'bb.transaction.size',\n};\n\n/**\n * @description Default number of transaction records per page\n * @name DEFAULT_PAGE_SIZE\n * @type {number}\n */\nexport const DEFAULT_PAGE_SIZE = 20;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-portfolio-transactions-ng/scripts/constants.js","import { wrapActions } from 'lib-wm-portfolio-view-model-helper';\n\n/**\n * @name initialFilterOptions\n * @type {initialFilterOptions}\n * @description Initial options of transactions` filter\n */\nconst initialFilterOptions = {\n  assetClasses: [{ name: 'All', id: null }],\n  categories: [{ name: 'All', id: null }],\n  accounts: [{ name: 'All', id: null }],\n};\n\nconst startDate = new Date();\nstartDate.setMonth(startDate.getMonth() - 3);\nif (startDate.getDate() !== new Date().getDate()) {\n  startDate.setDate(1);\n} else {\n  startDate.setDate(startDate.getDate() + 1);\n}\nstartDate.setHours(0, 0, 0);\nstartDate.setMilliseconds(0);\n\nconst endDate = new Date();\nendDate.setHours(23, 59, 59, 999);\n\n/**\n * @name initialFilterState\n * @type {initialFilterState}\n * @description Initial state of transactions` filter\n */\nconst initialFilterState = {\n  instrumentName: '',\n  isin: '',\n  counterpartyName: '',\n  counterpartyAccount: '',\n  timePeriod: {\n    startDate,\n    endDate,\n  },\n  assetClass: {\n    name: 'All',\n    id: null,\n  },\n  transactionCategory: {\n    name: 'All',\n    id: null,\n  },\n  account: {\n    name: 'All',\n    id: null,\n  },\n  amountRangeFrom: null,\n  amountRangeTo: null,\n};\n\n/**\n * @private\n * @name initialState\n * @description Controller's state object\n * @type {object}\n * @property {PortfolioTransactions} portfolioTransactions an object of portfolio transactions\n * @property {boolean} initialLoading Boolean flag of initial loading\n * @property {boolean} isFilterOpen Boolean flag informing whether transactions filter is open\n * @property {object} appliedFilter State of applied transactions filter\n * @property {boolean} allTransactionsLoaded\n *                     Indicates whether all transactions from all pages are loaded\n * @property {number} from Offset of pages to show transactions\n *                           Indicates whether it's a brand new search. Means no page offset.\n * @property {object} filterOptions Object containing options for transactions filter\n * @property {string} positionType Selected position type to filter transactions by\n * @property {object} errors Description of received errors\n */\nconst initialState = {\n  initialFilterOptions,\n  initialFilterState,\n  portfolioTransactions: {\n    data: [],\n    list: {},\n    loading: false,\n  },\n  initialLoading: true,\n  isFilterOpen: false,\n  appliedFilter: null,\n  allTransactionsLoaded: false,\n  size: 0,\n  from: 0,\n  filterOptions: initialFilterOptions,\n  positionType: 'All',\n  errors: {\n    portfolioTransactionsError: null,\n  },\n};\n\n/**\n * @private\n * @name getPageParams\n * @type {function}\n * @description Returns incremented offset or tells whether all transactions were loaded\n * @param {object} state Current state of our widget\n * @param {array} data List of received transactions\n * @returns {object}\n *          Contains increased offset or flag that talls whether all transactions were loaded\n */\nconst getPageParams = (state, data) => {\n  if (data.length < state.size) {\n    return { allTransactionsLoaded: true };\n  }\n  return { from: state.from + 1 };\n};\n\n/**\n * @public\n * @name ViewModel\n * @type {function}\n * @description Creates ViewModel for PortfolioTransactions widget\n * @param {object} stateContainer\n * @returns {object} Model for changing our state\n */\nexport default stateContainer => ({\n\n  /**\n   * @public\n   * @name getState\n   * @type {function}\n   * @returns {function} Functions that returns state of our widget\n   */\n  getState: stateContainer.getState,\n\n  ...wrapActions(stateContainer, {\n\n    /**\n     * @public\n     * @name init\n     * @type {function}\n     * @param {object} state State of our widget\n     * @returns {object} Initial state\n     */\n    init: (state = initialState) => state,\n\n    /**\n     * @public\n     * @name beforeLoadPortfolioTransactions\n     * @type {function}\n     * @returns {{portfolioTransactions: {loading: true}}}\n     *          Sets loading flag of portfolio transactions to true\n     */\n    beforeLoadPortfolioTransactions: () => ({\n      portfolioTransactions: {\n        loading: true,\n      },\n    }),\n\n    /**\n     * @public\n     * @name afterLoadPortfolioTransactionsSuccess\n     * @type {function}\n     * @param {object} state Current state of out widget\n     * @param {array} data Data, returned from model\n     * @param {boolean} doMerge Flag, that tells whether we need to merge data or overwrite it\n     * @param {boolean} doSelectPositionType Flag, that tells whether position type must be set\n     * @returns {{initialLoading: boolean, positionType, portfolioTransactions:\n     *          {data: *, list: *, loading: boolean}, errors: {portfolioTransactionsError: null}}}\n     *          New state after transactions load\n     */\n    afterLoadPortfolioTransactionsSuccess: (state, { data, doMerge, doSelectPositionType }) => {\n      let positionType = state.positionType;\n      if (doSelectPositionType && data[0]) {\n        positionType = data[0].positionType;\n      }\n\n      const ids = data.map(({ id }) => id);\n      return {\n        ...getPageParams(state, data),\n        initialLoading: false,\n        positionType,\n        portfolioTransactions: {\n          data: doMerge ? [...state.portfolioTransactions.data, ...ids] : ids,\n          list: data.reduce((list, current) => ({ ...list, [current.id]: current }), {}),\n          loading: false,\n        },\n        errors: {\n          portfolioTransactionsError: null,\n        },\n      };\n    },\n\n    /**\n     * @public\n     * @name afterLoadPortfolioTransactionsError\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {object} error Error, which occurred after model method call\n     * @returns {{errors: {portfolioTransactionsError: number}}}\n     *          Saves received error to state\n     */\n    afterLoadPortfolioTransactionsError: (state, error) => ({\n      initialLoading: false,\n      errors: {\n        portfolioTransactionsError: error.code,\n      },\n    }),\n\n    /**\n     * @public\n     * @name afterLoadFilterOptionsSuccess\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {object} data Received filter options\n     * @returns {{filterOptions: object}} Sets new filter options\n     */\n    afterLoadFilterOptionsSuccess: (state, { data }) => ({\n      filterOptions: {\n        assetClasses: [{ name: 'All', id: null }].concat(data.assetClasses),\n        categories: [{ name: 'All', id: null }].concat(data.categories),\n        accounts: [{ name: 'All', id: null }].concat(data.accounts),\n      },\n    }),\n\n    /**\n     * @public\n     * @name afterLoadFilterOptionsError\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {object} error Error, which occurred after model method call\n     * @returns {{errors: {portfolioTransactionsError: number}}}\n     *          Saves received error to state\n     */\n    afterLoadFilterOptionsError: (state, error) => ({\n      errors: {\n        portfolioTransactionsError: error.code,\n      },\n    }),\n\n    /**\n     * @public\n     * @name switchPositionType\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {string} type New transactions' position type\n     * @returns {{positionType: string}} New transactions' position type\n     */\n    switchPositionType: (state, type) => ({\n      positionType: type,\n    }),\n\n    /**\n     * @public\n     * @name applyFilter\n     * @type {function}\n     * @param {object} filterState Set of filter rules\n     * @returns {{appliedFilter: object, allTransactionsLoaded: false, offset: 0}}\n     *          New transactions' filter state\n     */\n    applyFilter: (state, filterState) => ({\n      appliedFilter: filterState,\n      allTransactionsLoaded: false,\n      from: 0,\n    }),\n\n    /**\n     * @public\n     * @name setSize\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {number} size Amount of transactions per page\n     * @returns {{size: number}} Amount of transactions per page\n     */\n    setSize: (state, size) => ({ size }),\n\n    /**\n     * @public\n     * @name afterLoadTransactionDetailsSuccess\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {object} data Detailed transaction data\n     * @param {number} id Transaction id\n     * @returns {object} Detailed data for given transaction\n     */\n    afterLoadTransactionDetailsSuccess: (state, { data, id }) => ({\n      portfolioTransactions: {\n        list: {\n          [id]: {\n            details: data,\n          },\n        },\n      },\n    }),\n\n    /**\n     * @public\n     * @name afterLoadTransactionDetailsError\n     * @type {function}\n     * @param {object} state Current state of widget\n     * @param {object} error Error, which occurred after model method call\n     * @returns {{errors: {portfolioTransactionsError: number}}}\n     *          Saves received error to state\n     */\n    afterLoadTransactionDetailsError: (state, error) => ({\n      errors: {\n        portfolioTransactionsError: error.code,\n      },\n    }),\n  }),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-portfolio-transactions-ng/scripts/view-model.js","/**\n * @public\n * @name PortfolioTransactionsService\n * @type {function}\n * @description Service that serves to connect ng container with model and save data to view model\n * @param {object} model Portfolio transactions model module\n * @param {object} viewModel Portfolio transactions view model responsible for state\n * @returns {object} Service that connects controller with model\n */\nexport default (model, viewModel) => ({\n\n  /**\n   * @public\n   * @name load\n   * @type {function}\n   * @description Loads set of transactions\n   * @param {object} filterState Set of filter rules\n   * @param {boolean} doSelectPositionType Flag, that tells whether position type must be set\n   * @param {boolean} doMerge Flag, that tells whether we need to merge data or overwrite it\n   * @returns {promise} Promise, returned by model\n   */\n  load: (\n    filterState = viewModel.getState().initialFilterState,\n    doSelectPositionType = false,\n    doMerge = true\n  ) => {\n    const state = viewModel.getState();\n    const fromDate = filterState && filterState.timePeriod && filterState.timePeriod.startDate\n      ? new Date(new Date(filterState.timePeriod.startDate).setHours(0, 0, 0, 0))\n      : state.initialFilterState.timePeriod.startDate;\n    const toDate = filterState && filterState.timePeriod && filterState.timePeriod.endDate\n      ? new Date(new Date(filterState.timePeriod.endDate).setHours(23, 59, 59, 999))\n      : state.initialFilterState.timePeriod.endDate;\n    viewModel.beforeLoadPortfolioTransactions();\n    const portfolioFilter = {\n      iSIN: filterState && filterState.isin,\n      subPortfolioId: filterState && filterState.account && filterState.account.id,\n      size: state.size,\n      from: state.from,\n      fromDate,\n      toDate,\n      fromAmount: filterState && filterState.amountRangeFrom,\n      toAmount: filterState && filterState.amountRangeTo,\n      category:\n        filterState &&\n        filterState.transactionCategory &&\n        filterState.transactionCategory.id,\n      instrumentName: filterState && filterState.instrumentName,\n      counterpartyName: filterState && filterState.counterpartyName,\n      counterpartyAccount: filterState && filterState.counterpartyAccount,\n      assetClass: filterState && filterState.assetClass &&\n      (filterState.assetClass.id ? filterState.assetClass.name : null),\n      positionId: filterState && filterState.positionId,\n    };\n    const selectedFilter = Object.keys(portfolioFilter).reduce((newFilter, key) => {\n      if (portfolioFilter[key] || portfolioFilter[key] === 0) {\n        Object.assign(newFilter, { [key]: portfolioFilter[key] });\n      }\n      return newFilter;\n    }, {});\n\n    return model\n      .getSelectedPortfolioId()\n      .then(portfolioId =>\n        model.loadTransactions(\n          portfolioId,\n          selectedFilter\n        )\n      )\n      .then(raw =>\n        viewModel.afterLoadPortfolioTransactionsSuccess({ ...raw, doSelectPositionType, doMerge })\n      )\n      .catch((error) => {\n        viewModel.afterLoadPortfolioTransactionsError(error);\n        throw error;\n      });\n  },\n\n  /**\n   * @public\n   * @name loadFilterOptions\n   * @type {function}\n   * @description Loads options for transactions' filter\n   * @returns {promise} Promise, returned by model\n   */\n  loadFilterOptions: () =>\n    model\n      .getSelectedPortfolioId()\n      .then(model.loadTransactionsFilterOptions)\n      .then(viewModel.afterLoadFilterOptionsSuccess)\n      .catch(viewModel.afterLoadFilterOptionsError),\n\n  /**\n   * @public\n   * @name loadTransactionDetails\n   * @type {function}\n   * @description Loads additional data for given transaction\n   * @param {number} id Transaction id\n   * @returns {promise} Promise, returned by model\n   */\n  loadTransactionDetails: id =>\n    model\n      .getSelectedPortfolioId()\n      .then(portfolioId => model.loadTransactionDetails(portfolioId, id))\n      .then(({ data }) => viewModel.afterLoadTransactionDetailsSuccess({ data, id }))\n      .catch(viewModel.afterLoadTransactionDetailsError),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-wm-portfolio-transactions-ng/scripts/service.js"],"sourceRoot":""}