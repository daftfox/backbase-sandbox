{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap f2bcf63b501845cde614?5600*","webpack:///./widget-bb-saving-goals-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-saving-goals-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"model-bb-saving-goals-ng\"","webpack:///external \"lib-bb-state-container-ng\"","webpack:///external \"lib-bb-currency-ng\"","webpack:///./widget-bb-saving-goals-ng/scripts/constants.js","webpack:///./widget-bb-saving-goals-ng/scripts/service.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/index.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/list.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/helpers.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/product.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/create.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/edit.js","webpack:///./widget-bb-saving-goals-ng/scripts/view-model/delete.js","webpack:///./widget-bb-saving-goals-ng/scripts/router.js","webpack:///./widget-bb-saving-goals-ng/scripts/default-hooks.js","webpack:///./widget-bb-saving-goals-ng/scripts/list-controller.js","webpack:///./widget-bb-saving-goals-ng/scripts/form-controller.js"],"names":["moduleKey","hooksKey","serviceKey","viewModelKey","routerKey","module","factory","controller","service","router","getRule","run","bbIntent","bbStateContainer","viewModel","eventBus","widget","init","persist","getState","setState","then","publish","CXP_ITEM_LOADED","id","getId","BB_ITEM_LOADED","name","notificationLevels","DANGER","SUCCESS","errorMessages","successMessages","reduce","acc","method","Object","assign","Event","PRODUCT_SELECTED","Action","Message","model","startList","getSelectedProduct","product","afterSelectProductSuccess","afterSelectProductError","list","requestParams","beforeList","getSavingGoals","response","afterListSuccess","afterListError","startCreate","create","beforeStartCreate","getSchema","startEdit","goalId","edit","beforeStartEdit","schema","item","beforeCreate","createSavingGoal","afterCreateSuccess","afterCreateError","beforeEdit","updateSavingGoal","afterEditSuccess","afterEditError","deleteGoal","beforeDelete","deleteSavingGoal","afterDeleteSuccess","afterDeleteError","vm","createAction","current","isLoading","savingGoals","items","error","savingGoalsError","makeUIErrorMessage","message","level","modelError","code","makeUISuccessMessage","createInitialState","route","params","form","notifications","findSavingGoalById","savingGoalId","filter","goal","pop","selectedProduct","kind","currency","balance","availableBalance","arrangementId","goalAmount","cancelCreate","angular","copy","stateContainer","subscribers","setRoute","state","notifySubscribers","forEach","subscriber","getParams","createSelector","goto","overwrite","newParams","getRoute","subscribe","callback","sub","unsubscribe","getLoadParams","loadItems","onProductSelect","payload","bindEvents","$onInit","reload","$onDestroy","savingGoal","thenReload","save","value","parameters"],"mappings":"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","file":"widget-bb-saving-goals-ng/scripts/widget-bb-saving-goals-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"model-bb-saving-goals-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-currency-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-saving-goals-ng\", [\"vendor-bb-angular\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-ng\", \"lib-bb-intent-ng\", \"lib-bb-extension-helpers-ng\", \"model-bb-saving-goals-ng\", \"lib-bb-state-container-ng\", \"lib-bb-currency-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-saving-goals-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"model-bb-saving-goals-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-currency-ng\"));\n\telse\n\t\troot[\"widget-bb-saving-goals-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"model-bb-saving-goals-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-currency-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_21__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_25__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_30__, __WEBPACK_EXTERNAL_MODULE_31__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f2bcf63b501845cde614","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-saving-goals-ng/model.xml\n// module id = 0\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 16\n// module chunks = 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_21__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 21\n// module chunks = 1 2","/**\n * @module widget-bb-saving-goals-ng\n *\n * @description\n * Saving Goals\n */\nimport angular from 'vendor-bb-angular';\n\nimport extendHooks, { extensionContextKey } from 'lib-bb-widget-extension-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\nimport modelSavingGoalsModuleKey, { modelSavingGoalsKey } from 'model-bb-saving-goals-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport libBbCurrencyNgKey, { bbCurrencyRuleKey } from 'lib-bb-currency-ng';\n\nimport { Message } from './constants';\nimport SavingGoalsService from './service';\nimport ViewModel from './view-model/index';\nimport Router from './router';\nimport defaultHooks from './default-hooks';\n\n/* Controllers */\nimport ListController from './list-controller';\nimport FormController from './form-controller';\n\nconst moduleKey = 'widget-bb-saving-goals-ng';\nconst hooksKey = `${moduleKey}:hooks`;\nconst serviceKey = `${moduleKey}:service`;\nconst viewModelKey = `${moduleKey}:view-model`;\nconst routerKey = `${moduleKey}:router`;\n\nexport default angular\n  .module(moduleKey, [\n    eventBusModuleKey,\n    modelSavingGoalsModuleKey,\n    stateContainerModuleKey,\n    widgetModuleKey,\n    bbIntentModuleKey,\n    bbExtensionHelpersModuleKey,\n    libBbCurrencyNgKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    /* into */\n    ViewModel,\n  ])\n\n  .factory(serviceKey, [\n    modelSavingGoalsKey,\n    viewModelKey,\n    /* into */\n    SavingGoalsService,\n  ])\n\n  .factory(routerKey, [\n    bbStateContainerKey,\n    /* into */\n    Router,\n  ])\n\n  .controller('ListController', [\n    serviceKey,\n    routerKey,\n    eventBusKey,\n    viewModelKey,\n    /* into */\n    ListController,\n  ])\n  .controller('FormController', [\n    serviceKey,\n    routerKey,\n    /* into */\n    FormController,\n  ])\n\n  .factory(extensionContextKey, [\n    serviceKey,\n    routerKey,\n    /* into */\n    (service, router) => ({\n      service,\n      router,\n    }),\n  ])\n\n  .factory(extensionHelpersContextKey, [\n    bbCurrencyRuleKey,\n    (getRule) => ({\n      getRule,\n    }),\n  ])\n\n  .run([\n    bbIntentKey, bbStateContainerKey, viewModelKey, eventBusKey, widgetKey,\n    (bbIntent, bbStateContainer, viewModel, eventBus, widget) => {\n      viewModel.init();\n\n      bbIntent.persist(bbStateContainer.getState, bbStateContainer.setState);\n\n      bbIntent.init().then(() => {\n        eventBus.publish(Message.CXP_ITEM_LOADED, {\n          id: widget.getId(),\n        });\n\n        eventBus.publish(Message.BB_ITEM_LOADED, {\n          id: widget.getId(),\n        });\n      });\n    },\n  ])\n  .name;\n\n\n/**\n * @typedef {object} SavingGoalItem\n * @extends module:model-bb-saving-goals-ng.SavingGoalItem\n */\n\n/**\n * @typedef {object} HelperContext\n * @extends module:lib-bb-extension-helpers-ng.HelperContext\n */\n\n/**\n * @typedef {object} IntentContext\n * @extends module:lib-bb-extension-intents-ng.IntentContext\n */\n\n/**\n * @typedef {object} EventContext\n * @extends module:lib-bb-extension-events-ng.EventContext\n * @property {SavingGoalsService} SavingGoalsService\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 24\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_25__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 25\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 26\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 27\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 28\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-saving-goals-ng\"\n// module id = 29\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_30__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 30\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-currency-ng\"\n// module id = 31\n// module chunks = 2","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\n/**\n * @name notificationLevels\n *\n * @type {object}\n * @description\n * enum with levels for ui notifications\n */\nexport const notificationLevels = {\n  DANGER: 'danger',\n  SUCCESS: 'success',\n};\n\n/**\n * @name errorMessages\n *\n * @type {object}\n * @description\n * enum with standart model error message keys\n */\nexport const errorMessages = {\n  [E_AUTH]: 'saving.goals.model.error.auth',\n  [E_CONNECTIVITY]: 'saving.goals.model.error.connectivity',\n  [E_USER]: 'saving.goals.model.error.user',\n  [E_UNEXPECTED]: 'saving.goals.model.error.unexpected',\n};\n\n/**\n * @name successMessages\n *\n * @type {object}\n * @description\n * enum with success messages keys\n */\nexport const successMessages = (() =>\n  ['create', 'update', 'delete'].reduce(\n    (acc, method) => Object.assign(acc, { [method]: `saving.goals.model.${method}.success` }),\n    {}\n  )\n)();\n\n/**\n * @name Event\n * @inner\n * @type {object}\n * @description\n * Widget events enum\n */\nconst Event = {\n  PRODUCT_SELECTED: 'bb.event.product.selected',\n\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n  BB_ITEM_LOADED: 'bb.item.loaded',\n};\n\n/**\n * @name Action\n * @inner\n * @type {object}\n * @description\n * Widget actions enum\n */\nconst Action = {};\n\n/**\n * @name Message\n * @type {object}\n * @description\n * Widget messages enum\n */\nexport const Message = Object.assign({}, Action, Event);\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/constants.js","/**\n * The core functionality of the Saving goals widget\n *\n * The purpose of this module is to provide the main structure of the\n * widget. Outlining the workflows, connecting the data from the\n * model to the view via the customizations provided by the extension.\n *\n * @constructor SavingGoalsService\n * @param {SavingGoalsModel} model\n * @param {ViewModel} viewModel\n */\nexport default (model, viewModel) => ({\n  /**\n   * @name SavingGoalsService#startList\n   *\n   * @description\n   * Prepare the view for listing the items\n   *\n   * @type {function}\n   */\n  startList: () => model.getSelectedProduct()\n    .then(\n      viewModel.product.afterSelectProductSuccess,\n      viewModel.product.afterSelectProductError\n    ),\n\n  /**\n   * @name SavingGoalsService#list\n   *\n   * @description\n   * Update the view with an list of items loaded from the data source\n   *\n   * @type {function}\n   * @param {Object} requestParams paremeters of the SavingGoalsModel.GET request\n   * to be passed to the model\n   * @return {Promise}\n   */\n  list: (requestParams) => {\n    viewModel.list.beforeList();\n    return model.getSavingGoals(requestParams)\n      .then((response) => viewModel.list.afterListSuccess({\n        ...response,\n      }), viewModel.list.afterListError);\n  },\n\n  /**\n   * @name SavingGoalsService#startCreate\n   *\n   * @description\n   * Prepare the view for creating a new saving goal item\n   *\n   * @type {function}\n   */\n  startCreate: () => {\n    viewModel.create.beforeStartCreate(model.getSchema());\n  },\n\n  /**\n   * @name SavingGoalsService#startEdit\n   *\n   * @description\n   * Prepare the view for editing a saving goal\n   *\n   * @type {function}\n   * @param {string} goalId saving goal item id to be modified\n   */\n  startEdit: (goalId) => {\n    viewModel.edit.beforeStartEdit({ goalId, schema: model.getSchema() });\n  },\n\n  /**\n   * @name SavingGoalsService#create\n   *\n   * @description\n   * Creates a new saving goal item and triggers view update after it\n   *\n   * @type {function}\n   * @param {module:model-bb-saving-goals-ng.SavingGoalItem} item\n   * set of data for a new saving goal to be created\n   * @return {Promise}\n   */\n  create: (item) => {\n    viewModel.create.beforeCreate();\n    return model.createSavingGoal(item)\n      .then(\n        viewModel.create.afterCreateSuccess,\n        viewModel.create.afterCreateError\n      );\n  },\n\n  /**\n   * @name SavingGoalsService#edit\n   *\n   * @description\n   * Updates saving goal item and triggers view update after it\n   *\n   * @type {function}\n   * @param {module:model-bb-saving-goals-ng.SavingGoalItem} item saving goal item to be modified\n   * @return {Promise}\n   */\n  edit: (item) => {\n    viewModel.edit.beforeEdit();\n    return model.updateSavingGoal(item.id, item)\n      .then(\n        viewModel.edit.afterEditSuccess,\n        viewModel.edit.afterEditError\n      );\n  },\n\n  /**\n   * @name SavingGoalsService#deleteGoal\n   *\n   * @description\n   * Removes saving goal and triggers view update after it\n   *\n   * @type {function}\n   * @param {module:model-bb-saving-goals-ng.SavingGoalItem} item saving goal item to be deleted\n   * @return {Promise}\n   */\n  deleteGoal: (item) => {\n    viewModel.deleteGoal.beforeDelete();\n    return model.deleteSavingGoal(item.id, item)\n      .then(\n        viewModel.deleteGoal.afterDeleteSuccess,\n        viewModel.deleteGoal.afterDeleteError\n      );\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/service.js","import list from './list';\nimport product from './product';\nimport create from './create';\nimport edit from './edit';\nimport deleteGoal from './delete';\nimport { createInitialState } from './helpers';\n\n/**\n * @typedef {Object} ViewState\n * @property {boolean} isLoading\n * @property {SavingGoalItem[]} savingGoals\n * @property {object} route\n * @property {object} form\n * @property {object[]} notifications\n */\n\n/**\n * @name ViewModel\n * @type {object}\n * @ngkey widget-bb-saving-goals-ng:viewModel\n * @inner\n */\nexport default (vm) => ({\n  init: vm.createAction((current = createInitialState()) => current),\n  /**\n   * @name ViewModel#getState\n   * @description Returns view state\n   * @type {function}\n   * @inner\n   * @return {ViewState}\n   */\n  getState: vm.getState,\n  /**\n   * @name ViewModel#list\n   * @description\n   * Actions for updating the parts of the `ViewState` related to saving goals list\n   * @type {ViewModelListActions}\n   * @inner\n   */\n  list: list(vm),\n  /**\n   * @name ViewModel#product\n   * @description\n   * Actions for updating the parts of the `ViewState` related to currently selected product\n   * @type {ViewModelProductActions}\n   * @inner\n   */\n  product: product(vm),\n  /**\n   * @name ViewModel#create\n   * @description\n   * Actions for updating the parts of the `ViewState` related to saving goal creation\n   * @type {ViewModelCreateActions}\n   * @inner\n   */\n  create: create(vm),\n  /**\n   * @name ViewModel#edit\n   * @description\n   * Actions for updating the parts of the `ViewState` related to saving goal editing\n   * @type {ViewModelEditActions}\n   * @inner\n   */\n  edit: edit(vm),\n  /**\n   * @name ViewModel#deleteGoal\n   * @description\n   * Actions for updating the parts of the `ViewState` related to saving goal deleting\n   * @type {ViewModelDeleteActions}\n   * @inner\n   */\n  deleteGoal: deleteGoal(vm),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/index.js","import { makeUIErrorMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelListActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelListActions#beforeList\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user the list is being loaded\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeList: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelListActions#afterListSuccess\n   * @inner\n   * @type {function}\n   * @description Amend the view to display the list of items\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} response\n   * @param {module:model-bb-saving-goals-ng.SavingGoalItem[]} response.items\n   * @return {ViewState} The new state of the view model\n   */\n  afterListSuccess: vm.createAction((current, response = {}) => ({\n    ...current,\n    savingGoals: response.items ? response.items : [],\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelListActions#afterListError\n   * @inner\n   * @type {function}\n   * @description Amend the view to display the error encountered when loading the list\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {ModelError} error\n   * @return {ViewState} The new state of the view model\n   */\n  afterListError: vm.createAction((current, error) => ({\n    ...current,\n    savingGoalsError: makeUIErrorMessage(error),\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/list.js","import { notificationLevels, errorMessages, successMessages } from '../constants';\n\n/**\n * @name makeUIErrorMessage\n *\n * @type {function}\n * @description Creates an error object for template\n *\n * @inner\n * @param {object} modelError Error object\n * @returns {{message: string, level: string}} notification\n */\nexport const makeUIErrorMessage = modelError => {\n  let message = '';\n  const level = notificationLevels.DANGER;\n\n  if (modelError && modelError.code) {\n    message = errorMessages[modelError.code];\n  }\n  return { message, level };\n};\n\n/**\n * @name makeUISuccessMessage\n *\n * @type {function}\n * @description Creates a success notification for a specific\n * method of [success, update, delete]\n *\n * @inner\n * @param {string} method\n * @returns {{message: string, level: string}} notification\n */\nexport const makeUISuccessMessage = (method) => ({\n  message: successMessages[method],\n  level: notificationLevels.SUCCESS,\n});\n\n/**\n * @name createInitialState\n *\n * @type {function}\n * @description Creates an initial state\n *\n * @inner\n * @return {object}\n */\nexport const createInitialState = () => ({\n  isLoading: false,\n  savingGoals: [],\n  product: {},\n  route: {\n    name: 'list',\n    params: {},\n  },\n  form: {},\n  notifications: [],\n});\n\n/**\n * @name findSavingGoalById\n *\n * @type {function}\n * @description Helper to get an item from the array by a savingGoalId\n *\n * @inner\n * @param {Array<SavingGoalItem>} savingGoals an array of saving goals to search in\n * @param {string} savingGoalId id to be used for a search\n * @returns {SavingGoalItem} search result (single item)\n */\nexport const findSavingGoalById = (savingGoals = [], savingGoalId) =>\n  savingGoals.filter(goal => goal.id === savingGoalId).pop();\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/helpers.js","import { makeUIErrorMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelProductActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelProductActions#afterSelectProductSuccess\n   * @description Update the `ViewState` after new product is selected\n   * @type {function}\n   * @inner\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {?object} selectedProduct Selected Product\n   * @return {void}\n   */\n  afterSelectProductSuccess: vm.createAction((current, selectedProduct) => ({\n    ...current,\n    product: {\n      kind: selectedProduct.kind,\n      currency: selectedProduct.currency,\n      balance: selectedProduct.availableBalance,\n    },\n    route: {\n      ...current.route,\n      params: {\n        ...current.route.params,\n        arrangementId: selectedProduct.id,\n      },\n    },\n  })),\n\n  /**\n   * @name ViewModelProductActions#afterSelectProductError\n   * @description Update the `ViewState` after unsuccessful product selection\n   * @type {function}\n   * @inner\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {module:lib-bb-model-errors.ModelError} error\n   * @return {ViewState} The new state of the view model\n   */\n  afterSelectProductError: vm.createAction((current, error) => ({\n    ...current,\n    savingGoalsError: makeUIErrorMessage(error),\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/product.js","import { makeUIErrorMessage, makeUISuccessMessage } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelCreateActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelCreateActions#beforeStartCreate\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user that the create form is being\n   * ready to create a new item\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} schema saving goals POST schema to be used for validation\n   * @return {ViewState} The new state of the view model\n   */\n  beforeStartCreate: vm.createAction((current, schema) => ({\n    ...current,\n    form: { goalAmount: { currency: (current.product || {}).currency } },\n    schema,\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelCreateActions#beforeCreate\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user the create operation is being\n   * started\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeCreate: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelCreateActions#afterCreateSuccess\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that create operation\n   * successfully finished\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  afterCreateSuccess: vm.createAction((current) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUISuccessMessage('create')],\n    isLoading: false,\n  })),\n  /**\n   * @name ViewModelCreateActions#afterCreateError\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that there was\n   * an error during the creation\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} error\n   * @returns {ViewState} The new state of the view model\n   */\n  afterCreateError: vm.createAction((current, error) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUIErrorMessage(error)],\n    isLoading: false,\n  })),\n  /**\n   * @name ViewModelCreateActions#cancelCreate\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that creating\n   * operation is canceled\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  cancelCreate: vm.createAction((current) => ({\n    ...current,\n    form: null,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/create.js","/* global angular */\nimport { makeUIErrorMessage, makeUISuccessMessage, findSavingGoalById } from './helpers';\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelEditActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelEditActions#beforeStartEdit\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user that the edit form is being\n   * ready\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {{goalId: string, schema: object}} params object id and schema to be used for editing\n   * @return {ViewState} The new state of the view model\n   */\n  beforeStartEdit: vm.createAction((current, params) => {\n    const { goalId, schema } = params;\n    return {\n      ...current,\n      form: angular.copy(findSavingGoalById(current.savingGoals, goalId)),\n      schema,\n      isLoading: false,\n    };\n  }),\n\n  /**\n   * @name ViewModelEditActions#beforeEdit\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user the edit operation is being\n   * started\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeEdit: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelEditActions#afterEditSuccess\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that edit operation\n   * successfully finished\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  afterEditSuccess: vm.createAction((current) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUISuccessMessage('update')],\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelEditActions#afterEditError\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that there was\n   * an error during the editing\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} error server error response\n   * @returns {ViewState} The new state of the view model\n   */\n  afterEditError: vm.createAction((current, error) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUIErrorMessage(error)],\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/edit.js","import { makeUIErrorMessage, makeUISuccessMessage } from './helpers';\n\n\nexport default (vm) => ({\n  /**\n   * @name ViewModelDeleteActions\n   * @type {object}\n   * @inner\n   */\n\n  /**\n   * @name ViewModelDeleteActions#beforeDelete\n   * @inner\n   * @type {function}\n   * @description Amend the view to inform the user that delete operation is being started\n   *\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeDelete: vm.createAction((current) => ({\n    ...current,\n    isLoading: true,\n  })),\n\n  /**\n   * @name ViewModelDeleteActions#afterDeleteSuccess\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that delete operation successfully finished\n   *\n   * @param {ViewState} current The current state of the view model\n   * @returns {ViewState} The new state of the view model\n   */\n  afterDeleteSuccess: vm.createAction((current) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUISuccessMessage('delete')],\n    isLoading: false,\n  })),\n\n  /**\n   * @name ViewModelDeleteActions#afterDeleteError\n   * @inner\n   * @type {function}\n   * @description Ammend the view to inform the user that there was\n   * an error during the deleting\n   *\n   * @param {ViewState} current The current state of the view model\n   * @param {object} error server error response\n   * @returns {ViewState} The new state of the view model\n   */\n  afterDeleteError: vm.createAction((current, error) => ({\n    ...current,\n    notifications: [...(current.notifications || []), makeUIErrorMessage(error)],\n    isLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/view-model/delete.js","export default (stateContainer) => {\n  let subscribers = [];\n\n  const setRoute = stateContainer.createAction((state, { name, params }) => ({\n    ...state,\n    route: {\n      name,\n      params,\n    },\n  }));\n\n  const notifySubscribers = (name, params) => {\n    subscribers.forEach(subscriber => {\n      subscriber(name, params);\n    });\n  };\n\n  const getParams = stateContainer.createSelector(state => state.route.params);\n\n  return {\n    goto: (name, params, overwrite) => {\n      const newParams = overwrite ? params : Object.assign(getParams(), params);\n      setRoute({ name, params: newParams });\n      notifySubscribers(name, newParams);\n    },\n\n    getParams,\n\n    getRoute: stateContainer.createSelector(state => state.route.name),\n\n    subscribe: (callback) => {\n      subscribers = [...subscribers, callback];\n      return () => {\n        subscribers = subscribers.filter(sub => sub !== callback);\n      };\n    },\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/router.js","export default {};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/default-hooks.js","import { Message } from './constants';\n\n/**\n * @name ListController\n * @ngkey ListController\n * @type {object}\n * @description\n * Saving goals widget list controller\n */\nexport default function (service, router, eventBus, viewModel) {\n  let unsubscribe = null;\n\n  /**\n   * @name ListController#getLoadParams\n   * @description Returns request parameters for the list request\n   * @type {function}\n   * @inner\n   * @return {object} Request parameters\n   */\n  const getLoadParams = () => {\n    const { route } = viewModel.getState();\n    return route.params || {};\n  };\n\n  /**\n   * @name ListController#loadItems\n   * @description Fills the state with saving goal items\n   * @type {function}\n   * @inner\n   */\n  const loadItems = () => service.list(getLoadParams());\n\n  /**\n   * @name ListController#onProductSelect\n   * @description Method to be executed once product change event is received\n   * @type {function}\n   * @inner\n   * @param {object} payload Event payload\n   */\n  const onProductSelect = (payload) => {\n    viewModel.product.afterSelectProductSuccess(payload.product || null);\n    loadItems();\n  };\n\n  /**\n   * @description\n   * Adds subscriptions to bus events\n   *\n   * @inner\n   * @name ListController#bindEvents\n   * @type {function}\n   */\n  const bindEvents = () => {\n    eventBus.subscribe(Message.PRODUCT_SELECTED, onProductSelect);\n  };\n\n  /**\n   * @name ListController#$onInit\n   *\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @type {function}\n   * @returns {Promise} Promise which is resolved once contoller is initialized,\n   *   or rejected in case of errors\n   */\n  const $onInit = () => {\n    service.startList()\n      .then(bindEvents)\n      .then(loadItems);\n\n    unsubscribe = router.subscribe((route) => {\n      const params = router.getParams() || {};\n      if (route !== 'list' || !params.reload) {\n        return;\n      }\n\n      loadItems();\n    });\n  };\n\n  /**\n   * @name ListController#$onDestroy\n   *\n   * @description\n   * AngularJS Lifecycle hook used to destroy the controller\n   *\n   * @type {function}\n   */\n  const $onDestroy = () => {\n    if (unsubscribe) {\n      unsubscribe();\n    }\n  };\n\n  /**\n   * @name ListController#create\n   *\n   * @description\n   * Internal navigation for getting to create form from the list of items\n   *\n   * @type {function}\n   */\n  const create = () => {\n    router.goto('form');\n  };\n\n  /**\n   * @name ListController#edit\n   *\n   * @description\n   * Internal navigation for getting to edit form from the list of items\n   *\n   * @type {function}\n   * @param {string} goalId identifier of a saving goal to be changed\n   */\n  const edit = goalId => {\n    router.goto('form', { goalId });\n  };\n\n  /**\n   * @name ListController#deleteGoal\n   *\n   * @description\n   * Controller method to handle deleting of an item\n   *\n   * @type {function}\n   * @param {object} savingGoal Object to be removed\n   * @param {?boolean} thenReload Flag which defines if list should be reloaded\n   * from the server after delete operation (default true)\n   */\n  const deleteGoal = (savingGoal, thenReload = true) =>\n    service.deleteGoal(savingGoal)\n      .then(() => {\n        router.goto('list', { reload: thenReload });\n      });\n\n  return {\n    $onInit,\n    $onDestroy,\n    create,\n    edit,\n    deleteGoal,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/list-controller.js","/**\n * @name FormController\n * @ngkey FormController\n * @type {object}\n * @description\n * Saving goals widget form controller\n */\nexport default (service, router) => ({\n  /**\n   * @name FormController#$onInit\n   *\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @type {function}\n   * @returns {Promise} Promise which is resolved once contoller is initialized,\n   * or rejected in case of errors\n   */\n  $onInit() {\n    const goalId = (router.getParams() || {}).goalId;\n    if (goalId) {\n      service.startEdit(goalId);\n    } else {\n      service.startCreate();\n    }\n  },\n\n  /**\n   * @name FormController#$onDestroy\n   *\n   * @description\n   * AngularJS Lifecycle hook used to destroy the controller\n   *\n   * @type {function}\n   */\n  $onDestroy() {\n    const arrangementId = (router.getParams() || {}).arrangementId;\n    router.goto('list', { arrangementId }, true);\n  },\n\n  /**\n   * @name FormController#save\n   *\n   * @description\n   * Controller method to handle new/edited item save\n   * and to initiate state change via routing\n   *\n   * @type {function}\n   * @param {object} value Object to be saved as a saving goal\n   * @param {?boolean} thenReload Flag which defines if saving goals values should be reloaded\n   * from the server after create/update operation\n   */\n  save(value, thenReload = true) {\n    const arrangementId = (router.getParams() || {}).arrangementId;\n    const parameters = { reload: thenReload };\n    // if arrangementId is present, append it to the object\n    if (arrangementId) {\n      Object.assign(parameters, { arrangementId });\n    }\n\n    if (value.id) {\n      service.edit(value)\n        .then(() => {\n          router.goto('list', parameters, true);\n        });\n    } else {\n      if (arrangementId) {\n        Object.assign(value, { arrangementId });\n      }\n\n      service.create(value)\n        .then(() => {\n          router.goto('list', parameters, true);\n        });\n    }\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-saving-goals-ng/scripts/form-controller.js"],"sourceRoot":""}