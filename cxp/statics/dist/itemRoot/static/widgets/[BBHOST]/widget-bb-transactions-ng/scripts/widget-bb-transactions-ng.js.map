{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///webpack/bootstrap 110596ed019bd8a9816a?8523********","webpack:///./widget-bb-transactions-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-transactions-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-state-container-ng\"","webpack:///external \"model-bb-transactions-ng\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///./widget-bb-transactions-ng/scripts/controller.js","webpack:///./widget-bb-transactions-ng/scripts/constants.js","webpack:///./widget-bb-transactions-ng/scripts/default-hooks.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/index.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/initial-state.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/init.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/list.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/helpers.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/product.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/transaction.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/search.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/export.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/currencies.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/notification.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/categories.js","webpack:///./widget-bb-transactions-ng/scripts/view-model/transactions-enum-values.js","webpack:///./widget-bb-transactions-ng/scripts/service.js"],"names":["defaultHooks","hooksKey","serviceKey","viewModelKey","angular","module","modelModuleKey","widgetModuleKey","eventBusModuleKey","intentModuleKey","stateContainerModuleKey","bbExtensionHelpersModuleKey","factory","bbStateContainerKey","widgetKey","createViewModel","modelTransactionsKey","createService","extensionHelpersContextKey","bbIntentKey","bbIntent","controller","eventBusKey","Controller","run","viewModel","init","name","TransactionsController","SEARCH_MIN_QUERY","SEARCH_INPUT_DEBOUNCE","searchActions","CANCEL","INPUT","debounce","func","wait","immediate","timeout","debouncedFn","args","context","later","apply","callNow","clearTimeout","setTimeout","DEFAULT_MAX_NAV_PAGES","model","hooks","widget","eventBus","$window","scope","service","stateContainer","intents","maxNavPages","getLongPreference","dismissTime","Math","abs","loadAllTransactionsInitially","getBooleanPreference","filters","getStringPreference","split","selectors","transactions","createSelector","rawData","processTransactions","searchTransactions","state","search","transaction","data","searching","initialLoading","loadingTransactions","loading","searchingTransactions","loadedAll","searchedAll","category","categories","totalCount","total","error","product","productId","Array","isArray","map","prod","id","paginationType","size","from","loadFrom","searchFrom","orderBy","sort","direction","hasTodayTransactions","today","exportFailed","export","exportTransactionsFailed","value","Boolean","afterExportError","beforeExport","hasTodaysTransactions","pageParams","currentPage","totalItems","loadMorePromise","searchMorePromise","filterNullProperties","Object","keys","obj","reduce","acc","prop","assign","getLoadParams","combiningParams","getState","params","visible","processRequestParams","getSearchParams","searchState","query","bookingDateLessThan","bookingDateGreaterThan","amountGreaterThan","amountLessThan","creditDebitIndicator","billingStatus","fromCheckSerialNumber","toCheckSerialNumber","getExportParams","processExportRequestParams","isFilterCriteriaEmpty","filter","key","length","cancelSearch","cancel","applySearchFilter","Promise","resolve","toDate","fromDate","amountFrom","amountTo","checkSerialNumberFrom","checkSerialNumberTo","searchMore","done","doneFn","catch","then","loadTransactions","load","loadMore","extendLoadMoreParams","changePage","onProductSelect","payload","afterSelectProductSuccess","products","checkTodayTransactions","onTransactionClick","selectedTransaction","storeCurrentTransaction","publish","Message","TRANSACTION_SELECTED","onTransactionSearchInput","onTransactionSelect","beforeStore","showProductDetails","onTransactionSearch","detail","action","text","$digest","handleViewCategoryIntent","arrangementId","arrangementsIds","loadCurrentTransaction","handleChangeTransactionCategoryIntent","updateTransactionCategory","item","transactionId","list","afterUpdateSuccess","categoryName","shouldUpdateAnalysisView","updateAnalysisView","afterUpdateError","dismissNotification","notification","removeNotification","notificationId","changeTransactionCategory","transactionObj","bindEvents","subscribe","PRODUCT_SELECTED","PRODUCTS_SELECTED","addEventListener","SEARCH","initIntent","handle","Intent","VIEW_CATEGORY_TRANSACTIONS","VIEW_CATEGORY_DBIT_TRANSACTIONS","VIEW_CATEGORY_CRDT_TRANSACTIONS","create","SHOW_PRODUCT_DETAILS","UPDATE_ANALYSIS_VIEW","setChangeTransCategoryIntent","$onInit","setupSelectedProduct","isDefaultProductFirst","reject","CXP_ITEM_LOADED","getId","BB_ITEM_LOADED","includes","Filter","CATEGORIES","getCategories","getTransactionsEnumValues","initList","afterLoadDone","onSort","header","sortable","exportToFile","format","nbDays","dateRangeEnd","Date","dateRangeStart","setDate","getDate","toISOString","slice","loadingError","allTransactionsLoaded","searchLoading","searchLoadingError","isSearching","searchAllTransactionsLoaded","showAllTransactions","currencies","transactionsEnumValues","isMultipleAccounts","errors","transactionsError","Event","Action","Text","CREDIT_DEBIT_INDICATOR","BILLING_STATUS","CURRENCY","AMOUNT_RANGE","DATE_RANGE","CHECK_SERIAL_NUMBER_RANGE","DefaultGetTransactionsEnumValuesParams","attributeName","processProductSelected","productSelected","exportParams","defaultPaginationType","defaultSortableColumn","defaultSortableDirection","isTransactionsShown","processCategories","processTransactionsEnumValues","enumValues","DEFAULT_PAGE_SIZE","DEFAULT_PAGINATION_TYPE","stateParams","pageSize","sortDirection","loadOnInit","initialState","createAction","notifications","beforeLoad","afterLoadSuccess","response","requestParams","afterLoadError","beforeTodayTransactionsLoad","afterTodayTransactionsLoadSuccess","afterTodayTransactionsLoadError","now","message","level","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","BadRequestErrors","ERR_INVALID_ARR_ID","ERR_ARR_NOT_FOUND","ERR_INVALID_TRAN_BODY","ERR_INVALID_TRAN_PARAMS","ERR_TRAN_EXISTS","ERR_ARR_NO_PRIVILEGES","ERR_INVALID_ACCESS_GROUP_BODY","ERR_INVALID_USER_BODY","ERR_USER_NOT_FOUND","ERR_INVALID_PRIVILEGES_REQUESTED","ERR_INVALID_CHECK_SERIAL_NUMBER_VALUE","uiError","modelError","code","badRequestErrors","isSameDay","bookingDate","date","some","afterSelectProductError","beforeSearch","afterSearchSuccess","afterSearchError","padded","num","String","formatDate","getFullYear","getMonth","raw","uri","getExportFileResource","location","getSelectedProduct","selectedProduct","getCurrentTransaction","storeTransactionAsCurrent","getCurrencies"],"mappings":"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","file":"widget-bb-transactions-ng/scripts/widget-bb-transactions-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-state-container-ng\"), require(\"model-bb-transactions-ng\"), require(\"lib-bb-extension-helpers-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-transactions-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"lib-bb-intent-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-state-container-ng\", \"model-bb-transactions-ng\", \"lib-bb-extension-helpers-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-transactions-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-state-container-ng\"), require(\"model-bb-transactions-ng\"), require(\"lib-bb-extension-helpers-ng\"));\n\telse\n\t\troot[\"widget-bb-transactions-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-state-container-ng\"], root[\"model-bb-transactions-ng\"], root[\"lib-bb-extension-helpers-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_71__, __WEBPACK_EXTERNAL_MODULE_82__, __WEBPACK_EXTERNAL_MODULE_83__, __WEBPACK_EXTERNAL_MODULE_84__, __WEBPACK_EXTERNAL_MODULE_85__, __WEBPACK_EXTERNAL_MODULE_86__, __WEBPACK_EXTERNAL_MODULE_87__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 110596ed019bd8a9816a","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-transactions-ng/model.xml\n// module id = 0\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 63\n// module chunks = 7 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 64\n// module chunks = 7 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_71__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 71\n// module chunks = 7 9 10","/**\n * @module widget-bb-transactions-ng\n *\n * @description\n * Transactions widget.\n */\nimport angular from 'vendor-bb-angular';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport modelModuleKey, { modelTransactionsKey } from 'model-bb-transactions-ng';\n\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\n\nimport Controller from './controller';\nimport * as defaultHooks from './default-hooks';\nimport createViewModel from './view-model/index';\nimport createService from './service';\n\nconst hooksKey = 'widget-bb-transactions-ng:hooks';\nconst serviceKey = 'widget-bb-transactions-ng:service';\nconst viewModelKey = 'widget-bb-transactions-ng:viewModel';\n\nexport default angular\n  .module('widget-bb-transactions-ng', [\n    modelModuleKey,\n    widgetModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n    stateContainerModuleKey,\n    bbExtensionHelpersModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    widgetKey,\n    hooksKey,\n    /* into */\n    createViewModel,\n  ])\n  .factory(serviceKey, [\n    modelTransactionsKey,\n    viewModelKey,\n    '$window',\n    /* into */\n    createService,\n  ])\n\n  .factory(extensionHelpersContextKey, [\n    bbIntentKey,\n    (bbIntent) => ({ bbIntent }),\n  ])\n\n  .controller('TransactionsController', [\n    modelTransactionsKey,\n    hooksKey,\n    widgetKey,\n    eventBusKey,\n    bbIntentKey,\n    '$window',\n    '$scope',\n    viewModelKey,\n    serviceKey,\n    bbStateContainerKey,\n    /* into */\n    Controller,\n  ])\n\n  .run([viewModelKey, viewModel => {\n    viewModel.init();\n  }])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_82__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 82\n// module chunks = 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_83__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 83\n// module chunks = 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_84__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 84\n// module chunks = 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_85__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 85\n// module chunks = 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_86__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-transactions-ng\"\n// module id = 86\n// module chunks = 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_87__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 87\n// module chunks = 9 10","import { Message, Intent, Filter } from './constants';\n\nconst SEARCH_MIN_QUERY = 2;\nconst SEARCH_INPUT_DEBOUNCE = 1000;\n\nconst searchActions = {\n  CANCEL: 'cancel',\n  INPUT: 'input',\n};\n\nconst debounce = (func, wait, immediate) => {\n  let timeout;\n  return function debouncedFn(...args) {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n};\n\n/**\n * @name DEFAULT_MAX_NAV_PAGES\n * @type {number}\n * @inner\n *\n * @description\n * Defines the default maxNavPages for the accounts page as defined in the widget model.xml\n */\nconst DEFAULT_MAX_NAV_PAGES = 3;\n\n/**\n * @name TransactionsController\n * @ngkey TransactionsController\n * @type {object}\n *\n * @description\n * Transactions widget controller\n */\nexport default function TransactionsController(\n  model,\n  hooks,\n  widget,\n  eventBus,\n  bbIntent,\n  $window,\n  scope,\n  viewModel,\n  service,\n  stateContainer\n) {\n  /**\n   * @name TransactionsController#intents\n   * @type {object}\n   * @inner\n   *\n   * @description\n   * A set of intents that the controller uses or handles.\n   */\n  const intents = {};\n\n  /**\n   * @name TransactionsController#maxNavPages\n   * @type {number} maxNaxPages\n   * @inner\n   *\n   * @description\n   * Maximum number of navigation pages to display\n   */\n  const maxNavPages =\n    widget.getLongPreference('bb.transaction.maxNavPages') || DEFAULT_MAX_NAV_PAGES;\n\n  /**\n   * @name TransactionsController#dismissTime\n   * @type {number}\n   * @inner\n   *\n   * @description\n   * Number of seconds to dismiss the notification\n   */\n  const dismissTime =\n    Math.abs(widget.getLongPreference('bb.transaction.notificationDismissTime')) || 3;\n\n  /**\n   * @name TransactionsController#loadAllTransactionsInitially\n   * @type {boolean}\n   * @inner\n   *\n   * @description\n   * Defines whether data should be shown if no account is selected\n   */\n  const loadAllTransactionsInitially =\n    widget.getBooleanPreference('bb.transaction.loadAllTransactionsOnInit');\n\n  /**\n   * @name TransactionsController#filters\n   * @type {Array.<string>}\n   * @inner\n   *\n   * @description\n   * List of filters that should be shown in the filter\n   */\n  const filters =\n    (widget.getStringPreference('bb.transaction.filters') || '').split(',');\n\n  /**\n   * @name TransactionsController#state\n   * @type {object}\n   * @inner\n   *\n   * @description\n   * State selectors\n   */\n  const selectors = {\n    transactions: stateContainer.createSelector(\n      ({ transactions }) => (transactions.rawData === null ?\n        null : hooks.processTransactions(transactions.rawData))\n    ),\n    searchTransactions: stateContainer.createSelector(\n      state => (state.search.rawData === null ?\n        null : hooks.processTransactions(state.search.rawData))\n    ),\n    transaction: stateContainer.createSelector(state => state.transaction.data),\n    searching: stateContainer.createSelector(state => state.searching),\n    initialLoading: stateContainer.createSelector(state => state.initialLoading),\n    loadingTransactions: stateContainer.createSelector(state => state.transactions.loading),\n    searchingTransactions: stateContainer.createSelector(state => state.search.loading),\n    loading: stateContainer.createSelector(\n      state => (state.searching ? state.search.loading : state.transactions.loading)\n    ),\n    loadedAll: stateContainer.createSelector(state => state.transactions.loadedAll),\n    searchedAll: stateContainer.createSelector(state => state.search.loadedAll),\n    category: stateContainer.createSelector(state => state.search.category),\n    categories: stateContainer.createSelector(state => state.search.categories),\n    totalCount: stateContainer.createSelector(\n      state => (state.searching ? state.search.total : state.transactions.total)\n    ),\n    error: stateContainer.createSelector(state => state.error),\n    product: stateContainer.createSelector(state => state.product.data),\n    productId: stateContainer.createSelector(\n      state => (\n        state.product.data && Array.isArray(state.product.data) ?\n          state.product.data.map((prod) => prod.id) :\n          (state.product.data && state.product.data.id)\n      )\n    ),\n    paginationType: stateContainer.createSelector(state => state.paginationType),\n    size: stateContainer.createSelector(\n      state => (state.searching ? state.search.size : state.transactions.size)\n    ),\n    from: stateContainer.createSelector(\n      state => (state.searching ? state.search.from : state.transactions.from)\n    ),\n    loadFrom: stateContainer.createSelector(state => state.transactions.from),\n    searchFrom: stateContainer.createSelector(state => state.search.from),\n    orderBy: stateContainer.createSelector(state => state.sort.orderBy),\n    direction: stateContainer.createSelector(state => state.sort.direction),\n    hasTodayTransactions:\n      stateContainer.createSelector(state => state.transactions.hasTodayTransactions),\n    today: stateContainer.createSelector(state => state.transactions.today),\n    exportFailed: stateContainer.createSelector(state => state.export.exportFailed),\n  };\n\n  /**\n   * @name TransactionsController#state\n   * @type {Object}\n   * @deprecated since 1.10.0. Use `viewModel.getState()` instead.\n   *\n   * @description\n   * State on transactions\n   */\n  const state = {\n    get exportTransactionsFailed() { return selectors.exportFailed(); },\n    set exportTransactionsFailed(value) {\n      if (Boolean(value)) {\n        viewModel.export.afterExportError();\n      } else {\n        viewModel.export.beforeExport();\n      }\n    },\n    export: {\n      get hasTodaysTransactions() { return selectors.hasTodayTransactions(); },\n      get today() { return selectors.today(); },\n    },\n    get transactions() { return selectors.transactions(); },\n    sort: {\n      get orderBy() { return selectors.orderBy(); },\n      get direction() { return selectors.direction(); },\n    },\n    pageParams: {\n      get from() { return selectors.from(); },\n      get size() { return selectors.size(); },\n      get currentPage() { return selectors.from() + 1; },\n      get totalItems() { return selectors.totalCount(); },\n      maxNavPages,\n      get paginationType() { return selectors.paginationType(); },\n    },\n    get initialLoading() { return selectors.initialLoading(); },\n  };\n\n  let loadMorePromise = null;\n  let searchMorePromise = null;\n\n  /**\n   * @name TransactionsController#filterNullProperties\n   * @type {function}\n   * @inner\n   * @param {object} obj Object to filter out null properties\n   * @returns {object} Filtered object\n   *\n   * @description\n   * Filters out properties with `null` value\n   */\n  const filterNullProperties = obj => Object.keys(obj)\n    .reduce((acc, prop) => {\n      if (obj[prop] !== null) {\n        Object.assign(acc, { [prop]: obj[prop] });\n      }\n      return acc;\n    }, {});\n\n  /**\n   * @name TransactionsController#getLoadParams\n   * @type {function}\n   * @inner\n   * @param {LoadRequestParams} combiningParams Parameters to combine with.\n   * @returns {LoadRequestParams} Request parameters\n   *\n   * @description\n   * Returns request parameters for the list request\n   */\n  const getLoadParams = (combiningParams = {}) => {\n    const { transactions, sort } = viewModel.getState();\n    const params = {\n      from: transactions.from,\n      size: transactions.size,\n    };\n\n    if (selectors.product() && selectors.product().visible !== false) {\n      Object.assign(params, {\n        [Array.isArray(selectors.product()) ? 'arrangementsIds' : 'productId']:\n        selectors.productId(),\n      });\n    }\n\n    if (sort.orderBy && sort.direction) {\n      Object.assign(params, {\n        orderBy: sort.orderBy,\n        direction: sort.direction,\n      });\n    }\n\n    Object.assign(params, combiningParams);\n\n    return hooks.processRequestParams(params);\n  };\n\n  /**\n   * @name TransactionsController#getSearchParams\n   * @type {function}\n   * @inner\n   * @param {SearchRequestParams} combiningParams Parameters to combine with.\n   * @returns {SearchRequestParams} Request parameters\n   *\n   * @description\n   * Returns request parameters for the search request\n   */\n  const getSearchParams = (combiningParams = {}) => {\n    const { search: searchState, sort } = viewModel.getState();\n    let params = {\n      from: searchState.from,\n      size: searchState.size,\n      query: searchState.query,\n      bookingDateLessThan: searchState.bookingDateLessThan,\n      bookingDateGreaterThan: searchState.bookingDateGreaterThan,\n      amountGreaterThan: searchState.amountGreaterThan,\n      amountLessThan: searchState.amountLessThan,\n      creditDebitIndicator: searchState.creditDebitIndicator,\n      billingStatus: searchState.billingStatus,\n      category: searchState.category,\n      categories: searchState.categories,\n      fromCheckSerialNumber: searchState.fromCheckSerialNumber,\n      toCheckSerialNumber: searchState.toCheckSerialNumber,\n    };\n\n    if (selectors.product() && selectors.product().visible !== false) {\n      Object.assign(params, {\n        [Array.isArray(selectors.product()) ? 'arrangementsIds' : 'productId']:\n          selectors.productId(),\n      });\n    }\n\n    if (sort.orderBy && sort.direction) {\n      Object.assign(params, {\n        orderBy: sort.orderBy,\n        direction: sort.direction,\n      });\n    }\n\n    Object.assign(params, combiningParams);\n    params = filterNullProperties(params);\n\n    return hooks.processRequestParams(params);\n  };\n\n  /**\n   * @name TransactionsController#getExportParameters\n   * @type {function}\n   * @inner\n   * @param {ExportRequestParams} combiningParams Parameters to combine with.\n   * @returns {ExportRequestParams} Request parameters\n   *\n   * @description\n   * Returns request parameters for the export request\n   */\n  const getExportParams = (combiningParams = {}) => {\n    let params = {\n      [Array.isArray(selectors.product()) ? 'arrangementsIds' : 'productId']: selectors.productId(),\n      ...combiningParams,\n    };\n\n    if (selectors.searching()) {\n      const { search: searchState } = viewModel.getState();\n      Object.assign(params, {\n        query: searchState.query,\n        bookingDateLessThan: searchState.bookingDateLessThan,\n        bookingDateGreaterThan: searchState.bookingDateGreaterThan,\n        amountGreaterThan: searchState.amountGreaterThan,\n        amountLessThan: searchState.amountLessThan,\n        creditDebitIndicator: searchState.creditDebitIndicator,\n        billingStatus: searchState.billingStatus,\n        categories: searchState.categories,\n        fromCheckSerialNumber: searchState.fromCheckSerialNumber,\n        toCheckSerialNumber: searchState.toCheckSerialNumber,\n      });\n    }\n\n    params = filterNullProperties(params);\n\n    return hooks.processExportRequestParams(params, viewModel.getState());\n  };\n  /**\n   * @name TransactionsController#isFilterCriteriaEmpty\n   * @type {function}\n   * @inner\n   * @param {SearchRequestParams} params Search parameters\n   * @returns {boolean} True if any parameter is set, false if none\n   *\n   * @description\n   * Check if search and filter parameters are empty\n   */\n  const isFilterCriteriaEmpty = params =>\n    !Boolean(Object.keys(params).filter(key => params[key] !== null).length);\n\n  /**\n   * @name TransactionsController#search\n   * @type {function}\n   * @param {string} query Search query\n   * @returns {Promise.<void>} Promise\n   *\n   * @description\n   * Searches by a given query\n   */\n  function search(query) {\n    return service.search(getSearchParams({ query, from: 0 }));\n  }\n\n  /**\n   * @name TransactionsController#cancelSearch\n   * @type {function}\n   * @returns {void}\n   *\n   * @description\n   * Resets search\n   */\n  function cancelSearch() {\n    viewModel.search.cancel();\n  }\n\n  /**\n   * @name TransactionsController#applySearchFilter\n   * @type {function}\n   * @param {object} params Search filter params\n   * @returns {Promise.<void>} Promise\n   *\n   * @description\n   * Searches by given filter parameters\n   */\n  function applySearchFilter(params) {\n    if (isFilterCriteriaEmpty(params)) {\n      cancelSearch();\n      return Promise.resolve();\n    }\n\n    return service.search(getSearchParams({\n      from: 0,\n      query: params.query,\n      bookingDateLessThan: params.toDate,\n      bookingDateGreaterThan: params.fromDate,\n      amountGreaterThan: params.amountFrom,\n      amountLessThan: params.amountTo,\n      creditDebitIndicator: params.creditDebitIndicator,\n      billingStatus: params.billingStatus,\n      categories: params.categories,\n      fromCheckSerialNumber: params.checkSerialNumberFrom,\n      toCheckSerialNumber: params.checkSerialNumberTo,\n    }));\n  }\n\n  /**\n   * @name TransactionsController#searchMore\n   * @type {function}\n   * @param {?function} done Callback function for `ui-bb-load-more-ng` component\n   * @returns {null|Promise.<void>} Promise or null if search is finished\n   *\n   * @description\n   * Loads more search results and appends them to the search result.\n   */\n  function searchMore(done) {\n    if (selectors.searchingTransactions()) {\n      return searchMorePromise;\n    }\n\n    const doneFn = done || (() => {});\n    const params = getSearchParams({ from: selectors.searchFrom() + 1 });\n    searchMorePromise = service.search(params)\n      .catch(() => {})\n      .then(() => {\n        searchMorePromise = null;\n        doneFn();\n      });\n\n    return searchMorePromise;\n  }\n\n  /**\n   * @name TransactionsController#loadTransactions\n   * @type {function}\n   * @inner\n   * @param {LoadRequestParams|SearchRequestParams} params Request params\n   * @returns {Promise.<void>} Promise\n   *\n   * @description\n   * Handles loading or searching transactions\n   */\n  function loadTransactions(params) {\n    if (selectors.searching()) {\n      return service.search(getSearchParams(params));\n    }\n    return service.load(getLoadParams(params));\n  }\n\n  /**\n   * @name TransactionsController#loadMore\n   * @type {function}\n   * @param {?function} done Callback function for `ui-bb-load-more-ng` component\n   * @returns {null|Promise.<void>} Promise or null if loading is finished\n   *\n   * @description\n   * Loads more transactions and append them to the transaction's list\n   */\n  function loadMore(done) {\n    if (selectors.loadingTransactions() || selectors.loadedAll() || selectors.error()) {\n      return loadMorePromise;\n    }\n\n    const doneFn = done || (() => {});\n    let params = getLoadParams({ from: selectors.loadFrom() + 1 });\n    params = hooks.extendLoadMoreParams(params);\n\n    loadMorePromise = service.load(params)\n      .catch(() => {})\n      .then(() => {\n        loadMorePromise = null;\n        doneFn();\n      });\n\n    return loadMorePromise;\n  }\n\n  /**\n   * @name TransactionsController#changePage\n   * @type {function}\n   * @param {object} params\n   * @param {number} params.currentPage Transactions page to load\n   * @returns {Promise.<void>} A Promise\n   *\n   * @description\n   * Change page of displayed accounts.\n   */\n  const changePage = params =>\n    loadTransactions({ from: params.currentPage - 1 });\n\n  /**\n   * @name TransactionsController#onProductSelect\n   * @type {function}\n   * @inner\n   * @param {object} payload Object with selected product\n   *\n   * @description\n   * Handles account select\n   */\n  function onProductSelect(payload) {\n    if (payload.product && selectors.productId() === payload.product.id) {\n      return;\n    }\n\n    viewModel.product.afterSelectProductSuccess(payload.product || payload.products);\n\n    service.load(getLoadParams({ from: 0 }));\n    service.checkTodayTransactions(selectors.productId());\n  }\n\n  /**\n   * @name TransactionsController#onTransactionClick\n   * @type {function}\n   * @param {object} selectedTransaction Object with selected transaction\n   * @fires bb.event.transaction.selected\n   *\n   * @description\n   * Handles transaction select\n   */\n  function onTransactionClick(selectedTransaction) {\n    service.storeCurrentTransaction(selectedTransaction);\n    eventBus.publish(Message.TRANSACTION_SELECTED, {\n      transaction: selectedTransaction,\n    });\n  }\n\n  /**\n   * @name TransactionsController#onTransactionSearchInput\n   * @type {function}\n   * @inner\n   * @see search\n   *\n   * @description\n   * Handles search field input\n   */\n  const onTransactionSearchInput = debounce(query => {\n    if (query.length >= SEARCH_MIN_QUERY) {\n      search(query);\n    }\n  }, SEARCH_INPUT_DEBOUNCE);\n\n  /**\n   * @name TransactionsController#onTransactionSelect\n   * @type {function}\n   * @inner\n   * @param {object} data Selected transaction object\n   *\n   * @description\n   * Handles transaction select\n   */\n  function onTransactionSelect(data) {\n    viewModel.transaction.beforeStore(data.transaction);\n  }\n\n  /**\n   * @name TransactionsController#showProductDetails\n   * @type {function}\n   * @param {string} productId The id of the product\n   *\n   * @description\n   * Handles the intent to show the product details for the given product\n   */\n  const showProductDetails = productId => {\n    // Check if intent is available.\n    if (intents.showProductDetails) {\n      intents.showProductDetails(productId);\n    }\n  };\n\n  /**\n   * @name TransactionsController#onTransactionSearch\n   * @type {function}\n   * @param {object} detail Search input object\n   * @inner\n   *\n   * @description\n   * Handles transaction search input\n   */\n  const onTransactionSearch = detail => {\n    if (detail.action === searchActions.INPUT) {\n      onTransactionSearchInput(detail.text);\n    } else if (detail.action === searchActions.CANCEL) {\n      cancelSearch();\n    }\n    scope.$digest();\n  };\n\n  /**\n   * @name TransactionsController#handleViewCategoryIntent\n   * @type {function}\n   * @param {object} payload ViewCategory intent payload\n   * @inner\n   *\n   * @description\n   * Handles ViewCategory intent\n   */\n  const handleViewCategoryIntent = payload => {\n    if (payload && (!!payload.category || !!payload.categories)) {\n      const params = {\n        productId: payload.productId || null,\n        arrangementId: payload.arrangementId || null,\n        arrangementsIds: payload.arrangementsIds || null,\n        category: payload.category || null,\n        categories: payload.categories || null,\n        bookingDateGreaterThan: payload.bookingDateGreaterThan || null,\n        bookingDateLessThan: payload.bookingDateLessThan || null,\n      };\n\n      service.search(getSearchParams(params))\n        .then(() => { service.loadCurrentTransaction(); });\n    } else {\n      cancelSearch();\n    }\n  };\n\n  /**\n   * @name TransactionsController#handleChangeTransactionCategoryIntent\n   * @type {function}\n   * @param {object} payload ChangeTransactionCategory intent payload\n   * @inner\n   *\n   * @description Handles ChangeTransactionCategory intent\n   */\n  const handleChangeTransactionCategoryIntent = payload =>\n    service.updateTransactionCategory(payload)\n      .then(() => {\n        const { transactions } = viewModel.getState();\n        const transaction = transactions.rawData.filter(item =>\n          item.id === payload.transactionId && item.arrangementId === payload.arrangementId\n        )[0] || {};\n        viewModel.list.afterUpdateSuccess(Object.assign(transaction, {\n          category: payload.categoryName,\n        }));\n      })\n      .then(() => {\n        if (hooks.shouldUpdateAnalysisView()) {\n          intents.updateAnalysisView();\n        }\n      })\n      .catch(viewModel.list.afterUpdateError);\n\n  /**\n   * @name TransactionsController#dismissNotification\n   * @type {function}\n   * @param {number} notificationId Id of the notification that should be dismissed\n   *\n   * @description\n   * Helper method to remove a notification from state\n   */\n  const dismissNotification = notificationId =>\n    viewModel.notification.removeNotification(notificationId);\n\n  /**\n   * @name TransactionsController#changeTransactionCategory\n   * @type {function}\n   * @param {object} transactionObj - The transaction object\n   *\n   * @description\n   * Trigger change transaction category intent\n   */\n  const changeTransactionCategory = transactionObj =>\n    intents.changeTransactionCategory(transactionObj);\n\n  /**\n   * @name TransactionsController#bindEvents\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Adds subscriptions to bus events\n   */\n  function bindEvents() {\n    eventBus.subscribe(Message.PRODUCT_SELECTED, onProductSelect);\n    eventBus.subscribe(Message.PRODUCTS_SELECTED, onProductSelect);\n    eventBus.subscribe(Message.TRANSACTION_SELECTED, onTransactionSelect);\n    $window.addEventListener(Message.SEARCH, ({ detail }) => onTransactionSearch(detail));\n  }\n\n  /**\n   * @name TransactionsController#initIntent\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Inits the bbIntent and adds intent handlers.\n   * 'intent.rb.transactions.dbit.list.view' or 'intent.rb.transactions.crdt.list.view'\n   * intent can be used to update load query params with new productId,\n   * arrangementId, arrangementsIds, category, bookingDateGreaterThan and bookingDateLessThan\n   * params\n   */\n  function initIntent() {\n    // Deprecated\n    // TODO: remove in 2.10.1\n    bbIntent.handle(Intent.VIEW_CATEGORY_TRANSACTIONS, handleViewCategoryIntent);\n\n    bbIntent.handle(Intent.VIEW_CATEGORY_DBIT_TRANSACTIONS, handleViewCategoryIntent);\n    bbIntent.handle(Intent.VIEW_CATEGORY_CRDT_TRANSACTIONS, handleViewCategoryIntent);\n\n    intents.showProductDetails = bbIntent.create(Intent.SHOW_PRODUCT_DETAILS);\n    intents.updateAnalysisView = bbIntent.create(Intent.UPDATE_ANALYSIS_VIEW);\n    intents.changeTransactionCategory = bbIntent.create(\n      hooks.setChangeTransCategoryIntent(), handleChangeTransactionCategoryIntent\n    );\n\n    bbIntent.init(() => {});\n  }\n\n  /**\n   * @name TransactionsController#$onInit\n   * @type {function}\n   *\n   * @description\n   * Widget initialization logic - called automatically in the angular cycle.\n   */\n  function $onInit() {\n    if (!viewModel.getState().initialLoading) {\n      return Promise.resolve(bindEvents());\n    }\n\n    return service.setupSelectedProduct(hooks.isDefaultProductFirst())\n      .then(() => {\n        if (selectors.productId() === -1 && !loadAllTransactionsInitially) {\n          return Promise.reject(bindEvents());\n        }\n        return bindEvents();\n      })\n      .then(initIntent)\n      .then(() => {\n        /* This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n         * and will be removed with the update to widget collection 3 (WC3)\n         */\n        eventBus.publish(Message.CXP_ITEM_LOADED, {\n          id: widget.getId(),\n        });\n\n        eventBus.publish(Message.BB_ITEM_LOADED, {\n          id: widget.getId(),\n        });\n      })\n      .then(() => service.load(getLoadParams()))\n      // TODO: Show currencies selector in filter form when search service supports it\n      // then(() => service.getCurrencies())\n      .then(() => {\n        // Don't include these methods in the main init chain\n        service.checkTodayTransactions(selectors.productId());\n        service.loadCurrentTransaction();\n      })\n      .then(() => {\n        if (filters.includes(Filter.CATEGORIES)) {\n          service.getCategories();\n        }\n      })\n      .then(() => service.getTransactionsEnumValues())\n      .then(() => {\n        viewModel.initList.afterLoadDone();\n        scope.$digest();\n      })\n      .catch(() => {\n        viewModel.initList.afterLoadDone();\n        scope.$digest();\n      });\n  }\n\n  /**\n   * @name TransactionsController#onSort\n   * @type {function}\n   * @param {string} orderBy Column key to sort\n   * @param {string} direction Sort direction\n   * @param {object} header Config object reference. Deprecated.\n   *\n   * @description\n   * Loads sorted list of payments\n   */\n  const onSort = (orderBy, direction, header) => {\n    // The following line should be part of the extension\n    Object.assign(header, {\n      sortable: {\n        ...header.sortable,\n        direction,\n      },\n    });\n\n    loadTransactions({ orderBy, direction });\n  };\n\n  /**\n   * @name TransactionsController#exportToFile\n   * @type {function}\n   * @param {string} format Specified format (CSV, PDF)\n   * @param {number} nbDays Number of days to export - pass 0 to get all transactions, pass 1 to get\n   * today's transactions (default), or a number N to get the last N days of transactions\n   *\n   * @description\n   * Exports list of transactions to a file in specified format - if search/filter is active, then\n   * apply the same parameters to the export.\n   */\n  const exportToFile = (format, nbDays = 1) => {\n    const params = {};\n\n    if (nbDays > 0) {\n      const dateRangeEnd = new Date();\n      const dateRangeStart = new Date();\n      dateRangeStart.setDate((dateRangeStart.getDate() - nbDays) + 1);\n\n      Object.assign(params, {\n        bookingDateLessThan: dateRangeEnd.toISOString().slice(0, 10),\n        bookingDateGreaterThan: dateRangeStart.toISOString().slice(0, 10),\n      });\n    }\n\n    service.export(getExportParams(params), format);\n  };\n\n  return {\n    /**\n     * @name TransactionsController#transactions\n     * @type {module:data-bb-transactions-ng.TransactionsData.TransactionItemGet[]}\n     * May be empty if the transactions aren't loaded.\n     * @deprecated since 1.10.0. Use `viewModel.getState().transactions.rawData` instead.\n     *\n     * @description\n     * The list of transactions\n     */\n    get transactions() { return selectors.transactions(); },\n    /**\n     * @name TransactionsController#product\n     * @type {module:model-bb-transactions-ng.Product}\n     * @deprecated since 1.10.0. Use `viewModel.getState().product.data` instead.\n     *\n     * @description\n     * Selected product info\n     */\n    get product() { return selectors.product(); },\n    /**\n     * @name TransactionsController#loading\n     * @type {boolean}\n     * @deprecated since 1.10.0. Use `viewModel.getState().transactions.loading`\n     * or `viewModel.getState().search.loading` instead.\n     *\n     * @description\n     * Loading flag which is true while the list of transactions is loading\n     */\n    get loading() { return selectors.loading(); },\n    /**\n     * @name TransactionsController#loadingError\n     * @type {module:ui-bb-model-errors.ModelError}\n     * @deprecated since 1.10.0. Use `viewModel.getState().error` instead.\n     *\n     * @description\n     * Last occurred error\n     */\n    get loadingError() { return selectors.error(); },\n    /**\n     * @name TransactionsController#allTransactionsLoaded\n     * @type {boolean}\n     * @deprecated since 1.10.0. Use `viewModel.getState().transactions.loadedAll`\n     * or `viewModel.getState().search.loadedAll` instead.\n     *\n     * @description\n     * Flag that indicates whether all the transactions have been loaded\n     */\n    get allTransactionsLoaded() { return selectors.loadedAll(); },\n    /**\n     * @name TransactionsController#searching\n     * @type {boolean}\n     * @deprecated since 1.10.0. Use `viewModel.getState().searching` instead.\n     *\n     * @description\n     * Searching flag which is true while user is searching transactions\n     */\n    get searching() { return selectors.searching(); },\n    /**\n     * @name TransactionsController#searchLoading\n     * @type {boolean}\n     * @deprecated since 1.10.0. Use `viewModel.getState().search.loading` instead.\n     *\n     * @description\n     * Loading flag which is true while the list of transactions is loading\n     */\n    get searchLoading() { return selectors.searchingTransactions(); },\n    /**\n     * @name TransactionsController#searchLoadingError\n     * @type {module:ui-bb-model-errors.ModelError}\n     * @deprecated since 1.10.0. Use `viewModel.getState().error` instead.\n     *\n     * @description\n     * Search error\n     */\n    get searchLoadingError() { return selectors.error(); },\n    /**\n     * @name TransactionsController#searchTransactions\n     * @type {Array.<module:data-bb-transactions-ng.TransactionsData.TransactionItemGet>}\n     * @deprecated since 1.10.0. Use `viewModel.getState().search.rawData` instead.\n     *\n     * @description\n     * The list of found transactions.\n     */\n    get searchTransactions() { return selectors.searchTransactions(); },\n    /**\n     * @name TransactionsController#searchTransactions\n     * @type {boolean} search status\n     * @deprecated since 1.10.0. Use `viewModel.getState().searching` instead.\n     *\n     * @description\n     * Returns whether search filter is applied\n     */\n    get isSearching() { return selectors.searching(); },\n    /**\n     * @name TransactionsController#searchAllTransactionsLoaded\n     * @type {boolean}\n     * @deprecated since 1.10.0. Use `viewModel.getState().search.loadedAll` instead.\n     *\n     * @description\n     * Flag that indicates whether all the transactions have been loaded during a search\n     */\n    get searchAllTransactionsLoaded() { return selectors.searchedAll(); },\n    /**\n     * @name TransactionsController#transaction\n     * @type {object}\n     * @deprecated since 1.10.0. Use `viewModel.getState().transaction.data` instead.\n     *\n     * @description\n     * Selected transaction info\n     */\n    get transaction() { return selectors.transaction(); },\n    /**\n     * @name TransactionsController#showAllTransactions\n     * @type {boolean}\n     * @deprecated since 1.10.0. Use `viewModel.getState().search.category` instead.\n     *\n     * @description\n     * Show all available transactions\n     */\n    get showAllTransactions() {\n      return (selectors.category() !== null || selectors.categories() !== null);\n    },\n    /**\n     * @name TransactionsController#currencies\n     * @type {Array}\n     *\n     * @description\n     * Return all available currencies\n     */\n    get currencies() { return viewModel.getState().currencies.data; },\n    /**\n     * @name TransactionsController#categories\n     * @type {Array}\n     *\n     * @description\n     * Return all available categories\n     */\n    get categories() { return viewModel.getState().categories.data; },\n    /**\n     * @name TransactionsController#transactionsEnumValues\n     * @type {Array}\n     *\n     * @description\n     * Return all available transactions enum values\n     */\n    get transactionsEnumValues() { return viewModel.getState().transactionsEnumValues.data; },\n    /**\n     * @name TransactionsController#isMultipleAccounts\n     * @type {boolean}\n     *\n     * @description\n     * Check if multiple accounts are selected\n     */\n    get isMultipleAccounts() {\n      return Array.isArray(selectors.product()) && selectors.product().length > 1;\n    },\n    filters,\n    cancelSearch,\n    loadMore,\n    search,\n    applySearchFilter,\n    searchMore,\n    eventBus,\n    onTransactionClick,\n    /**\n     * @name TransactionsController#errors\n     * @type {object}\n     * @deprecated since 1.10.0. Use `viewModel.getState().error` instead.\n     *\n     * @description\n     * Contains transaction error\n     */\n    errors: {\n      get transactionsError() { return selectors.error(); },\n    },\n    state,\n    onSort,\n    changePage,\n    exportToFile,\n    dismissTime,\n    loadAllTransactionsInitially,\n    showProductDetails,\n    changeTransactionCategory,\n    dismissNotification,\n    /* Lifecycle hooks */\n    $onInit,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/controller.js","/**\n * Widget events enum\n * @type {object}\n */\nconst Event = {\n  TRANSACTION_SELECTED: 'bb.event.transaction.selected',\n  PRODUCT_SELECTED: 'bb.event.product.selected',\n  PRODUCTS_SELECTED: 'bb.event.products.selected',\n  SEARCH: 'bb.event.transactions.search',\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n  BB_ITEM_LOADED: 'bb.item.loaded',\n};\n\n/**\n * Widget actions enum\n * @type {object}\n */\nconst Action = {};\n\n/**\n * Widget messages enum\n * @type {object}\n */\nexport const Message = Object.assign({}, Action, Event);\n\n/**\n * Widget static text\n * @type {object}\n */\nexport const Text = {};\n\n/**\n * Widget intent enum\n * @type {object}\n */\nexport const Intent = {\n  // view.account.category.transactions key is deprecated\n  // Remove in 2.12.0\n  VIEW_CATEGORY_TRANSACTIONS: 'view.account.category.transactions',\n  VIEW_CATEGORY_DBIT_TRANSACTIONS: 'intent.rb.transactions.dbit.list.view',\n  VIEW_CATEGORY_CRDT_TRANSACTIONS: 'intent.rb.transactions.crdt.list.view',\n  SHOW_PRODUCT_DETAILS: 'intent.bb.productDetails.view.show',\n  UPDATE_ANALYSIS_VIEW: 'intent.rb.update.analysis.view',\n};\n\n/**\n * Filter enum (possible values in bb.transaction.filters widget preference)\n * @type {object}\n */\nexport const Filter = {\n  CREDIT_DEBIT_INDICATOR: 'creditDebitIndicator',\n  BILLING_STATUS: 'billingStatus',\n  CURRENCY: 'currency',\n  AMOUNT_RANGE: 'amountRange',\n  DATE_RANGE: 'dateRange',\n  CATEGORIES: 'categories',\n  CHECK_SERIAL_NUMBER_RANGE: 'checkSerialNumberRange',\n};\n\nexport const DefaultGetTransactionsEnumValuesParams = {\n  attributeName: 'billingStatus',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/constants.js","/**\n * @name Hooks\n * @type {object}\n *\n * @description\n * Default hooks for widget-bb-transactions-ng\n */\n\n/**\n * @name Hooks#processProductSelected\n * @type {function}\n * @param {module:model-bb-transactions.Product} productSelected Product to process\n * @returns {Object} Processed product\n *\n * @description\n * Default hook for selected product processing\n */\nexport const processProductSelected = (productSelected) => productSelected;\n\n/**\n * @name Hooks#processRequestParams\n * @type {function}\n * @param {object} params Params to process\n * @param {?number} params.amountGreaterThan Amount greater than\n * @param {?number} params.amountLessThan Amount less than\n * @param {?string} params.bookingDateGreaterThan Booking date greater than\n * @param {?string} params.bookingDateLessThan Booking date less than\n * @param {?string} params.productId The product id\n * @param {?string} params.type Type category\n * @param {?string} params.orderBy The key to order by\n * @param {?string} params.direction The direction to order by\n * @param {?number} params.from The page to list from\n * @param {?number} params.size The number of results per page\n * @param {?string} params.query The search term used to search for transactions\n * @returns {Object} Processed params\n *\n * @description\n * Default hook for transactions query params processing/extending\n */\nexport const processRequestParams = (params) => params;\n\n/**\n * @name Hooks#processTransactions\n * @type {function}\n *\n * @param {module:data-bb-transactions-ng.TransactionsData.TransactionItemGet[]} transactions\n * Transactions to process\n * @returns {Array} Processed transactions\n *\n * @description\n * Default hook for transactions list post processing\n */\nexport const processTransactions = (transactions) => transactions;\n\n/**\n * @name Hooks#processExportRequestParams\n * @type {function}\n * @param {ExportRequestParams} exportParams Params to process\n * @param {ViewState} state Widget state\n * @returns {ExportRequestParams} Processed params\n *\n * @description\n * Default hook for transactions query params processing/extending\n */\n// eslint-disable-next-line no-unused-vars\nexport const processExportRequestParams = (exportParams, state) => exportParams;\n\n/**\n * @name Hooks#defaultPaginationType\n * @type {function}\n * @returns {?string}\n *\n * @description\n * defaultPaginationType default hook for setting load-more or pagination as default\n */\nexport const defaultPaginationType = () => null;\n\n/**\n * @name Hooks#defaultSortableColumn\n * @type {function}\n * @returns {?string}\n *\n * @description\n * defaultSortableColumn default hook\n */\nexport const defaultSortableColumn = () => null;\n\n/**\n * @name Hooks#defaultSortableDirection\n * @type {function}\n * @returns {?string}\n *\n * @description\n * defaultSortableDirection default hook\n */\nexport const defaultSortableDirection = () => null;\n\n/**\n * @name Hooks#isDefaultProductFirst\n * @type {function}\n * @returns {boolean}\n *\n * @description\n * isDefaultProductFirst default hook\n */\nexport const isDefaultProductFirst = () => true;\n\n/**\n * @name Hooks#extendLoadMoreParams\n * @type {function}\n * @param {object} params to extend\n * @param {?number} params.amountGreaterThan Amount greater than\n * @param {?number} params.amountLessThan Amount less than\n * @param {?string} params.bookingDateGreaterThan Booking date greater than\n * @param {?string} params.bookingDateLessThan Booking date less than\n * @param {?string} params.productId The product id\n * @param {?string} params.type Type category\n * @returns {object} Processed params\n *\n * @description\n * Default hook for extending loadMore params\n */\nexport const extendLoadMoreParams = (params) => params;\n\n/**\n * @name Hooks#isTransactionsShown\n * @type {function}\n * @returns {boolean}\n *\n * @description\n * Default hook for checking if the transactions should be visible\n */\nexport const isTransactionsShown = () => true;\n\n/**\n * @name Hooks#setChangeTransCategoryIntent\n * @type {function}\n * @returns {string}\n *\n * @description\n * Default hook for setting the intent to trigger the change transaction category widget\n */\nexport const setChangeTransCategoryIntent = () => '';\n\n/**\n * @name Hooks#shouldUpdateAnalysisView\n * @type {function}\n * @returns {boolean}\n *\n * @description\n * Default hook for shouldUpdateAnalysisView flag\n */\nexport const shouldUpdateAnalysisView = () => false;\n\n/**\n * @name Hooks#processCategories\n * @type {function}\n * @param {Array.<module:data-bb-categories-management-http-ng.CategoriesManagement.Category>}\n * categories Categories to process\n * @returns {Array} Processed categories\n *\n * @description\n * Default hook for categories list post processing\n */\nexport const processCategories = (categories) => categories;\n\n/**\n * @name Hooks#processTransactionsEnumValues\n * @type {function}\n * @param {Array.<module:data-bb-transactions-http-ng.TransactionsData.DefaultValueGetResponse>}\n * enumValues Transactions enum values to process\n * @returns {Array} Processed transactions enum values\n *\n * @description\n * Default hook for transactions enum values post processing\n */\nexport const processTransactionsEnumValues = (enumValues) => enumValues;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/default-hooks.js","// Combine state reducers\nimport createInitialState from './initial-state';\nimport createInitReducers from './init';\nimport createListReducers from './list';\nimport createProductReducers from './product';\nimport createTransactionReducers from './transaction';\nimport createSearchReducers from './search';\nimport createExportReducers from './export';\nimport createCurrenciesReducers from './currencies';\nimport createNotificationReducers from './notification';\nimport createCategoriesReducers from './categories';\nimport createTransactionsEnumValuesReducers from './transactions-enum-values';\n\n/**\n * Defines the default page size for the transactions page\n *\n * @type {number}\n * @inner\n */\nconst DEFAULT_PAGE_SIZE = 10;\n\n/**\n * Defines the default paginationType for the transactions page\n * as defined in the widget model.xml\n *\n * @type {string}\n * @inner\n */\nconst DEFAULT_PAGINATION_TYPE = 'load-more';\n\nexport default (stateContainer, widget, hooks) => {\n  const stateParams = {\n    pageSize: widget.getLongPreference('bb.transaction.pageSize') ||\n      widget.getLongPreference('transactionListSize') ||\n      DEFAULT_PAGE_SIZE,\n    orderBy: hooks.defaultSortableColumn(),\n    sortDirection: hooks.defaultSortableDirection(),\n    paginationType: widget.getStringPreference('bb.transaction.paginationType') ||\n      hooks.defaultPaginationType() ||\n      DEFAULT_PAGINATION_TYPE,\n    loadOnInit: widget.getBooleanPreference('bb.transaction.initLoad'),\n  };\n  const initialState = createInitialState(stateParams);\n\n  /**\n   * @name ViewModel\n   * @type {object}\n   * @ngkey widget-bb-transactions-ng:viewModel\n   * @inner\n   */\n  return {\n    /**\n     * @name ViewModel#init\n     * @type {function}\n     * @inner\n     * @returns {ViewState}\n     *\n     * @description\n     * Initialises view model with initial state\n     */\n    init: stateContainer.createAction((state = initialState) => state),\n    /**\n     * @name ViewModel#getState\n     * @type {function}\n     * @inner\n     * @returns {ViewState}\n     *\n     * @description\n     * Returns view state\n     */\n    getState: stateContainer.getState,\n    /**\n     * @name ViewModel#initList\n     * @type {ViewModelInitActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to initial loading\n     */\n    initList: createInitReducers(stateContainer),\n    /**\n     * @name ViewModel#list\n     * @type {ViewModelListActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to transactions list\n     */\n    list: createListReducers(stateContainer),\n    /**\n     * @name ViewModel#product\n     * @type {ViewModelProductActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to product state\n     */\n    product: createProductReducers(stateContainer, hooks),\n    /**\n     * @name ViewModel#transaction\n     * @type {ViewModelTransactionActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to transaction state\n     */\n    transaction: createTransactionReducers(stateContainer),\n    /**\n     * @name ViewModel#search\n     * @type {ViewModelSearchActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to transactions search\n     */\n    search: createSearchReducers(stateContainer),\n    /**\n     * @name ViewModel#export\n     * @type {ViewModelExportActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to export transactions\n     */\n    export: createExportReducers(stateContainer),\n    /**\n     * @name ViewModel#currencies\n     * @type {ViewModelCurrenciesActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to export currencies\n     */\n    currencies: createCurrenciesReducers(stateContainer),\n    /**\n     * @name ViewModel#notification\n     * @type {ViewModelNotificationActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to notifications\n     */\n    notification: createNotificationReducers(stateContainer),\n    /**\n     * @name ViewModel#categories\n     * @type {ViewModelCategoriesActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to categories\n     */\n    categories: createCategoriesReducers(stateContainer, hooks),\n    /**\n     * @name ViewModel#transactionsEnumValues\n     * @type {ViewModelTransactionsEnumValuesActions}\n     * @inner\n     *\n     * @description\n     * Actions for updating the parts of the `ViewState` related to transactions enum values\n     */\n    transactionsEnumValues: createTransactionsEnumValuesReducers(stateContainer, hooks),\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/index.js","export default params => ({\n  initialLoading: params.loadOnInit,\n  searching: false,\n  error: null,\n  paginationType: params.paginationType,\n  currencies: [],\n  transactions: {\n    rawData: null,\n    loading: false,\n    loadedAll: false,\n    total: 0,\n    from: 0,\n    size: params.pageSize,\n    today: '',\n    hasTodayTransactions: false,\n  },\n  transaction: {\n    data: null,\n  },\n  product: {\n    data: null,\n  },\n  search: {\n    rawData: null,\n    loading: false,\n    loadedAll: false,\n    total: 0,\n    from: 0,\n    size: params.pageSize,\n    query: null,\n    bookingDateLessThan: null,\n    bookingDateGreaterThan: null,\n    amountGreaterThan: null,\n    amountLessThan: null,\n    creditDebitIndicator: null,\n    billingStatus: null,\n    category: null,\n    categories: null,\n    fromCheckSerialNumber: null,\n    toCheckSerialNumber: null,\n  },\n  export: {\n    exportFailed: false,\n  },\n  notifications: [],\n  sort: {\n    orderBy: params.orderBy,\n    direction: params.sortDirection,\n  },\n  categories: {\n    data: null,\n  },\n  transactionsEnumValues: {\n    data: null,\n  },\n});\n\n/**\n * @typedef {object} ViewState\n * @description\n * The current state of the [ViewModel]{@link module:lib-bb-view-model-ng}.\n *\n * @property {boolean} initialLoading Indicates whether widget's initial loading is done\n * @property {boolean} searching Indicates whether transactions search is active at the moment\n * @property {object} error The last encountered error\n * @property {string} error.message Error message\n * @property {string} paginationType Represents current pagination type. 'pagination' or 'load-more'\n * @property {Array.<module:data-bb-payment-orders-ng.PaymentOrdersData.Currency>}\n * currencies List of available currencies\n * @property {object} transactions\n * @property {object[]} transactions.rawData Collection of transactions\n * @property {boolean} transactions.loading Indicates whether transactions are loading at the moment\n * @property {boolean} transactions.loadedAll Indicates whether all transactions are loaded\n * @property {number} transactions.total Total number of transactions\n * @property {number} transactions.from The current page (0 indexed)\n * @property {number} transactions.size The number of transactions in page\n * @property {string} transactions.today Today date in the `yyyy-MM-dd` format\n * @property {boolean} transactions.hasTodayTransactions Indicates whether transactions collection\n * contains today transactions\n *\n * @property {object} transaction\n * @property {boolean} transaction.data Current transaction object\n *\n * @property {object} product\n * @property {boolean} product.data Current product object\n *\n * @property {object} search\n * @property {object[]} search.rawData Collection of search transactions\n * @property {boolean} search.loading Indicates whether search transactions are loading at the\n * moment\n * @property {boolean} search.loadedAll Indicates whether all search transactions are loaded\n * @property {number} search.total Total number of search results\n * @property {number} search.from The current page (0 indexed)\n * @property {number} search.size The number of transactions in page\n * @property {string} search.query Query search parameter\n * @property {string} search.bookingDateLessThan Maximum booking date search parameter\n * @property {string} search.bookingDateGreaterThan Minimum booking date search parameter\n * @property {string} search.amountGreaterThan Minimum amount search parameter\n * @property {string} search.amountLessThan Maximum amount search parameter\n * @property {string} search.creditDebitIndicator Credit or debit search parameter\n * @property {string} search.category Transaction category search parameter\n * @property {string} search.categories Transaction categories search parameter\n * @property {string} search.billingStatus Billing status search parameter\n * @property {string} search.fromCheckSerialNumber Minimum check serial number search parameter\n * @property {string} search.toCheckSerialNumber Maximum check serial number search parameter\n *\n * @property {object} export\n * @property {boolean} export.exportFailed Indicates whether last transactions export failed\n *\n * @property {object[]} notifications Array of notifications to be displayed\n *\n * @property {object} sort\n * @property {string} sort.orderBy Property by which transactions have to be ordered\n * @property {direction} sort.direction Ordering direction\n *\n * @property {object} categories Categories by which transactions can be filtered\n * @property {object} transactionsEnumValues Enum values by which transactions can be filtered\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/initial-state.js","/**\n * @name ViewModelInitActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelInitActions#afterLoadDone\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after initial loading is done, successfully or unsuccessfully\n   */\n  afterLoadDone: stateContainer.createAction(state => ({\n    ...state,\n    initialLoading: false,\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/init.js","import { uiError, hasTodayTransactions } from './helpers';\n\n/**\n * @name ViewModelListActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelListActions#beforeLoad\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before loading transactions\n   */\n  beforeLoad: stateContainer.createAction(state => ({\n    ...state,\n    error: null,\n    transactions: {\n      ...state.transactions,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterLoadSuccess\n   * @type {function}\n   * @inner\n   * @param {TransactionsResponse} response Transactions load response\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successfully loading transactions\n   */\n  afterLoadSuccess: stateContainer.createAction((state, response) => ({\n    ...state,\n    transactions: {\n      ...state.transactions,\n      loading: false,\n      loadedAll: response.rawData.length < state.transactions.size,\n      rawData: state.paginationType === 'load-more' && !!response.requestParams.from ?\n        [...state.transactions.rawData || [], ...response.rawData] :\n        response.rawData,\n      total: response.totalCount,\n      from: response.requestParams.from,\n    },\n    sort: {\n      orderBy: response.requestParams.orderBy || null,\n      direction: response.requestParams.direction || null,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterLoadError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful transactions load\n   */\n  afterLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n    transactions: {\n      ...state.transactions,\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#beforeTodayTransactionsLoad\n   * @type {function}\n   * @inner\n   * @param {string} today Today date in the `yyyy-MM-dd` format\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before loading today transactions\n   */\n  beforeTodayTransactionsLoad: stateContainer.createAction((state, today) => ({\n    ...state,\n    transactions: {\n      ...state.transactions,\n      today,\n      hasTodayTransactions: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterTodayTransactionsLoadSuccess\n   * @type {function}\n   * @inner\n   * @param {object[]} data Today transactions\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successfully loading today transactions\n   */\n  afterTodayTransactionsLoadSuccess: stateContainer.createAction((state, data) => ({\n    ...state,\n    transactions: {\n      ...state.transactions,\n      hasTodayTransactions: hasTodayTransactions(data, state.transactions.today),\n    },\n  })),\n\n  /**\n   * @name ViewModelListActions#afterTodayTransactionsLoadError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful today transactions load\n   */\n  afterTodayTransactionsLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n  })),\n\n  /**\n   * @name ViewModelListActions#afterUpdateSuccess\n   * @type {function}\n   * @inner\n   * @param {object} item Updated transaction item\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successful transaction item update\n   */\n  afterUpdateSuccess: stateContainer.createAction((state, item) => ({\n    ...state,\n    transactions: {\n      ...state.transactions,\n      rawData: state.transactions.rawData.map(data => (data.id === item.id ? item : data)),\n    },\n    notifications: [\n      ...state.notifications, {\n        id: Date.now(),\n        message: 'notification.transaction.category.change.success',\n        level: 'success',\n      },\n    ],\n  })),\n\n  /**\n   * @name ViewModelListActions#afterUpdateError\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful transaction item update\n   */\n  afterUpdateError: stateContainer.createAction(state => ({\n    ...state,\n    notifications: [\n      ...state.notifications, {\n        id: Date.now(),\n        message: 'notification.transaction.category.change.fail',\n        level: 'danger',\n      },\n    ],\n  })),\n});\n\n/**\n * @typedef {object} TransactionsResponse\n * @property {object[]} rawData Loaded transactions array\n * @property {number} totalCount Total number of transactions\n * @property {LoadRequestParams} requestParams Request parameters object\n */\n\n/**\n * @typedef {object} LoadRequestParams\n * @property {number} from Page number to load\n * @property {number} size Page size to load\n * @property {string} productId Product ID of transactions to load\n * @property {?string} orderBy Order transactions by property\n * @property {?string} direction Transactions order direction\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/list.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { BadRequestErrors } from 'model-bb-transactions-ng';\n\n/**\n * @name ViewModelHelpers\n * @type {object}\n * @inner\n *\n * @description\n * Helpers for widget-bb-transactions-ng\n */\n\n/**\n * @name ViewModelHelpers#errorMessages\n * @type {object}\n * @inner\n *\n * @description\n * Map of error codes to message labels\n */\nconst errorMessages = {\n  [E_AUTH]: 'model.error.auth',\n  [E_CONNECTIVITY]: 'model.error.connectivity',\n  [E_USER]: 'model.error.user',\n  [E_UNEXPECTED]: 'model.error.unexpected',\n  [BadRequestErrors.ERR_INVALID_ARR_ID]: 'model.error.invalidArrId',\n  [BadRequestErrors.ERR_ARR_NOT_FOUND]: 'model.error.arrNotFound',\n  [BadRequestErrors.ERR_INVALID_TRAN_BODY]: 'model.error.invalidTranBody',\n  [BadRequestErrors.ERR_INVALID_TRAN_PARAMS]: 'model.error.invalidTranParams',\n  [BadRequestErrors.ERR_TRAN_EXISTS]: 'model.error.tranExists',\n  [BadRequestErrors.ERR_ARR_NO_PRIVILEGES]: 'model.error.arrNoPrivileges',\n  [BadRequestErrors.ERR_INVALID_ACCESS_GROUP_BODY]: 'model.error.invalidAccessGroupBody',\n  [BadRequestErrors.ERR_INVALID_USER_BODY]: 'model.error.invalidUserBody',\n  [BadRequestErrors.ERR_USER_NOT_FOUND]: 'model.error.userNotFound',\n  [BadRequestErrors.ERR_INVALID_PRIVILEGES_REQUESTED]: 'model.error.invalidPrivilegesRequested',\n  [BadRequestErrors.ERR_INVALID_CHECK_SERIAL_NUMBER_VALUE]: 'model.error.invalidCheckSerialNumberValue', // eslint-disable-line max-len\n};\n\n/**\n * @name ViewModelHelpers#uiError\n * @type {function}\n * @inner\n * @param {module:lib-bb-model-errors.ModelError} modelError The ModelError\n * @returns {object}\n *\n * @description\n * Helper function to create an error object for a template.\n */\nexport const uiError = modelError => {\n  if (modelError.code === E_USER && modelError.badRequestErrors\n    && errorMessages[modelError.badRequestErrors[0].key]\n  ) {\n    return {\n      message: errorMessages[modelError.badRequestErrors[0].key],\n      context: modelError.badRequestErrors[0].context,\n    };\n  }\n\n  return {\n    message: errorMessages[modelError.code],\n  };\n};\n\n/**\n * @name ViewModelHelpers#isSameDay\n * @type {function}\n * @inner\n * @param {string} date String representing the target day\n * @returns {boolean}\n *\n * @description\n * Helper function to iterate transaction collection and check for day in bookingDate field\n */\nconst isSameDay = date => transaction => transaction.bookingDate === date;\n\n/**\n * @name ViewModelHelpers#hasTodayTransactions\n * @type {function}\n * @inner\n * @param {object[]} transactions Array of transaction items\n * @param {string} date String representing the target day\n * @returns {boolean}\n *\n * @description\n * Helper function to check if there are transactions for a specific date\n */\nexport const hasTodayTransactions = (transactions, date) =>\n  transactions.some(isSameDay(date));\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/helpers.js","import { uiError } from './helpers';\n\n/**\n * @name ViewModelProductActions\n * @type {object}\n * @inner\n */\nexport default (stateContainer, hooks) => ({\n  /**\n   * @name ViewModelProductActions#afterSelectProductSuccess\n   * @type {function}\n   * @inner\n   * @param {object|null} product New Product object\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after new product selected\n   */\n  afterSelectProductSuccess: stateContainer.createAction((state, product) => ({\n    ...state,\n    error: null,\n    searching: false,\n    product: {\n      data: product ? hooks.processProductSelected(product) : null,\n    },\n    currencies: [],\n    transactions: {\n      ...state.transactions,\n      rawData: null,\n      loading: false,\n      loadedAll: false,\n      total: 0,\n      from: 0,\n      today: '',\n      hasTodayTransactions: false,\n    },\n    search: {\n      ...state.search,\n      rawData: null,\n      loading: false,\n      loadedAll: false,\n      total: 0,\n      from: 0,\n      query: null,\n      bookingDateLessThan: null,\n      bookingDateGreaterThan: null,\n      amountGreaterThan: null,\n      amountLessThan: null,\n      creditDebitIndicator: null,\n      fromCheckSerialNumber: null,\n      toCheckSerialNumber: null,\n    },\n  })),\n\n  /**\n   * @name ViewModelProductActions#afterSelectProductError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful product selection\n   */\n  afterSelectProductError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/product.js","/**\n * @name ViewModelTransactionActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelTransactionActions#afterLoadSuccess\n   * @type {function}\n   * @inner\n   * @param {object} data Transaction object\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successful transaction load\n   */\n  afterLoadSuccess: stateContainer.createAction((state, data) => ({\n    ...state,\n    transaction: {\n      data,\n    },\n  })),\n\n  /**\n   * @name ViewModelTransactionActions#beforeStore\n   * @type {function}\n   * @inner\n   * @param {object} data New transaction object\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before new transaction will be stored\n   */\n  beforeStore: stateContainer.createAction((state, data) => ({\n    ...state,\n    transaction: {\n      data,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/transaction.js","import { uiError } from './helpers';\n\n/**\n * @name ViewModelSearchActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelSearchActions#beforeSearch\n   * @type {function}\n   * @inner\n   * @param {SearchRequestParams} params Search request parameters\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before search transactions\n   */\n  beforeSearch: stateContainer.createAction((state, params) => ({\n    ...state,\n    searching: true,\n    error: null,\n    search: {\n      ...state.search,\n      loading: true,\n      query: params.query || null,\n      category: params.category || null,\n      categories: params.categories || null,\n    },\n  })),\n\n  /**\n   * @name ViewModelSearchActions#afterSearchSuccess\n   * @type {function}\n   * @inner\n   * @param {TransactionsSearchResponse} response Search response\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successful transactions search\n   */\n  afterSearchSuccess: stateContainer.createAction((state, response) => {\n    const query = response.requestParams.query || null;\n\n    if (!state.searching || state.search.query !== query) {\n      return state;\n    }\n\n    return {\n      ...state,\n      search: {\n        ...state.search,\n        loading: false,\n        loadedAll: response.rawData.length < state.search.size,\n        rawData: state.paginationType === 'load-more' && !!response.requestParams.from ?\n          [...state.search.rawData || [], ...response.rawData] :\n          response.rawData,\n        total: response.totalCount,\n        from: response.requestParams.from,\n        bookingDateLessThan: response.requestParams.bookingDateLessThan || null,\n        bookingDateGreaterThan: response.requestParams.bookingDateGreaterThan || null,\n        amountGreaterThan: response.requestParams.amountGreaterThan || null,\n        amountLessThan: response.requestParams.amountLessThan || null,\n        creditDebitIndicator: response.requestParams.creditDebitIndicator || null,\n        billingStatus: response.requestParams.billingStatus || null,\n        fromCheckSerialNumber: response.requestParams.fromCheckSerialNumber || null,\n        toCheckSerialNumber: response.requestParams.toCheckSerialNumber || null,\n      },\n      sort: {\n        orderBy: response.requestParams.orderBy || null,\n        direction: response.requestParams.direction || null,\n      },\n    };\n  }),\n\n  /**\n   * @name ViewModelSearchActions#afterSearchError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful transactions search\n   */\n  afterSearchError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n    search: {\n      ...state.search,\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelSearchActions#cancel\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` when transactions search canceled\n   */\n  cancel: stateContainer.createAction(state => ({\n    ...state,\n    error: null,\n    searching: false,\n    search: {\n      ...state.search,\n      rawData: null,\n      loading: false,\n      loadedAll: false,\n      total: 0,\n      from: 0,\n      query: null,\n      bookingDateLessThan: null,\n      bookingDateGreaterThan: null,\n      amountGreaterThan: null,\n      amountLessThan: null,\n      creditDebitIndicator: null,\n      billingStatus: null,\n      category: null,\n      categories: null,\n      fromCheckSerialNumber: null,\n      toCheckSerialNumber: null,\n    },\n  })),\n});\n\n/**\n * @typedef {object} TransactionsSearchResponse\n * @property {object[]} rawData Search transactions array\n * @property {number} totalCount Total number of found transactions\n * @property {SearchRequestParams} requestParams Request parameters object\n */\n\n/**\n * @typedef {object} SearchRequestParams\n * @property {number} from Page number to load\n * @property {number} size Page size to load\n * @property {string} productId Product ID of transactions to load\n * @property {?string} orderBy Order transactions by property\n * @property {?string} direction Transactions order direction\n * @property {?string} query Query search parameter\n * @property {?string} bookingDateLessThan Maximum booking date search parameter\n * @property {?string} bookingDateGreaterThan Minimum booking date search parameter\n * @property {?string} amountGreaterThan Minimum amount search parameter\n * @property {?string} amountLessThan Maximum amount search parameter\n * @property {?string} creditDebitIndicator Credit or debit search parameter\n * @property {?string} billingStatus Billing status search parameter\n * @property {?string} category Transaction category search parameter\n * @property {?string} categories Transaction categories search parameter\n * @property {?string} fromCheckSerialNumber Minimum check serial number search parameter\n * @property {?string} toCheckSerialNumber Maximum check serial number search parameter\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/search.js","/**\n * @name ViewModelExportActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelExportActions#beforeExport\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before transactions export\n   */\n  beforeExport: stateContainer.createAction(state => ({\n    ...state,\n    export: {\n      exportFailed: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelExportActions#afterExportError\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after failed transactions export\n   */\n  afterExportError: stateContainer.createAction(state => ({\n    ...state,\n    export: {\n      exportFailed: true,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/export.js","import { uiError } from './helpers';\n\n/**\n * @name ViewModelCurrenciesActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelCurrenciesActions#beforeLoad\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before loading currencies\n   */\n  beforeLoad: stateContainer.createAction(state => ({\n    ...state,\n    error: null,\n    currencies: {\n      ...state.currencies,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelCurrenciesActions#afterLoadSuccess\n   * @type {function}\n   * @inner\n   * @param {array.<module:data-bb-payment-orders-ng.PaymentOrdersData.Currency>} data\n   * Currencies array\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successful currencies load\n   */\n  afterLoadSuccess: stateContainer.createAction((state, data) => ({\n    ...state,\n    currencies: {\n      loading: false,\n      data,\n    },\n  })),\n\n  /**\n   * @name ViewModelCurrenciesActions#afterLoadError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful currencies load\n   */\n  afterLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n    currencies: {\n      data: [],\n      loading: false,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/currencies.js","/**\n * @name ViewModelNotificationActions\n * @type {object}\n * @inner\n */\nexport default stateContainer => ({\n  /**\n   * @name ViewModelNotificationActions#removeNotification\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after removing notification\n   */\n  removeNotification: stateContainer.createAction((state, payload) => ({\n    ...state,\n    notifications: state.notifications.filter(item => item.id !== payload),\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/notification.js","import { uiError } from './helpers';\n\n/**\n * @name ViewModelCategoriesActions\n * @type {object}\n * @inner\n */\nexport default (stateContainer, hooks) => ({\n  /**\n   * @name ViewModelCategoriesActions#beforeLoad\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before loading categories\n   */\n  beforeLoad: stateContainer.createAction(state => ({\n    ...state,\n    error: null,\n    categories: {\n      ...state.categories,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelCategoriesActions#afterLoadSuccess\n   * @type {function}\n   * @inner\n   * @param {Array.<module:data-bb-categories-management-http-ng.CategoriesManagement.Category>}\n   * data Categories array\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successful categories load\n   */\n  afterLoadSuccess: stateContainer.createAction((state, data) => ({\n    ...state,\n    categories: {\n      data: data.length ? hooks.processCategories(data) : null,\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelCategoriesActions#afterLoadError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful categories load\n   */\n  afterLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n    categories: {\n      data: null,\n      loading: false,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/categories.js","import { uiError } from './helpers';\n\n/**\n * @name ViewModelTransactionsEnumValuesActions\n * @type {object}\n * @inner\n */\nexport default (stateContainer, hooks) => ({\n  /**\n   * @name ViewModelTransactionsEnumValuesActions#beforeLoad\n   * @type {function}\n   * @inner\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` before loading transactions enum values\n   */\n  beforeLoad: stateContainer.createAction(state => ({\n    ...state,\n    error: null,\n    transactionsEnumValues: {\n      ...state.transactionsEnumValues,\n      loading: true,\n    },\n  })),\n\n  /**\n   * @name ViewModelTransactionsEnumValuesActions#afterLoadSuccess\n   * @type {function}\n   * @inner\n   * @param {Array.<module:data-bb-transactions-http-ng.TransactionsData.DefaultValueGetResponse>}\n   * data Transactions enum values array\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after successful transactions enum values load\n   */\n  afterLoadSuccess: stateContainer.createAction((state, data) => ({\n    ...state,\n    transactionsEnumValues: {\n      data: {\n        ...state.transactionsEnumValues.data,\n        ...hooks.processTransactionsEnumValues(data),\n      },\n      loading: false,\n    },\n  })),\n\n  /**\n   * @name ViewModelTransactionsEnumValuesActions#afterLoadError\n   * @type {function}\n   * @inner\n   * @param {module:lib-bb-model-errors.ModelError} error Response error\n   * @returns {void}\n   *\n   * @description\n   * Update the `ViewState` after unsuccessful transactions enum values load\n   */\n  afterLoadError: stateContainer.createAction((state, error) => ({\n    ...state,\n    error: uiError(error),\n    transactionsEnumValues: {\n      data: null,\n      loading: false,\n    },\n  })),\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/view-model/transactions-enum-values.js","/* global window */\nimport { DefaultGetTransactionsEnumValuesParams } from './constants';\n\n/**\n * @name TransactionsService\n * @type {object}\n * @ngkey widget-bb-transactions-ng:service\n *\n * @description\n * The service encapsulates the core functionality of the Transactions Widget. It co-ordinates the\n * communication of data from the `Model` with the communication with the user by updating the\n * {@link ViewState}.\n *\n * Asynchronous methods update the {@link ViewState} in 3 potential stages; \"before\", \"success\", and\n * \"error\", to allow the view to provide feedback to the user.\n */\n\n/**\n * @name padded\n * @type {function}\n * @inner\n * @param {number} num Number to add padding\n * @returns {string} Padded number as a string\n *\n * @description\n * Adds leading zero to number values less than 10\n */\nconst padded = num => (num > 9 ? String(num) : `0${num}`);\n\n/**\n * @name formatDate\n * @type {function}\n * @inner\n * @param {object} date Date to format\n * @returns {string} Formatted date string\n *\n * @description Formats date to yyyy-MM-dd format\n */\nconst formatDate = date =>\n  `${date.getFullYear()}-${padded(date.getMonth() + 1)}-${padded(date.getDate())}`;\n\n/**\n * @name createTransactionsService\n * @type {function}\n * @inner\n * @param {module:model-bb-transactions-ng.transactionsModel} model Transactions model\n * @param {ViewModel} viewModel\n * @param {object} $window\n * @returns {TransactionsService}\n */\nexport default (model, viewModel, $window) => ({\n  /**\n   * @name TransactionsService#load\n   * @type {function}\n   * @param {LoadRequestParams} params Request params\n   * @returns {Promise.<void>}\n   *\n   * @description\n   * Fetch a `page` of `transactions` from the model and update the {@link ViewState} to display\n   * them.\n   */\n  load: params => {\n    viewModel.list.beforeLoad();\n\n    return model.load(params)\n      .then(raw => {\n        viewModel.list.afterLoadSuccess({\n          rawData: raw.data,\n          totalCount: raw.totalCount,\n          requestParams: params,\n        });\n      })\n      .catch(error => {\n        viewModel.list.afterLoadError(error);\n        throw error;\n      });\n  },\n\n  /**\n   * @name TransactionsService#search\n   * @type {function}\n   * @param {SearchRequestParams} params Request params\n   * @returns {Promise.<void>}\n   *\n   * @description\n   * Fetch a `page` of `transactions` search results from the model and update the {@link ViewState}\n   * to display them.\n   */\n  search: params => {\n    viewModel.search.beforeSearch({\n      query: params.query,\n      category: params.category,\n      categories: params.categories,\n    });\n\n    return model.load(params)\n      .then(raw => {\n        viewModel.search.afterSearchSuccess({\n          rawData: raw.data,\n          totalCount: raw.totalCount,\n          requestParams: params,\n        });\n      })\n      .catch(error => {\n        viewModel.search.afterSearchError(error);\n        throw error;\n      });\n  },\n\n  /**\n   * @name TransactionsService#export\n   * @type {function}\n   * @param {ExportRequestParams} params Request params\n   * @param {string} format Export format\n   * @returns {Promise.<void>}\n   *\n   * @description\n   * Download transactions, which satisfy request parameter conditions, in specified format\n   */\n  export: (params, format) => {\n    viewModel.export.beforeExport();\n\n    const uri = model.getExportFileResource(params, format);\n    $window.location.assign(uri);\n  },\n\n  /**\n   * @name TransactionsService#checkTodayTransactions\n   * @type {function}\n   * @returns {void}\n   *\n   * @description\n   * Fetch one transaction with today's date and update `ViewState` to indicate whether a\n   * transaction for today is present.\n   */\n  checkTodayTransactions: () => {\n    const today = formatDate(new Date());\n    viewModel.list.beforeTodayTransactionsLoad(today);\n  },\n\n  /**\n   * @name TransactionsService#setupSelectedProduct\n   * @type {function}\n   * @param {boolean} isDefaultProductFirst Indicates whether default product should be returned\n   * first\n   * @returns {Promise.<void>}\n   *\n   * @description\n   * Fetch selected product and update `ViewState`.\n   */\n  setupSelectedProduct: isDefaultProductFirst =>\n    model.getSelectedProduct(isDefaultProductFirst)\n      .then(selectedProduct => {\n        viewModel.product.afterSelectProductSuccess(selectedProduct);\n      })\n      .catch(error => {\n        viewModel.product.afterSelectProductError(error);\n        throw error;\n      }),\n\n  /**\n   * @name TransactionsService#loadCurrentTransaction\n   * @type {function}\n   * @returns {Promise.<void>}\n   *\n   * @description\n   * Fetch selected transaction and update `ViewState`.\n   */\n  loadCurrentTransaction: () => model.getCurrentTransaction()\n    .then(data => viewModel.transaction.afterLoadSuccess(data)),\n\n  /**\n   * @name TransactionsService#updateTransactionCategory\n   * @type {function}\n   * @param {object} data Object with transactionId, arrangementId and categoryName properties\n   * @returns {Promise.<boolean, object>} True if the update was successful, error object otherwise\n   *\n   * @description\n   * Updates transaction's category and `ViewState`.\n   */\n  updateTransactionCategory: data =>\n    model.updateTransactionCategory(data.transactionId, data.arrangementId, data.categoryName),\n\n  /**\n   * @name TransactionsService#storeCurrentTransaction\n   * @type {function}\n   * @param {object} transaction Currently selected transaction\n   * @returns {void}\n   *\n   * @description\n   * Stores currently selected transaction and updates `ViewState`.\n   */\n  storeCurrentTransaction: transaction => {\n    viewModel.transaction.beforeStore(transaction);\n    model.storeTransactionAsCurrent(transaction);\n  },\n\n  /**\n   * @name TransactionsService#getCurrencies\n   * @type {function}\n   * @returns {Array.<module:data-bb-payment-orders-ng.PaymentOrdersData.Currency>} Currencies array\n   *\n   * @description\n   * Request currencies list.\n   */\n  getCurrencies: () =>\n    model.getCurrencies()\n      .then(currencies => {\n        viewModel.currencies.afterLoadSuccess(currencies);\n      })\n      .catch(error => {\n        viewModel.currencies.afterLoadError(error);\n        throw error;\n      }),\n\n  /**\n   * @name TransactionsService#getCategories\n   * @type {function}\n   * @returns {Array.<module:data-bb-categories-management-http-ng.CategoriesManagement.Category>}\n   * categories array\n   *\n   * @description\n   * Request categories list.\n   */\n  getCategories: () =>\n    model.getCategories()\n      .then((categories) => {\n        viewModel.categories.afterLoadSuccess(categories);\n      })\n      .catch(error => {\n        viewModel.categories.afterLoadError(error);\n        throw error;\n      }),\n\n  /**\n   * @name TransactionsService#getTransactionsEnumValues\n   * @type {function}\n   * @returns {Array.<module:data-bb-transactions-http-ng.TransactionsData.DefaultValueGetResponse>}\n   * transactions enum values array\n   *\n   * @description\n   * Request transactions enum values.\n   */\n  getTransactionsEnumValues: () =>\n    model.getTransactionsEnumValues(DefaultGetTransactionsEnumValuesParams)\n      .then((transactionsEnumValues) => {\n        viewModel.transactionsEnumValues.afterLoadSuccess({\n          billingStatus: transactionsEnumValues,\n        });\n      })\n      .catch(error => {\n        viewModel.transactionsEnumValues.afterLoadError(error);\n        throw error;\n      }),\n});\n\n/**\n * @typedef {object} ExportRequestParams\n * @property {string} exportFormat Export format\n * @property {string} productId Product ID of transactions to load\n * @property {?string} query Query search parameter\n * @property {?string} bookingDateLessThan Maximum booking date search parameter\n * @property {?string} bookingDateGreaterThan Minimum booking date search parameter\n * @property {?string} amountGreaterThan Minimum amount search parameter\n * @property {?string} amountLessThan Maximum amount search parameter\n * @property {?string} creditDebitIndicator Credit or debit search parameter\n * @property {?string} billingStatus Billing status search parameter\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-transactions-ng/scripts/service.js"],"sourceRoot":""}