{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap f349473844a5947560cb?9ea2*","webpack:///./widget-bb-audit-query-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-audit-query-ng/scripts/index.js","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"model-bb-audit-query-ng\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"lib-bb-extension-intents-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"lib-bb-state-container-ng\"","webpack:///./widget-bb-audit-query-ng/scripts/download-csv-service.js","webpack:///./widget-bb-audit-query-ng/scripts/constants.js","webpack:///./widget-bb-audit-query-ng/scripts/audit-query-service.js","webpack:///./widget-bb-audit-query-ng/scripts/audit-filters-service.js","webpack:///./widget-bb-audit-query-ng/scripts/view-model/index.js","webpack:///./widget-bb-audit-query-ng/scripts/view-model/list.js","webpack:///./widget-bb-audit-query-ng/scripts/view-model/helpers.js","webpack:///./widget-bb-audit-query-ng/scripts/view-model/initial-state.js","webpack:///./widget-bb-audit-query-ng/scripts/audit-query.controller.js","webpack:///./widget-bb-audit-query-ng/scripts/form.controller.js","webpack:///./widget-bb-audit-query-ng/scripts/table.controller.js","webpack:///./widget-bb-audit-query-ng/scripts/router.js","webpack:///./widget-bb-audit-query-ng/scripts/default-hooks.js"],"names":["moduleKey","hooksKey","downloadCsvServiceKey","auditQueryServiceKey","auditFiltersServiceKey","viewModelKey","routerKey","angular","module","widgetModuleKey","eventBusModuleKey","modelAuditQueryModuleKey","stateContainerModuleKey","bbExtensionHelpersModuleKey","bbExtensionIntentsModuleKey","bbIntentModuleKey","factory","defaultHooks","DownloadCsvService","modelAuditQueryKey","AuditFiltersService","widgetKey","AuditQueryService","bbStateContainerKey","Router","ViewModel","extensionHelpersContextKey","bbIntentKey","auditQueryModel","auditQueryService","auditFiltersService","auditQueryViewModel","router","bbIntent","extensionIntentsContextKey","controller","eventBusKey","AuditQueryController","FormController","TableController","run","viewModel","init","name","$window","click","event","MouseEvent","node","dispatchEvent","getFileNameFromContentDisposition","disposition","fileName","csvExportDefaults","defaultDownloadFileName","indexOf","filenameRegex","matches","exec","matchedName","replace","downloadFile","data","headers","blob","Blob","type","navigator","msSaveBlob","url","URL","createObjectURL","anchor","document","createElement","href","download","revokeObjectURL","pagerDefaults","resultsPerPage","maxNavPages","csvMaxSize","model","widget","downloadCsvService","list","normalizeDate","date","day","getDate","month","getMonth","year","getFullYear","utcDate","Date","UTC","toISOString","substr","arrayFromModelValue","modelObj","value","valueFromModel","getUsernames","dropdownUsers","user","modelValue","stateDataToParams","currentPage","size","controlState","startDate","startDatepicker","endDate","endDatepicker","eventCategories","dropdownCategory","objectType","dropdownType","eventAction","dropdownStatus","usernames","serviceAgreementId","dropdownServiceAgreement","legalEntityIds","dropdownLegalEntity","from","queryForAuditLogMessages","state","beforeQueryForAuditLogMessages","params","getAuditLogMessages","then","totalCountHeader","totalCount","parseInt","afterQueryForAuditLogMessagesSuccess","auditMessages","catch","afterQueryForAuditLogMessagesError","queryForAuditLogMessagesDownload","headerParams","beforeQueryForCSV","afterQueryForCSVSuccess","afterQueryForCSVError","users","buildCategoriesObject","reduce","acc","category","categoryName","eventCategory","categoryTypesObject","objectTypes","categoryTypes","Object","assign","eventActions","getCategoryNames","keys","getTypeNames","getStatusNames","eventTypeName","queryForAuditLogEventCategories","beforeGetCategories","getAuditLogEventCategories","afterGetCategoriesSuccess","afterGetCategoriesError","stateContainer","hooks","createAction","current","setState","List","isLoading","map","transformAuditMessage","error","csvIsLoading","newQuery","clear","eventCategoriesLoading","errorMessages","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","uiError","message","modelError","code","createInitialState","isCannedSearch","serviceAgreements","legalEntities","bus","$ctrl","getWidgetPreferences","getStringArrayPreference","getLongPreference","maxSize","setWidgetPreferences","preferences","goToDefaultState","goto","getControlModel","newCtrlState","getControlModelIntoValue","getDisabled","disabled","getControlState","getControlStateIntoValue","intentState","searchIntentHandler","newParms","mappedState","newState","$onInit","publish","id","getId","handle","initHandler","cloneState","getParams","getState","submitQuery","editExistingQuery","subscribers","setRoute","route","notifySubscribers","forEach","subscriber","createSelector","getRoute","subscribe","callback","filter","sub","identity","a"],"mappings":"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","file":"widget-bb-audit-query-ng/scripts/widget-bb-audit-query-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-audit-query-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-state-container-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-audit-query-ng\", [\"vendor-bb-angular\", \"lib-bb-model-errors\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"model-bb-audit-query-ng\", \"lib-bb-extension-helpers-ng\", \"lib-bb-extension-intents-ng\", \"lib-bb-intent-ng\", \"lib-bb-state-container-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-audit-query-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-audit-query-ng\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-state-container-ng\"));\n\telse\n\t\troot[\"widget-bb-audit-query-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-bb-audit-query-ng\"], root[\"lib-bb-extension-helpers-ng\"], root[\"lib-bb-extension-intents-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-state-container-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_21__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_25__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_28__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f349473844a5947560cb","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-audit-query-ng/model.xml\n// module id = 0\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 19\n// module chunks = 1 2","/**\n * @module widget-bb-audit-query-ng\n *\n * @description\n * Audit query\n */\nimport angular from 'vendor-bb-angular';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\n\nimport modelAuditQueryModuleKey, {\n  modelAuditQueryKey,\n} from 'model-bb-audit-query-ng';\n\nimport bbExtensionHelpersModuleKey, {\n  extensionHelpersContextKey,\n} from 'lib-bb-extension-helpers-ng';\n\nimport bbExtensionIntentsModuleKey, {\n  extensionIntentsContextKey,\n} from 'lib-bb-extension-intents-ng';\n\nimport bbIntentModuleKey, {\n  bbIntentKey,\n} from 'lib-bb-intent-ng';\n\nimport stateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\n\nimport DownloadCsvService from './download-csv-service';\nimport AuditQueryService from './audit-query-service';\nimport AuditFiltersService from './audit-filters-service';\nimport ViewModel from './view-model/index';\nimport AuditQueryController from './audit-query.controller';\nimport FormController from './form.controller';\nimport TableController from './table.controller';\nimport Router from './router';\n\nimport defaultHooks from './default-hooks';\n\nconst moduleKey = 'widget-bb-audit-query-ng';\nconst hooksKey = `${moduleKey}:hooks`;\nconst downloadCsvServiceKey = `${moduleKey}:download-csv-service`;\nconst auditQueryServiceKey = `${moduleKey}:service`;\nconst auditFiltersServiceKey = `${moduleKey}:audit-filters-service`;\nconst viewModelKey = `${moduleKey}:view-model`;\nconst routerKey = `${moduleKey}:router`;\n\nexport default angular\n  .module(moduleKey, [\n    widgetModuleKey,\n    eventBusModuleKey,\n    modelAuditQueryModuleKey,\n    stateContainerModuleKey,\n    bbExtensionHelpersModuleKey,\n    bbExtensionIntentsModuleKey,\n    bbIntentModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(downloadCsvServiceKey, [\n    '$window',\n    /* into */\n    DownloadCsvService,\n  ])\n\n  .factory(auditFiltersServiceKey, [\n    viewModelKey,\n    modelAuditQueryKey,\n    /* into */\n    AuditFiltersService,\n  ])\n\n  .factory(auditQueryServiceKey, [\n    modelAuditQueryKey,\n    viewModelKey,\n    widgetKey,\n    downloadCsvServiceKey,\n    /* into */\n    AuditQueryService,\n  ])\n\n  .factory(routerKey, [\n    bbStateContainerKey,\n    /* into */\n    Router,\n  ])\n\n  .factory(viewModelKey, [\n    bbStateContainerKey,\n    hooksKey,\n    /* into */\n    ViewModel,\n  ])\n\n  // Add `auditQueryModel` and `auditQueryService` to the `context` provided to the\n  // extension `helpers` key\n  .factory(extensionHelpersContextKey, [\n    modelAuditQueryKey,\n    auditQueryServiceKey,\n    auditFiltersServiceKey,\n    viewModelKey,\n    routerKey,\n    bbIntentKey,\n    /* into */\n    (auditQueryModel,\n      auditQueryService,\n      auditFiltersService,\n      auditQueryViewModel,\n      router,\n      bbIntent) =>\n      ({\n        auditQueryModel,\n        auditQueryService,\n        auditFiltersService,\n        auditQueryViewModel,\n        router,\n        bbIntent,\n      }),\n  ])\n\n  // Add `auditQueryModel` and `auditQueryService` to the `context` provided to the\n  // extension `intents` key\n  .factory(extensionIntentsContextKey, [\n    modelAuditQueryKey,\n    auditQueryServiceKey,\n    /* into */\n    (auditQueryModel, auditQueryService) => ({\n      auditQueryModel,\n      auditQueryService,\n    }),\n  ])\n\n  .controller('AuditQueryController', [\n    // dependencies to inject\n    eventBusKey,\n    routerKey,\n    widgetKey,\n    auditFiltersServiceKey,\n    bbStateContainerKey,\n    bbIntentKey,\n    /* into */\n    AuditQueryController,\n  ])\n\n  .controller('FormController', [\n    // dependencies to inject\n    bbStateContainerKey,\n    routerKey,\n    viewModelKey,\n    /* into */\n    FormController,\n  ])\n\n  .controller('TableController', [\n    // dependencies to inject\n    bbStateContainerKey,\n    routerKey,\n    auditQueryServiceKey,\n    /* into */\n    TableController,\n  ])\n\n  .run([\n    viewModelKey, (viewModel) => {\n      viewModel.init();\n    },\n  ])\n\n  .name;\n\n/**\n * @typedef HelperContext\n * @type {object}\n * @extends module:lib-bb-extension-helpers-ng.HelperContext\n * @property {module:model-bb-audit-query-ng.AuditQueryModel} auditQueryModel\n * @property {AuditQueryService} auditQueryService\n */\n\n/**\n * @typedef IntentContext\n * @type {object}\n * @extends module:lib-bb-extension-intents-ng.IntentContext\n * @property {module:model-bb-audit-query-ng.AuditQueryModel} auditQueryModel\n * @property {AuditQueryService} auditQueryService\n */\n\n/**\n * @typedef EventContext\n * @type {object}\n * @extends module:lib-bb-extension-events-ng.EventContext\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_21__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 21\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 22\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 23\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-audit-query-ng\"\n// module id = 24\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_25__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 25\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-intents-ng\"\n// module id = 26\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 27\n// module chunks = 2","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 28\n// module chunks = 2","import { csvExportDefaults } from './constants';\n\n/**\n *\n * The purpose of this module is to provide a method of downloading\n * a CSV file cross browser with content and a file name\n *\n * @constructor DownloadCsvService\n *\n * @description The download file functionality for CSV export\n */\nexport default function DownloadCsvService($window) {\n  const click = node => {\n    // required for non-Chrome browsers to trigger click\n    // where the element that isn't added to the DOM\n    const event = new $window.MouseEvent('click');\n    node.dispatchEvent(event);\n  };\n\n  const getFileNameFromContentDisposition = (disposition) => {\n    let fileName = csvExportDefaults.defaultDownloadFileName;\n    if (disposition && disposition.indexOf('attachment') !== -1) {\n      // example string - 'attachment; filename=audit-log_20170901-20171001.csv'\n      // gets the name part of the string for the above - audit-log_20170901-20171001.csv\n      // starting at any character that is not = ; or new line\n      // ending at .csv\n      const filenameRegex = /filename[^;=\\n]*=(.*csv*)/;\n      const matches = filenameRegex.exec(disposition);\n      const [, matchedName] = matches || [];\n      fileName = matchedName ? matchedName.replace(/['\"]/g, '') : fileName;\n    }\n    return fileName;\n  };\n\n  return {\n    /**\n     *\n     * @name DownloadCsvService#getFileNameFromContentDisposition\n     * @param {string} disposition disposition string from the request header\n     * @type {function}\n     * @return {string} the file name that should be used on the download file\n     *\n     * @description Return a freindly name from the disposition header\n     */\n    getFileNameFromContentDisposition,\n\n    /**\n     *\n     * @name AuditQueryService#downloadFile\n     * @param {string} data CSV result data\n     * @param {string} fileName name of the file that will be downloaded\n     * @type {function}\n     *\n     * @description Download file on the user's machine\n     */\n    downloadFile: (data, headers) => {\n      const fileName = getFileNameFromContentDisposition(headers('content-disposition'));\n\n      const blob = new $window.Blob([data], { type: 'text/csv' });\n\n      if ($window.navigator.msSaveBlob) {\n        // IE fix\n        $window.navigator.msSaveBlob(blob, fileName);\n      } else {\n        // Safari and all other browsers\n        const url = $window.URL.createObjectURL(blob);\n        const anchor = $window.document.createElement('a');\n        anchor.href = url;\n        anchor.download = fileName;\n        click(anchor);\n        $window.URL.revokeObjectURL(url);\n      }\n    },\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/download-csv-service.js","/**\n * @description\n * Default values for the pager if not set on the widget\n *\n * @name pagerDefaults\n * @type {object}\n */\nexport const pagerDefaults = {\n  resultsPerPage: 25,\n  maxNavPages: 3,\n};\n\n/**\n * @description\n * Default values for csv export\n *\n * @name csvExportDefaults\n * @type {object}\n */\nexport const csvExportDefaults = {\n  csvMaxSize: 1000000,\n  defaultDownloadFileName: 'audit_log.csv',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/constants.js","/**\n *\n * The purpose of this module is to provide the main structure of the\n * Audit query widget. Outlining the workflows, connecting the data from the\n * model to the view via the customizations provided by the extension.\n *\n * @constructor AuditQueryService\n * @param {AuditQueryModel} model\n * @param {object} viewModel\n * @param {List} viewModel.list\n * @param {Widget} widget\n * @param {DownloadCsvService} downloadCsvService\n *\n * @description The core functionality of the Audit query widget\n */\nexport default function AuditQueryService(\n  model,\n  { list },\n  widget,\n  downloadCsvService) {\n  // take entered date and represent as string YYYY-MM-dd\n  // this is more intentional than timezone offset method\n  const normalizeDate = date => {\n    if (date) {\n      const day = date.getDate();\n      const month = date.getMonth();\n      const year = date.getFullYear();\n      const utcDate = new Date(Date.UTC(year, month, day));\n      return utcDate.toISOString().substr(0, 10);\n    }\n    return null;\n  };\n\n  // For the moment we only support single select dropdown so map single value into array\n  const arrayFromModelValue = ({ model: modelObj }) =>\n    (modelObj && modelObj.value ? [modelObj.value] : []);\n\n  const valueFromModel = ({ model: modelObj }) =>\n    (modelObj && modelObj.value ? modelObj.value : '');\n\n  // if dropdownUsers contains values set from those, otherwise set from user\n  const getUsernames = ({ dropdownUsers, user }) => {\n    if (dropdownUsers && dropdownUsers.model && dropdownUsers.model.value) {\n      return [dropdownUsers.model.value];\n    }\n    return user && user.model ? [user.model] : [];\n  };\n\n  const modelValue = ({ model: modelObj }) => modelObj && modelObj.value;\n\n  // populate parms for query with data from controls and pagination\n  const stateDataToParams = ({ controlState }, currentPage, size) => ({\n    startDate: normalizeDate(controlState.startDatepicker.model),\n    endDate: normalizeDate(controlState.endDatepicker.model),\n    // for the moment we only support single select dropdown\n    eventCategories: arrayFromModelValue(controlState.dropdownCategory),\n    objectType: valueFromModel(controlState.dropdownType),\n    eventAction: valueFromModel(controlState.dropdownStatus),\n    usernames: getUsernames(controlState),\n    serviceAgreementId: modelValue(controlState.dropdownServiceAgreement),\n    legalEntityIds: arrayFromModelValue(controlState.dropdownLegalEntity),\n    // the pages passed from the bootstrap pager start count at 1 instead of 0\n    from: (currentPage - 1),\n    size,\n  });\n\n\n  /**\n   * @name AuditQueryService\n   * @type {Object}\n   */\n  return {\n\n    /**\n     *\n     * @name AuditQueryService#queryForAuditLogMessages\n     * @param {ViewState} state The current control state\n     * @param {number} [currentPage] Current bootstrap page - index starts at 1\n     * @type {function}\n     * @return {Promise<void>}\n     *\n     * @description Update the view with an list of items loaded from the data source\n     */\n    queryForAuditLogMessages: (state, currentPage = 1) => {\n      list.beforeQueryForAuditLogMessages(currentPage);\n      const params = stateDataToParams(state, currentPage, state.resultsPerPage);\n      return model.getAuditLogMessages(params)\n        .then(({ data, headers }) => {\n          const totalCountHeader = headers('x-total-count');\n          const totalCount = totalCountHeader ? parseInt(totalCountHeader, 10) : 0;\n          list.afterQueryForAuditLogMessagesSuccess({\n            auditMessages: data.auditMessages,\n            totalCount,\n          });\n        })\n        .catch(list.afterQueryForAuditLogMessagesError);\n    },\n    /**\n     *\n     * @name AuditQueryService#queryForAuditLogMessagesDownload\n     * @param {ViewState} state The current control state\n     * @param {Object} headerParams Params sent in the header of the request\n     * @type {function}\n     * @return {Promise<void>}\n     *\n     * @description Update the browser with a file to download\n     */\n    queryForAuditLogMessagesDownload: (state, headerParams) => {\n      list.beforeQueryForCSV();\n      const params = stateDataToParams(state);\n      return model.getAuditLogMessages(params, headerParams)\n        .then(({ data, headers }) => {\n          downloadCsvService.downloadFile(data, headers);\n          list.afterQueryForCSVSuccess();\n        })\n        .catch(list.afterQueryForCSVError);\n    },\n\n    /**\n     * @name AuditQueryService#users\n     * @type {function}\n     * @return {string[]}\n     *\n     * @description Get list of users (Currently always empty.)\n     */\n    // TODO - change this to populate view with users and use promise\n    // as will probably change to get data from back end\n    users: () => [],\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/audit-query-service.js","\n/**\n *\n * The purpose of this module is to provide methods for the event category\n * filters to display and update correctly\n *\n * @constructor AuditFiltersService\n * @param {object} viewModel\n * @param {List} viewModel.list\n * @param {AuditQueryModel} model\n *\n * @description The audit category filters service, to return relevant lists\n *   of categories, types and statuses which are given in a nested structure\n */\nexport default function AuditFiltersService({ list }, model) {\n  /**\n   *\n   * @name buildCategoriesObject\n   * @param {module:data-bb-audit-query-http-ng.AuditEventCategoryResponse} data\n   *   The raw data response of event categories\n   * @type {function}\n   * @return {ParsedEventCategories}\n   *\n   * @description Return a built up JS object of categories for easier traversing\n   *   to display correct values in the filters\n   * @inner\n   */\n  const buildCategoriesObject = ({ eventCategories = [] }) =>\n    eventCategories.reduce((acc, category) => {\n      const categoryName = category.eventCategory;\n\n      const categoryTypesObject = category.objectTypes.reduce((categoryTypes, type) =>\n        Object.assign(categoryTypes, { [type.objectType]: type.eventActions })\n        , {});\n\n      return Object.assign(acc, { [categoryName]: categoryTypesObject });\n    }, {});\n\n  /**\n   * @name AuditFiltersService\n   * @type {Object}\n   */\n  return {\n    /**\n     *\n     * @name AuditFiltersService#buildCategoriesObject\n     * @param {module:data-bb-audit-query-http-ng.AuditEventCategoryResponse} data\n     *   The raw data response of event categories\n     * @type {function}\n     * @return {ParsedEventCategories}\n     *\n     * @description Return a built up JS object of categories for easier traversing\n     *   to display correct values in the filters\n     */\n    buildCategoriesObject,\n\n    /**\n     *\n     * @name AuditFiltersService#getCategoryNames\n     * @param {ParsedEventCategories} data the parse response data\n     * @type {function}\n     * @return {Array<string>}\n     *\n     * @description Return an array of category names\n     */\n    getCategoryNames: (data) => Object.keys(data),\n\n    /**\n     *\n     * @name AuditFiltersService#getTypeNames\n     * @param {ParsedEventCategories} data the parse response data\n     * @param {string} categoryName the name of the category to filter on\n     * @type {function}\n     * @return {Array<string>}\n     *\n     * @description Return an array of type names for a category\n     */\n    getTypeNames: (data, categoryName) => (data[categoryName]\n      ? Object.keys(data[categoryName])\n      : []),\n\n    /**\n     *\n     * @name AuditFiltersService#getStatusNames\n     * @param {ParsedEventCategories} data the parse response data\n     * @param {string} categoryName the name of the category to filter on\n     * @param {string} eventTypeName the name of the event type to filter on\n     * @type {function}\n     * @return {Array<string>}\n     *\n     * @description Return an array of statuses for a category type combination\n     */\n    getStatusNames: (data, categoryName, eventTypeName) => (data[categoryName]\n      ? data[categoryName][eventTypeName]\n      : []),\n    /**\n     *\n     * @name AuditFiltersService#queryForAuditLogEventCategories\n     * @type {function}\n     * @return {Promise<void>}\n     *\n     * @description Update the view with a list of event categories\n     */\n    queryForAuditLogEventCategories: () => {\n      list.beforeGetCategories();\n      return model.getAuditLogEventCategories()\n        .then(({ data }) => {\n          list.afterGetCategoriesSuccess({\n            eventCategories: buildCategoriesObject(data),\n          });\n        })\n        .catch(list.afterGetCategoriesError);\n    },\n  };\n}\n\n/**\n * Parsed event categories transformed from the original raw data\n * the object returned is a structured easy to read json set\n * @typedef {Object} ParsedEventCategories\n * @property {object} [category] category object\n * @property {object} [category.type] category types\n * @property {Array<string>} [category.type.status] category type statuses\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/audit-filters-service.js","import list from './list';\nimport createInitialState from './initial-state';\n\n/**\n * @constructor ViewModel\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {Hooks} hooks\n */\nexport default function ViewModel(stateContainer, hooks) {\n  return {\n    /**\n     * @name ViewModel#init\n     * @type {function}\n     * @description setup initial state\n     */\n    init: stateContainer.createAction((current = createInitialState()) => hooks.setState(current)),\n\n    /**\n     * @name ViewModel#list\n     * @type {List}\n     * @description expose list viewmodel\n     */\n    list: list(stateContainer, hooks),\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/view-model/index.js","import { uiError } from './helpers';\n\n/**\n *\n * @constructor List\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {Hooks} hooks\n */\nexport default function List(stateContainer, hooks) {\n  /**\n   * @name List\n   * @type {Object}\n   */\n  return {\n    /**\n     * @name List#beforeQueryForAuditLogMessages\n     * @type {function}\n     * @description Amend the view to inform the user the query is being loaded\n     * @param {Number} currentPage - the current (bootstrap) page - index starts at 1\n     * @return {ViewState} The new state of the view model\n     */\n    beforeQueryForAuditLogMessages: stateContainer.createAction((current, currentPage) =>\n      hooks.beforeQueryForAuditLogMessages({\n        ...current,\n        currentPage,\n        isLoading: true,\n      })),\n\n    /**\n     * @name List#afterQueryForAuditLogMessagesSuccess\n     * @type {function}\n     * @description Amend the view to display the list of items\n     * @param {object} obj\n     * @param {Array<module:model-bb-audit-query-ng.AuditMessage>} obj.auditMessages\n     * @param {number} obj.totalCount\n     * @return {ViewState} The new state of the view model\n     */\n    afterQueryForAuditLogMessagesSuccess: stateContainer.createAction(\n      (current, { auditMessages, totalCount }) =>\n        hooks.afterQueryForAuditLogMessagesSuccess({\n          ...current,\n          auditMessages: auditMessages.map(hooks.transformAuditMessage),\n          isLoading: false,\n          totalCount,\n        })),\n\n    /**\n     * @name List#afterQueryForAuditLogMessagesError\n     * @type {function}\n     * @description Amend the view to display the error encountered when loading the list\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterQueryForAuditLogMessagesError: stateContainer.createAction((current, error) => ({\n      ...current,\n      error: uiError(error),\n      isLoading: false,\n    })),\n\n    /**\n     * @name List#beforeQueryForCSV\n     * @type {function}\n     * @description Amend the view to inform the user the query is being loaded\n     * @return {ViewState} The new state of the view model\n     */\n    beforeQueryForCSV: stateContainer.createAction((current) =>\n      hooks.beforeQueryForCSV({\n        ...current,\n        csvIsLoading: true,\n      })),\n\n    /**\n     * @name List#afterQueryForCSVSuccess\n     * @type {function}\n     * @description Amend the view to state after CSV query was successfull\n     * @return {ViewState} The new state of the view model\n     */\n    afterQueryForCSVSuccess: stateContainer.createAction((current) =>\n      hooks.afterQueryForCSVSuccess({\n        ...current,\n        csvIsLoading: false,\n      })),\n\n    /**\n     * @name List#afterQueryForCSVError\n     * @type {function}\n     * @description Amend the view to state after CSV query was unsuccessfull\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterQueryForCSVError: stateContainer.createAction((current, error) => ({\n      ...current,\n      csvIsLoading: false,\n      error: uiError(error),\n    })),\n\n    /**\n     * @name List#newQuery\n     * @type {function}\n     * @description Update the view to show the query page\n     * @param {boolean} clear Clear the existing query criteria\n     * @return {ViewState} The new state of the view model\n     */\n    newQuery: stateContainer.createAction((current, clear) =>\n      hooks.newQuery({\n        ...current,\n        auditMessages: null,\n      }, clear)),\n\n    /**\n     * @name List#beforeGetCategories\n     * @type {function}\n     * @description Amend the view to display the event categories filters\n     * @return {ViewState} The new state of the view model\n     */\n    beforeGetCategories: stateContainer.createAction((current) =>\n      hooks.beforeGetCategories({\n        ...current,\n        eventCategoriesLoading: true,\n      })),\n\n    /**\n     * @name List#afterGetCategoriesSuccess\n     * @type {function}\n     * @description Amend the view to display the filters\n     * @param {object} obj\n     * @param {Array<module:model-bb-audit-query-ng.AuditMessage>} obj.eventCategories\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetCategoriesSuccess: stateContainer.createAction(\n      (current, { eventCategories }) =>\n        hooks.afterGetCategoriesSuccess({\n          ...current,\n          eventCategories,\n          eventCategoriesLoading: false,\n        })),\n\n    /**\n     * @name List#afterGetCategoriesError\n     * @type {function}\n     * @description Amend the view to display the error encountered when loading the categories\n     * @param {module:lib-bb-model-errors.ModelError} error\n     * @return {ViewState} The new state of the view model\n     */\n    afterGetCategoriesError: stateContainer.createAction((current, error) => ({\n      ...current,\n      error: uiError(error),\n      eventCategoriesLoading: false,\n    })),\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/view-model/list.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\n/**\n * @description Translation keys for error messages\n * @name errorMessages\n * @type {object}\n */\nexport const errorMessages = {\n  [E_AUTH]: 'audit.model.error.auth',\n  [E_CONNECTIVITY]: 'audit.model.error.connectivity',\n  [E_USER]: 'audit.model.error.user',\n  [E_UNEXPECTED]: 'audit.model.error.unexpected',\n};\n\n/**\n * @description Creates an error object for template\n * @name uiError\n * @param {module:lib-bb-model-errors.ModelError} modelError Error object\n * @type {function}\n * @returns {{message: string}}\n */\nexport const uiError = modelError => ({\n  message: modelError && modelError.code ? errorMessages[modelError.code] : '',\n});\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/view-model/helpers.js","import { pagerDefaults, csvExportDefaults } from './../constants';\n\n/**\n * @description return initial state object\n * @name createInitialState\n * @type {function}\n * @returns {ViewState}\n */\nexport default function createInitialState() {\n  const { resultsPerPage, maxNavPages } = pagerDefaults;\n  const { csvMaxSize } = csvExportDefaults;\n  return {\n    isLoading: false,\n    isCannedSearch: false,\n    serviceAgreements: null,\n    legalEntities: null,\n    auditMessages: null,\n    csvIsLoading: false,\n    csvMaxSize,\n    currentPage: 1,\n    resultsPerPage,\n    maxNavPages,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/view-model/initial-state.js","import { pagerDefaults, csvExportDefaults } from './constants';\n\n/**\n *\n * @constructor AuditQueryController\n * @param {EventBus} bus\n * @param {Router} router\n * @param {Widget} widget\n * @param {AuditFiltersService} auditFiltersService\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {module:lib-bb-intent-ng.intentProvider} bbIntent\n *\n * @description Controller for the audit query widget\n */\nexport default function AuditQueryController(\n  bus,\n  router,\n  widget,\n  auditFiltersService,\n  stateContainer,\n  bbIntent) {\n  const $ctrl = this;\n\n  /**\n   * @name getWidgetPreferences\n   * @type {function}\n   * @return {Object}\n   *\n   * @description Get a list of preferences for the widget\n   * @inner\n   */\n  const getWidgetPreferences = () => ({\n    serviceAgreements: widget.getStringArrayPreference('serviceAgreements') || [],\n    legalEntities: widget.getStringArrayPreference('legalEntities') || [],\n    resultsPerPage: widget.getLongPreference('resultsPerPage') || pagerDefaults.resultsPerPage,\n    maxNavPages: widget.getLongPreference('maxNavPages') || pagerDefaults.maxNavPages,\n    csvMaxSize: widget.getLongPreference('maxCsvExportQueryResults') || csvExportDefaults.maxSize,\n  });\n\n  const setWidgetPreferences = () => {\n    const {\n      serviceAgreements,\n      legalEntities,\n      csvMaxSize,\n      resultsPerPage,\n      maxNavPages,\n    } = getWidgetPreferences();\n\n    const preferences = {\n      serviceAgreements,\n      legalEntities,\n      csvMaxSize,\n      resultsPerPage,\n      maxNavPages,\n    };\n\n    stateContainer.createAction((current) =>\n      ({\n        ...current,\n        ...preferences,\n      }))(preferences);\n  };\n\n  const goToDefaultState = () => router.goto('form');\n\n  const getControlModel = newCtrlState => (newCtrlState && newCtrlState.value) || null;\n\n  const getControlModelIntoValue = newCtrlState =>\n    (newCtrlState && newCtrlState.value ? { value: newCtrlState.value } : null);\n\n  const getDisabled = newCtrlState => !!(newCtrlState && newCtrlState.disabled);\n\n  const getControlState = newCtrlState => ({\n    model: getControlModel(newCtrlState),\n    disabled: getDisabled(newCtrlState),\n  });\n\n  const getControlStateIntoValue = newCtrlState => ({\n    model: getControlModelIntoValue(newCtrlState),\n    disabled: getDisabled(newCtrlState),\n  });\n\n  const setState = (intentState) => ({\n    startDatepicker: getControlState(intentState.startDate),\n    endDatepicker: getControlState(intentState.endDate),\n    dropdownCategory: getControlStateIntoValue(intentState.eventCategories),\n    dropdownType: getControlStateIntoValue(intentState.objectType),\n    dropdownStatus: getControlStateIntoValue(intentState.eventAction),\n    user: getControlState(intentState.usernames),\n    dropdownUsers: getControlStateIntoValue(intentState.usernames),\n    dropdownServiceAgreement: getControlStateIntoValue(intentState.serviceAgreementId),\n    dropdownLegalEntity: getControlStateIntoValue(intentState.legalEntityIds),\n  });\n\n  /**\n   *\n   * @name AuditQueryController#$searchIntentHandler\n   * @description handler for 'intent.bus.audit.table.search'\n   * - map newParams into state and trigger search\n   * @type {function}\n   * @param {object} newParms\n   * @returns {void}\n   */\n  const searchIntentHandler = (newParms) => {\n    const mappedState = setState(newParms);\n\n    stateContainer.createAction((current, newState) => ({\n      ...current,\n      controlState: {\n        ...current.controlState,\n        startDatepicker: {\n          ...current.controlState.startDatepicker,\n          ...newState.startDatepicker,\n        },\n        endDatepicker: {\n          ...current.controlState.endDatepicker,\n          ...newState.endDatepicker,\n        },\n        user: {\n          ...current.controlState.user,\n          ...newState.user,\n        },\n        dropdownServiceAgreement: {\n          ...current.controlState.dropdownServiceAgreement,\n          ...newState.dropdownServiceAgreement,\n        },\n        dropdownLegalEntity: {\n          ...current.controlState.dropdownLegalEntity,\n          ...newState.dropdownLegalEntity,\n        },\n        dropdownUsers: {\n          ...current.controlState.dropdownUsers,\n          ...newState.dropdownUsers,\n        },\n        dropdownCategory: {\n          ...current.controlState.dropdownCategory,\n          ...newState.dropdownCategory,\n        },\n        dropdownType: {\n          ...current.controlState.dropdownType,\n          ...newState.dropdownType,\n        },\n        dropdownStatus: {\n          ...current.controlState.dropdownStatus,\n          ...newState.dropdownStatus,\n        },\n      },\n      isCannedSearch: true,\n    }))(mappedState);\n\n    router.goto('table');\n  };\n\n  /**\n   *\n   * @name AuditQueryController#$onInit\n   * @type {function}\n   * @returns {void}\n   *\n   * @description AngularJS Lifecycle hook used to initialize the controller\n   */\n  const $onInit = () => {\n    setWidgetPreferences();\n    auditFiltersService.queryForAuditLogEventCategories();\n\n    // Deprecated in Mobile SDK 3.0\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bus.publish('bb.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bbIntent.handle('intent.bus.audit.table.search', searchIntentHandler);\n\n    // if no intent is found then this will be called\n    bbIntent.initHandler(goToDefaultState);\n\n    bbIntent.init();\n  };\n\n  /**\n   * @name AuditQueryController\n   * @type {Object}\n   */\n  Object.assign($ctrl, {\n    $onInit,\n    searchIntentHandler,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/audit-query.controller.js","/**\n *\n * @constructor FormController\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {Router} router\n *\n * @description Controller used to isolate form state from view state. Clones view state\n * in order to mutate it\n */\nexport default function FormController(stateContainer, router, { list }) {\n  const $ctrl = this;\n\n  /**\n   * @name FormController#controlState\n   * @type {object}\n   *\n   * @description Local copy of the control state\n   */\n  const cloneState = ({ controlState }) => {\n    const {\n      startDatepicker,\n      endDatepicker,\n      user,\n      dropdownServiceAgreement,\n      dropdownLegalEntity,\n      dropdownUsers,\n      dropdownCategory,\n      dropdownType,\n      dropdownStatus,\n      currentPage,\n    } = controlState;\n\n    const newState = {\n      startDatepicker,\n      endDatepicker,\n      user,\n      dropdownServiceAgreement,\n      dropdownLegalEntity,\n      dropdownUsers,\n      dropdownCategory,\n      dropdownType,\n      dropdownStatus,\n      currentPage,\n    };\n    Object.assign($ctrl, newState);\n  };\n\n  /**\n   *\n   * @name FormController#$onInit\n   * @type {function}\n   * @returns {void}\n   *\n   * @description AngularJS Lifecycle hook used to initialize the controller\n   */\n  const $onInit = () => {\n    const { clear } = router.getParams();\n    list.newQuery(clear);\n    cloneState(stateContainer.getState());\n  };\n\n  /**\n   *\n   * @name FormController#submitQuery\n   * @type {function}\n   * @returns {void}\n   *\n   * @description Update the state with control values and route to results table\n   */\n  const submitQuery = () => {\n    stateContainer.createAction((current) => ({\n      ...current,\n      controlState: {\n        ...current.controlState,\n        ...$ctrl,\n      },\n    }))();\n    router.goto('table');\n  };\n\n  /**\n   * @name FormController\n   * @type {Object}\n   */\n  Object.assign($ctrl, {\n    $onInit,\n    submitQuery,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/form.controller.js","/**\n *\n * @constructor TableController\n * @param {module:lib-bb-state-container-ng.StateContainer} stateContainer\n * @param {Router} router\n * @param {AuditQueryService} auditQueryService\n *\n * @description Table view controller\n */\nexport default function TableController(stateContainer, router, auditQueryService) {\n  const $ctrl = this;\n\n  /**\n   *\n   * @name TableController#$onInit\n   * @type {function}\n   * @returns {void}\n   *\n   * @description AngularJS Lifecycle hook used to initialize the controller\n   */\n  const $onInit = () => {\n    auditQueryService.queryForAuditLogMessages(stateContainer.getState());\n  };\n\n  /**\n    * @name TableController#editExistingQuery\n    * @type {function}\n    * @description return to query view form with previous settings\n    */\n  const editExistingQuery = () => {\n    router.goto('form', { clear: false });\n  };\n  /**\n   * @name TableController#newQuery\n   * @type {function}\n   * @description return to query view form with settings cleared\n   */\n  const newQuery = () => {\n    router.goto('form', { clear: true });\n  };\n\n  /**\n   * @name TableController#submitQuery\n   * @type {function}\n   * @param state\n   * @param {Object} pagerParams The bootstrap params\n   * @param {number} pagerParams.currentPage Seelcted page number\n   *\n   * @description Submit query for getting current page\n   */\n  const submitQuery = (state, { currentPage }) => {\n    stateContainer.createAction((current) => ({\n      ...current,\n      controlState: {\n        ...current.controlState,\n        currentPage,\n      },\n    }))();\n    auditQueryService.queryForAuditLogMessages(state, currentPage);\n  };\n\n  /**\n   * @name TableController\n   * @type {Object}\n   */\n  Object.assign($ctrl, {\n    $onInit,\n    editExistingQuery,\n    newQuery,\n    submitQuery,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/table.controller.js","// standard boilerplate router\nexport default (stateContainer) => {\n  let subscribers = [];\n\n  const setRoute = stateContainer.createAction((state, { name, params }) => ({\n    ...state,\n    route: {\n      name,\n      params,\n    },\n  }));\n\n  const notifySubscribers = (name, params) => {\n    subscribers.forEach(subscriber => {\n      subscriber(name, params);\n    });\n  };\n\n  return {\n    goto: (name, params = {}) => {\n      setRoute({ name, params });\n      notifySubscribers(name, params);\n    },\n\n    getParams: stateContainer.createSelector(state => state.route.params),\n    getRoute: stateContainer.createSelector(state => state.route.name),\n\n    subscribe: (callback) => {\n      subscribers = [...subscribers, callback];\n      return () => {\n        subscribers = subscribers.filter(sub => sub !== callback);\n      };\n    },\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/router.js","const identity = a => a;\n\n/**\n * @typedef {Object} AuditMessage\n * @extends module:data-bb-audit-query-http-ng.AuditMessage\n */\n\n/**\n * @name Hooks\n * @type {object}\n * @extends module:lib-bb-widget-extension-ng.Hooks\n */\nexport default {\n  /**\n   * @name Hooks#transformAuditMessage\n   * @type {function}\n   * @description Perform any transformations required to prepare the AuditMessage item for display\n   * @param {module:model-bb-audit-query-ng.AuditMessage} auditMessage\n   * @return {Object} transformed AuditMessage\n   */\n  transformAuditMessage: identity,\n\n  /**\n   * @name Hooks#beforeQueryForAuditLogMessages\n   * @type {function}\n   * @description Amend the view before loading the list of Audit Log Messages\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeQueryForAuditLogMessages: identity,\n\n  /**\n   * @name Hooks#afterQueryForAuditLogMessagesSuccess\n   * @type {function}\n   * @description Amend the view after loading the list of Audit Log Message items\n   * @param {ViewState} current The current state of the view model\n   * @param {Array<AuditMessage>} auditMessages\n   * @return {ViewState} The new state of the view model\n   */\n  afterQueryForAuditLogMessagesSuccess: identity,\n\n  /**\n   * @name Hooks#beforeQueryForCSV\n   * @type {function}\n   * @description Amend the view before downloading the CSV file\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeQueryForCSV: identity,\n\n  /**\n   * @name Hooks#afterQueryForCSVSuccess\n   * @type {function}\n   * @description Amend the view after downloading the CSV file\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterQueryForCSVSuccess: identity,\n\n  /**\n   * @name Hooks#beforeGetCategories\n   * @type {function}\n   * @description Amend the view before getting the categories list\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  beforeGetCategories: identity,\n\n  /**\n   * @name Hooks#afterGetCategoriesSuccess\n   * @type {function}\n   * @description Amend the view after getting the categories successfully\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  afterGetCategoriesSuccess: identity,\n\n  /**\n   * @name Hooks#setState\n   * @type {function}\n   * @description add any state required by extension\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  setState: identity,\n\n  /**\n   * @name Hooks#newQuery\n   * @type {function}\n   * @description Amend the view before showing a new query\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  newQuery: identity,\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-audit-query-ng/scripts/default-hooks.js"],"sourceRoot":""}