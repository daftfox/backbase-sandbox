{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///webpack/bootstrap 01348824f603eeb6378e?e65a***","webpack:///./model-bb-messages-ng/model.xml","webpack:///./model-bb-messages-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"data-bb-message-center-http-ng\"","webpack:///./model-bb-messages-ng/scripts/messages.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-messages-ng/scripts/constants.js"],"names":["moduleKey","modelMessagesKey","module","factory","name","Model","encodeInBase64","text","window","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","messagingData","Promise","$timeout","getTopics","getMessageCenterTopics","then","res","data","catch","e","loadConversations","params","getMessageCenterConversations","conversations","map","Object","assign","otherUserName","conversation","otherUser","status","INBOX","totalCount","parseInt","headers","loadArchivedConversations","ARCHIVED","loadSentConversations","SENT","loadMessages","conversationId","getMessageCenterConversationsMessages","message","senderName","sender","getUnreadMessagesCount","getMessageCenterUnreadConversationCount","unreadMessagesCount","unreadCount","removeConversation","deleteMessageCenterConversationsRecord","loadDrafts","getUsersDrafts","createDraft","pDraft","encodedBody","body","draft","postMessageCenterDraftsRecord","sendDraftWithRetry","draftId","messageBody","attempt","postMessageCenterDraftsSendDraftRequestRecord","error","sendDraft","createReplyDraft","postMessageCenterConversationsDraftsRecord","updateReplyDraft","putMessageCenterConversationsDraftsRecord","id","sortDraftsByUpdatedDateDescending","draftA","draftB","dateA","Date","updatedDate","dateB","getTime","getLatestConversationDraft","getMessageCenterConversationsDrafts","length","sort","saveConversationDraft","markMessageAsRead","messageId","postMessageCenterConversationsMessagesReadMessageRequestRecord","markUnreadMessagesAsRead","messages","markAsReadRequests","filter","DELIVERED","unreadMessage","all","MessageState","READ","ConversationState"],"mappings":"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","file":"model-bb-messages-ng/scripts/model-bb-messages-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"data-bb-message-center-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-messages-ng\", [\"vendor-bb-angular\", \"data-bb-message-center-http-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-messages-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"data-bb-message-center-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-messages-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"data-bb-message-center-http-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_31__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 01348824f603eeb6378e","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-messages-ng/model.xml\n// module id = 0\n// module chunks = 4","import angular from 'vendor-bb-angular';\n\nimport messageCenterDataModuleKey, {\n  messageCenterDataKey,\n} from 'data-bb-message-center-http-ng';\n\nimport messagingModelKey from './messages';\n\nexport const moduleKey = 'model-bb-messages-ng';\nexport const modelMessagesKey = 'model-bb-messages-ng:model';\n\nexport default angular\n  .module('model-bb-messages-ng', [\n    messageCenterDataModuleKey,\n  ])\n  .factory(modelMessagesKey, [\n    messageCenterDataKey,\n    '$q',\n    '$timeout',\n    /* into */\n    messagingModelKey,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-messages-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 28\n// module chunks = 4 5 6 7 8 9","module.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-message-center-http-ng\"\n// module id = 29\n// module chunks = 4","/* global window */\nimport { fromHttpError } from 'lib-bb-model-errors';\nimport { MessageState, ConversationState } from './constants';\n\n/**\n * @name encodeInBase64\n * @description Encodes text to Base64 format\n * @param {String} text text to encode\n * @returns {String} base64 encoded text\n * @type {function}\n * @private\n */\nconst encodeInBase64 = (text) => {\n  if (!text) {\n    return text;\n  }\n\n  return window.btoa(encodeURIComponent(text).replace(/%([0-9A-F]{2})/g,\n    (match, p1) => String.fromCharCode(`0x${p1}`)));\n};\n\n/**\n * @name MessagingModel\n * @description Model for widget-bb-messages-ng\n * @param {MessagingData} messagingData A Data module to allow access to messaging data.\n * @type {function}\n * @return {MessagingModel}\n * @inner\n */\nexport default function Model(messagingData, Promise, $timeout) {\n  /**\n   * @name MessagingModel#getTopics\n   * @description Fetches available topics\n   * @type {function}\n   * @returns {Promise.<Array>} A Promise with a list of topics\n   *                            [{id: 'id123', code: 'ln', name: 'Loans'}]\n   */\n  const getTopics = () =>\n    messagingData.getMessageCenterTopics()\n      .then(res => res.data)\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n\n  /**\n   * @name MessagingModel#loadConversations\n   * @description Loads users conversation threads\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of conversations in the following format:\n   *                             {conversations: [], totalCount: 0}\n   */\n  const loadConversations = (params = {}) =>\n    messagingData.getMessageCenterConversations(params)\n      .then(res => ({\n        conversations: res.data.map(conversation => Object.assign({\n          otherUserName: conversation.otherUser,\n          status: params.status || ConversationState.INBOX,\n        }, conversation)),\n        totalCount: parseInt(res.headers('x-total-count'), 10) || 0,\n      }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n\n  /**\n   * @name MessagingModel#loadArchivedConversations\n   * @description Loads archived users conversation threads\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of conversations in the following format:\n   *                             {conversations: [], totalCount: 0}\n   */\n  const loadArchivedConversations = (params = {}) =>\n    loadConversations(Object.assign({ status: ConversationState.ARCHIVED }, params));\n\n  /**\n   * @name MessagingModel#loadSentConversations\n   * @description Loads sent users conversation threads\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of conversations in the following format:\n   *                             {conversations: [], totalCount: 0}\n   */\n  const loadSentConversations = (params = {}) =>\n    loadConversations(Object.assign({ status: ConversationState.SENT }, params));\n\n  /**\n   * @name MessagingModel#loadMessages\n   * @description Loads messages of a given conversation\n   * @param {string} conversationId conversation identifier\n   * @type {function}\n   * @returns {Promise} An array of messages\n   */\n  const loadMessages = (conversationId) =>\n    messagingData.getMessageCenterConversationsMessages(conversationId, {})\n      .then(res =>\n        res.data.map((message) => Object.assign({ senderName: message.sender }, message)));\n\n  /**\n   * @name MessagingModel#getUnreadMessagesCount\n   * @description Gets user's unread messages count\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<{unreadMessagesCount: number}>}\n   *          a promise holding user's unread messages count\n   */\n  const getUnreadMessagesCount = (params = {}) =>\n    messagingData.getMessageCenterUnreadConversationCount(params)\n      .then(res => ({ unreadMessagesCount: res.data.unreadCount }));\n\n  /**\n   * @name MessagingModel#removeConversations\n   * @description Removes given conversation\n   * @param {string} conversationId Conversation Id to be removed\n   * @type {function}\n   * @returns {Promise.<Object>} An array of conversations\n   */\n  const removeConversation = (conversationId) =>\n    messagingData.deleteMessageCenterConversationsRecord(conversationId, {});\n\n  /**\n   * @name MessagingModel#loadDrafts\n   * @description Loads users drafts\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of draft items: {\"drafts\": []}\n   */\n  const loadDrafts = (params = {}) => messagingData.getUsersDrafts(params).then(res => res.data);\n\n  /**\n   * @name MessagingModel#createDraft\n   * @description Saves draft\n   * @param {any} pDraft Draft to save\n   * @type {function}\n   * @returns {Promise.<{id: string}>} a promise holding created draft ID\n   */\n  const createDraft = (pDraft) => {\n    const encodedBody = encodeInBase64(pDraft.body);\n    const draft = Object.assign({}, pDraft, { body: encodedBody });\n\n    return messagingData.postMessageCenterDraftsRecord(draft).then(res => res.data);\n  };\n\n  /**\n   * @name MessagingModel#sendDraftWithRetry\n   * @type {function}\n   * @description Sends draft, if it fails, it will retry sending for 3 times\n   * @param {string} draftId draft ID which will be sent\n   * @param {string} messageBody updated message body which will be applied to draft before sending\n   * @returns {Promise} a promise which is resolved when draft is successfully sent\n   */\n  const sendDraftWithRetry = (draftId, messageBody, attempt = 1) => {\n    const encodedBody = encodeInBase64(messageBody);\n\n    return messagingData\n      .postMessageCenterDraftsSendDraftRequestRecord(draftId, { body: encodedBody })\n      .catch((error) => {\n        if (error.status === 404 && attempt < 3) {\n          return $timeout(() => sendDraftWithRetry(draftId, encodedBody, attempt + 1), 1000);\n        }\n        throw error;\n      });\n  };\n\n  /**\n   * @name MessagingModel#sendDraft\n   * @description Sends given draft.\n   * @param {string} draftId Draft ID to be sent\n   * @param {string} messageBody with which message will be sent\n   * @type {function}\n   * @returns {Promise} an empty promise\n   */\n  const sendDraft = (draftId, messageBody) => sendDraftWithRetry(draftId, messageBody);\n\n  /**\n   * @name MessagingModel#createReplyDraft\n   * @description Creates a draft for replying to a conversation\n   * @param {string} conversationId the conversation ID for which reply draft will be created\n   * @param {object} draft object with \"body\" property in it\n   * @type {function}\n   * @returns {Promise.<{id: string}>} a promise holding created draft ID\n   */\n  const createReplyDraft = (conversationId, draft) => {\n    const encodedBody = encodeInBase64(draft.body);\n\n    return messagingData\n      .postMessageCenterConversationsDraftsRecord(\n        conversationId,\n        Object.assign({}, draft, { body: encodedBody })\n      )\n      .then(res => res.data);\n  };\n\n  /**\n   * @name MessagingModel#updateReplyDraft\n   * @description Updates the response draft\n   * @param {string} conversationId the conversation ID for which response draft will be updated\n   * @param {object} draft object to be updated\n   * @type {function}\n   * @returns {Promise} an empty promise\n   */\n  const updateReplyDraft = (conversationId, draft) => {\n    const encodedBody = encodeInBase64(draft.body);\n\n    return messagingData\n      .putMessageCenterConversationsDraftsRecord(\n        conversationId,\n        draft.id,\n        Object.assign({}, draft, { body: encodedBody })\n      )\n      .then(res => res.data);\n  };\n\n  /**\n   * @name MessagingModel#sortDraftsByUpdatedDateDescending\n   * @type {function}\n   * @description Function designed to be used as a comparator\n   * to determine if draftA is after draftB\n   * @param {object} draftA object with \"updatedDate\" property in it\n   * @param {object} draftB object with \"updatedDate\" property in it\n   * @returns {number} time difference between draftB and draftA\n   * @private\n   * */\n  const sortDraftsByUpdatedDateDescending = (draftA, draftB) => {\n    const dateA = new Date(draftA.updatedDate);\n    const dateB = new Date(draftB.updatedDate);\n\n    return dateB.getTime() - dateA.getTime();\n  };\n\n  /**\n   * @name MessagingModel#getLatestConversationDraft\n   * @description Gets latest (i.e. last updated) draft belonging to the specified conversation\n   * @param {string} conversationId the conversation ID for which draft will be fetched\n   * @type {function}\n   * @returns {Promise.<Object>} a promise containing latest conversation\n   */\n  const getLatestConversationDraft = (conversationId) =>\n    messagingData.getMessageCenterConversationsDrafts(conversationId)\n      .then(res =>\n        (res.data && res.data.length ? res.data.sort(sortDraftsByUpdatedDateDescending)[0] : {}));\n\n  /**\n   * @name MessagingModel#saveConversationDraft\n   * @description Saves (creates or updates) conversation draft.\n   * @param {string} conversationId the conversation ID for which draft will be saved\n   * @param {object} draft draft to be saved.\n   * @type {function}\n   * @returns {Promise} promise object. If draft has been updated, then the Promise will be empty.\n   * If draft was created, then the promise will hold object with an ID of created draft.\n   */\n  const saveConversationDraft = (conversationId, draft) =>\n    (draft.id ? updateReplyDraft(conversationId, draft) : createReplyDraft(conversationId, draft));\n\n  const markMessageAsRead = (conversationId, messageId) =>\n    messagingData.postMessageCenterConversationsMessagesReadMessageRequestRecord(\n      conversationId,\n      messageId\n    );\n\n  /**\n   * @name MessagingModel#markUnreadMessagesAsRead\n   * @description Marks messages whose recipient is current user as read.\n   * @param {object} conversation conversation object for which messages need to be marked as read\n   * @param {array} messages array of messages. The array will be filtered and only messages whose\n   * recipient is current user will be marked as read.\n   * @type {function}\n   * @returns {Promise} promise object, which is resolved once all the\n   * passed messages are marked as read.\n   */\n  const markUnreadMessagesAsRead = (conversation, messages) => {\n    const markAsReadRequests = (messages || [])\n      .filter((message =>\n        message.status === MessageState.DELIVERED && message.sender === conversation.otherUser))\n      .map(unreadMessage => markMessageAsRead(conversation.id, unreadMessage.id));\n\n    return Promise.all(markAsReadRequests);\n  };\n\n  /**\n   * @name MessagingModel\n   * @type {object}\n   *\n   * @description\n   * Model factory for widget-bb-messages-ng\n   */\n  return {\n    getTopics,\n\n    // Conversations\n    loadConversations,\n    loadArchivedConversations,\n    loadSentConversations,\n\n    loadMessages,\n    getUnreadMessagesCount,\n    removeConversation,\n    getLatestConversationDraft,\n    saveConversationDraft,\n    markUnreadMessagesAsRead,\n\n    // Drafts\n    loadDrafts,\n    createDraft,\n    sendDraft,\n\n    // Response drafts\n    createReplyDraft,\n    updateReplyDraft,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-messages-ng/scripts/messages.js","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 31\n// module chunks = 4 9","/**\n * @description\n * Message states\n *\n * @name MessageState\n * @type {object}\n */\nexport const MessageState = {\n  DELIVERED: 'DELIVERED',\n  READ: 'READ',\n};\n\n/**\n * @description\n * Message states\n *\n * @name MessageState\n * @type {object}\n */\nexport const ConversationState = {\n  ARCHIVED: 'archived',\n  SENT: 'sent',\n  INBOX: 'inbox',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-messages-ng/scripts/constants.js"],"sourceRoot":""}