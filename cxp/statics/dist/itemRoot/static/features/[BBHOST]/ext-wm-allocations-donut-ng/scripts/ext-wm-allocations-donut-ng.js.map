{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap d0309a746b17cd403690?c295*","webpack:///./ext-wm-allocations-donut-ng/model.xml","webpack:///external \"ui-bb-loading-indicator-ng\"?8f10*","webpack:///external \"ui-bb-i18n-ng\"?dc01*","webpack:///external \"ui-bb-empty-state-ng\"?88ee*","webpack:///external \"ui-bb-format-amount-ng\"?8f72*","webpack:///external \"lib-bb-model-errors\"?7567*","webpack:///external \"lib-wm-colorset\"?5f86","webpack:///./ext-wm-allocations-donut-ng/scripts/index.js","webpack:///external \"ui-bb-chartjs-chart-donut-ng\"","webpack:///./ext-wm-allocations-donut-ng/scripts/helpers.js","webpack:///./ext-wm-allocations-donut-ng/scripts/constants.js","webpack:///external \"lib-bb-styles\""],"names":["helpers","extHelpers","dependencyKeys","uiBbLoadingIndicatorKey","uiBbChartjsChartDonutKey","i18nKey","uiBbEmptyStateKey","uiBbFormatAmountKey","errors","E_AUTH","message","title","icon","E_CONNECTIVITY","E_USER","E_UNEXPECTED","stateContainer","$filter","getRule","numberFilter","getSymbol","code","rule","symbol","isAllocationsAvailable","createSelector","state","allocations","data","length","allocationsComparator","item1","item2","allocationPct","getSortedAllocations","slice","sort","getAllocations","getColors","getChartDataSeries","filter","allocation","labels","map","name","backgroundColor","_","index","datasets","borderColor","BORDER_COLOR","hoverBorderColor","isClass","route","currentAnimatedSector","chartInstance","$scope","getDataset","config","getSectorsArray","meta","sectorsArray","Object","keys","isSectorSelected","colorSector","color","SECTOR_INACTIVE_COLOR","colorSectors","assign","unselectSector","outerRadius","countNewRadius","sectorWidth","CUTOUT_PERCENTAGE","CHART_EXPANSION","selectSector","sector","render","CHART_ANIMATION_DURATION","tryToExpandSector","onSectorChange","angular","noop","update","onDonutChartSectorHoverAnimation","event","activeSector","getElementsAtEvent","$apply","chartOptions","layout","padding","left","CHART_SECTOR_SHIFT_SIZE","right","top","bottom","tooltips","enabled","hover","mode","onHover","cutoutPercentage","onMouseLegendEnter","onMouseLegendLeave","chartPlugins","afterInit","chart","registerScope","scope","showSign","absNumber","Math","abs","number","toFixed","PRECISION","sign","localizedNumber","getSelectedItem","getState","createSectionClickHandler","item","viewAssetsInPositions","_index","onDetailsClick","formatAmount","value","decimalsLength","toString","split","fractionSize","getError","getColorClassByIndex"],"mappings":"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","file":"ext-wm-allocations-donut-ng/scripts/ext-wm-allocations-donut-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ui-bb-loading-indicator-ng\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-empty-state-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-wm-colorset\"), require(\"ui-bb-chartjs-chart-donut-ng\"), require(\"lib-bb-styles\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-wm-allocations-donut-ng\", [\"ui-bb-loading-indicator-ng\", \"ui-bb-i18n-ng\", \"ui-bb-empty-state-ng\", \"ui-bb-format-amount-ng\", \"lib-bb-model-errors\", \"lib-wm-colorset\", \"ui-bb-chartjs-chart-donut-ng\", \"lib-bb-styles\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-wm-allocations-donut-ng\"] = factory(require(\"ui-bb-loading-indicator-ng\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-empty-state-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-wm-colorset\"), require(\"ui-bb-chartjs-chart-donut-ng\"), require(\"lib-bb-styles\"));\n\telse\n\t\troot[\"ext-wm-allocations-donut-ng\"] = factory(root[\"ui-bb-loading-indicator-ng\"], root[\"ui-bb-i18n-ng\"], root[\"ui-bb-empty-state-ng\"], root[\"ui-bb-format-amount-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-wm-colorset\"], root[\"ui-bb-chartjs-chart-donut-ng\"], root[\"lib-bb-styles\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0309a746b17cd403690","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-wm-allocations-donut-ng/model.xml\n// module id = 0\n// module chunks = 1","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-indicator-ng\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 3\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-empty-state-ng\"\n// module id = 4\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-format-amount-ng\"\n// module id = 6\n// module chunks = 0 1 2 3 5 6 7 8 9 10 11 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 8\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 21","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-wm-colorset\"\n// module id = 9\n// module chunks = 0 1 2 3 7 8","/**\n * @module ext-wm-allocations-donut-ng\n *\n * @description\n * Donut chart extension for allocations widget.\n *\n *\n * @requires ui-bb-chartjs-chart-donut-ng\n * @example\n * <!-- allocations widget model.xml -->\n * <property name=\"extension\" viewHint=\"text-input,admin\">\n *  <value type=\"string\">ext-wm-allocations-donut-ng</value>\n * </property>\n *\n *\n */\n\nimport uiBbLoadingIndicatorKey from 'ui-bb-loading-indicator-ng';\nimport i18nKey from 'ui-bb-i18n-ng';\nimport uiBbEmptyStateKey from 'ui-bb-empty-state-ng';\nimport uiBbFormatAmountKey from 'ui-bb-format-amount-ng';\nimport uiBbChartjsChartDonutKey from 'ui-bb-chartjs-chart-donut-ng';\n\nimport extHelpers from './helpers';\n\nexport const helpers = extHelpers;\n\nexport const dependencyKeys = [\n  uiBbLoadingIndicatorKey,\n  uiBbChartjsChartDonutKey,\n  i18nKey,\n  uiBbEmptyStateKey,\n  uiBbFormatAmountKey,\n];\n\n/**\n * Allocation type definition\n * @typedef {Object} Allocation\n * @property {string}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./ext-wm-allocations-donut-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-chartjs-chart-donut-ng\"\n// module id = 12\n// module chunks = 1 7 8","/* global angular */\nimport { getColorClassByIndex, getColorByIndex, getColorset } from 'lib-wm-colorset';\nimport { E_AUTH, E_CONNECTIVITY, E_UNEXPECTED, E_USER } from 'lib-bb-model-errors';\nimport {\n  CHART_EXPANSION,\n  CHART_SECTOR_SHIFT_SIZE,\n  CUTOUT_PERCENTAGE,\n  BORDER_COLOR,\n  SECTOR_INACTIVE_COLOR,\n  PRECISION,\n  CHART_ANIMATION_DURATION,\n} from './constants';\n\n/**\n * @description\n * Map of error code to message, title and icon to display to user\n *\n * @public\n * @name errors\n * @type {object.<E_AUTH | E_CONNECTIVITY | E_UNEXPECTED | E_USER, errorMessageDescriptor>}\n */\nconst errors = {\n  [E_AUTH]: {\n    message: 'model.error.auth.message',\n    title: 'model.error.auth.title',\n    icon: 'fa-sign-in-alt',\n  },\n  [E_CONNECTIVITY]: {\n    message: 'model.error.connectivity.message',\n    title: 'model.error.connectivity.title',\n    icon: 'fa-exclamation-triangle',\n  },\n  [E_USER]: {\n    message: 'model.error.user.message',\n    title: 'model.error.user.title',\n    icon: 'fa-user',\n  },\n  [E_UNEXPECTED]: {\n    message: 'model.error.unexpected.message',\n    title: 'model.error.unexpected.title',\n    icon: 'fa-server',\n  },\n};\n\nexport default ({ stateContainer, $filter, getRule }) => {\n  const numberFilter = $filter('number');\n  const getSymbol = (code) => {\n    if (!code) { return ''; }\n    const rule = getRule(code);\n    if (!rule) { return ''; }\n    return rule.symbol || code;\n  };\n\n  /**\n   * @description\n   * Checks if allocations' data is available\n   *\n   * @name isAllocationsAvailable\n   * @type {function}\n   * @returns {boolean} returns true if allocations data is present\n   */\n  const isAllocationsAvailable =\n    stateContainer.createSelector(state => state.allocations.data.allocations.length > 0);\n\n  /**\n   * @description\n   * Compares allocations % value\n   *\n   * @name allocationsComparator\n   * @type {function}\n   * @returns {number} return positive or negative number\n   */\n  const allocationsComparator = (item1, item2) => item2.allocationPct - item1.allocationPct;\n\n  /**\n   * @description\n   * Sorts allocations by comparator\n   *\n   * @name getSortedAllocations\n   * @type {function}\n   * @param {array} allocations Array of allocations\n   * @returns {array} Allocations sorted by percentage value\n   */\n  const getSortedAllocations = allocations => allocations.slice().sort(allocationsComparator);\n\n  /**\n   * @description\n   * Gets allocations data and transforms it for spiderweb chart\n   *\n   * @name getAllocations\n   * @type {function}\n   * @returns {array} Allocations' data\n   */\n  const getAllocations = stateContainer.createSelector(state =>\n    getSortedAllocations(state.allocations.data.allocations)\n  );\n\n  /**\n   * @description\n   * Gets colors for chart\n   *\n   * @name getColors\n   * @type {function}\n   * @returns {array} Colors for chart\n   */\n  const getColors = stateContainer.createSelector(state =>\n    getColorset(state.allocations.data.allocations.length)\n  );\n\n  /**\n   * @description\n   * Forms data series for chart\n   *\n   * @name getChartDataSeries\n   * @type {function}\n   * @returns {object} Data series with allocations' data for chart\n   */\n  const getChartDataSeries = stateContainer.createSelector(() => {\n    const allocations = getAllocations().filter(allocation => allocation.allocationPct >= 0);\n\n    const labels = allocations.map(allocation => allocation.name);\n    const data = allocations.map(allocation => allocation.allocationPct);\n    const backgroundColor = allocations.map((_, index) => getColorByIndex(index));\n\n    return {\n      labels,\n      datasets: [{\n        data,\n        backgroundColor,\n        borderColor: BORDER_COLOR,\n        hoverBorderColor: BORDER_COLOR,\n      }],\n    };\n  });\n\n  /**\n   * @description\n   * Checks if asset-classes is selected\n   *\n   * @name isClass\n   * @type {function}\n   * @returns {boolean}\n   */\n  const isClass = stateContainer.createSelector(state => state.route.name === 'asset-classes');\n\n  let currentAnimatedSector = null;\n  let chartInstance = null;\n  let $scope = null;\n\n  /**\n   * @description\n   * Forms dataset for chart\n   *\n   * @name getDatatset\n   * @type {function}\n   * @returns {void}\n   */\n  const getDataset = () => {\n    const { config: { data: { datasets } } } = chartInstance;\n    return datasets[0];\n  };\n\n  /**\n   * @description\n   * Gets array of all sectors for chart\n   *\n   * @name getSectorsArray\n   * @type {function}\n   * @returns {array} Array with sectors for chart\n   */\n  const getSectorsArray = () => {\n    const datasets = getDataset();\n\n    // eslint-disable-next-line quote-props\n    const { '_meta': meta } = datasets;\n    const { data: sectorsArray } = meta[Object.keys(meta)[0]];\n\n    return sectorsArray;\n  };\n\n  /**\n   * @description\n   * Informs whether sector with given index is selected\n   *\n   * @name isSectorSelected\n   * @type {function}\n   * @param {number} index Index of a given sector\n   * @returns {boolean} Flag that informs whether given sector is selected\n   */\n  const isSectorSelected = (index) => (\n    // eslint-disable-next-line dot-notation\n    (!!currentAnimatedSector) && currentAnimatedSector['_index'] === index\n  );\n\n  /**\n   * @description\n   * Selects color or inactive color by given index\n   *\n   * @name colorSector\n   * @type {function}\n   * @param {string} color Sector's active color\n   * @param {number} index Index of sector\n   * @returns {string} Selected color\n   */\n  const colorSector = (color, index) => (\n    (isSectorSelected(index) || !currentAnimatedSector)\n      ? color\n      : SECTOR_INACTIVE_COLOR\n  );\n\n  /**\n   * @description\n   * Adds background colors for chart's datasets\n   *\n   * @name colorSectors\n   * @type {function}\n   * @returns {void}\n   */\n  const colorSectors = () => {\n    Object.assign(getDataset(), { backgroundColor: getColors().map(colorSector) });\n  };\n\n  /**\n   * @description\n   * Changes chart's radius as if it is unselected\n   *\n   * @name unselectSector\n   * @type {function}\n   * @returns {void}\n   */\n  const unselectSector = () => {\n    Object.assign(chartInstance, { outerRadius: chartInstance.outerRadius });\n  };\n\n  /**\n   * @description\n   * Counts new radius for sector\n   *\n   * @name countNewRadius\n   * @type {function}\n   * @param {number} outerRadius Radius for sector\n   * @returns {number} New radius value\n   */\n  const countNewRadius = (outerRadius) => {\n    const sectorWidth = outerRadius - (outerRadius * (CUTOUT_PERCENTAGE / 100));\n    return (outerRadius - sectorWidth) + (sectorWidth * CHART_EXPANSION);\n  };\n\n  /**\n   * @description\n   * Visualizes selection of sector on a chart\n   *\n   * @name selectSector\n   * @type {function}\n   * @param {object} sector Selected sector\n   * @returns {void}\n   */\n  const selectSector = (sector) => {\n    // eslint-disable-next-line dot-notation\n    Object.assign(sector['_model'], {\n      outerRadius: countNewRadius(chartInstance.outerRadius),\n    });\n    chartInstance.render(CHART_ANIMATION_DURATION, false);\n  };\n\n  /**\n   * @description\n   * Animates chart's sector on select\n   *\n   * @name tryToExpandSector\n   * @type {function}\n   * @param {object} sector Chart's selected sector\n   * @param {function} onSectorChange Function, fired when sector is changed\n   * @returns {void}\n   */\n  const tryToExpandSector = (sector, onSectorChange = angular.noop) => {\n    if (sector && sector === currentAnimatedSector) {\n      return;\n    }\n\n    currentAnimatedSector = sector;\n\n    unselectSector();\n    colorSectors();\n    chartInstance.update();\n    onSectorChange();\n\n    if (sector) {\n      selectSector(sector);\n    }\n  };\n\n  /**\n   * @description onClick handler with a visualisation for donut sector\n   *\n   * @name onDonutChartSectorHoverAnimation\n   * @type {function}\n   * @param {*} chartInstance - the Chart.js object\n   * @param {*} event - Chart.js click event object with a clicked area\n   * @returns {object} name and isSelected flag of the active sector (category)\n   */\n  const onDonutChartSectorHoverAnimation = function (event) {\n    const activeSector = chartInstance.getElementsAtEvent(event)[0];\n\n    tryToExpandSector(activeSector, () => $scope.$apply());\n  };\n\n  /**\n   * @description\n   * Object with chart options that need to be overriden\n   *\n   * @name chartOptions\n   * @type {ChartjsSettings}\n   */\n  const chartOptions = {\n    layout: {\n      padding: {\n        left: CHART_SECTOR_SHIFT_SIZE,\n        right: CHART_SECTOR_SHIFT_SIZE,\n        top: CHART_SECTOR_SHIFT_SIZE,\n        bottom: CHART_SECTOR_SHIFT_SIZE,\n      },\n    },\n    tooltips: {\n      enabled: false,\n    },\n    hover: {\n      mode: 'index',\n      onHover: onDonutChartSectorHoverAnimation,\n    },\n    cutoutPercentage: CUTOUT_PERCENTAGE,\n  };\n\n  /**\n   * @description\n   * Event, fired when mouse enters chart's legend area\n   *\n   * @name onMouseLegendEnter\n   * @type {function}\n   * @param {number} index Index of hovered legend item\n   * @returns {void}\n   */\n  const onMouseLegendEnter = (index) => {\n    const sector = getSectorsArray()[index];\n    // eslint-disable-next-line dot-notation\n    tryToExpandSector(sector);\n  };\n\n  /**\n   * @description\n   * Event, fired when mouse leaves chart's legend area\n   *\n   * @name onMouseLegendLeave\n   * @type {function}\n   * @returns {void}\n   */\n  const onMouseLegendLeave = () => {\n    tryToExpandSector(null);\n  };\n\n  /**\n   * @description\n   * Holds options of chart's plugins\n   *\n   * @name chartPlugins\n   * @type {object}\n   */\n  const chartPlugins = {\n    afterInit(chart) {\n      chartInstance = chart;\n    },\n  };\n\n  /**\n   * @description\n   * Creates closure on parent's scope\n   *\n   * @name registerScope\n   * @type {function}\n   * @param {object} scope Parent's scope\n   * @returns {void}\n   */\n  const registerScope = (scope) => {\n    $scope = scope;\n  };\n\n  /**\n   * @description\n   * Appends + or - sign if number is positive or negative\n   *\n   * @public\n   * @name showSign\n   * @type {function}\n   * @param {number} number     Number inputed\n   *\n   * @returns {string}          String with appended sign and number\n   */\n  const showSign = number => {\n    const absNumber = Math.abs(number).toFixed(PRECISION);\n    const sign = number > 0 ? '+' : '-';\n    const localizedNumber = numberFilter(absNumber, PRECISION);\n    return `${sign} ${localizedNumber}`;\n  };\n\n  /**\n   * @description\n   * Returns allocation item by it's index\n   *\n   * @name getSelectedItem\n   * @type {function}\n   * @param {number} index Index of selected allocation item\n   * @returns {object} Selected allocation item\n   */\n  const getSelectedItem = (index) => {\n    const state = stateContainer.getState();\n    return getSortedAllocations(state.allocations.data.allocations)[index];\n  };\n\n  /**\n   * @description\n   * Creates function which will be fired on chart's section click\n   *\n   * @name createSectionClickHandler\n   * @type {function}\n   * @param {function} viewAssetsInPositions\n   * Controller's function that has to be called on section click\n   * @param {object} event Mouse click event\n   * @param {object} item Chart's clicked item\n   * @returns {void}\n   */\n  const createSectionClickHandler = viewAssetsInPositions => (event, item) => {\n    if (!item[0]) { return; }\n    // eslint-disable-next-line no-underscore-dangle\n    viewAssetsInPositions(getSelectedItem(item[0]._index));\n  };\n\n  /**\n   * @description\n   * Fires given function on click and passes selected allocation to it\n   *\n   * @name onDetailsClick\n   * @type {function}\n   * @param {function} viewAssetsInPositions Controller's function that has to be called on click\n   * @param {number} index Index of selected allocation item\n   * @returns {void}\n   */\n  const onDetailsClick = (viewAssetsInPositions, index) => {\n    viewAssetsInPositions(getSelectedItem(index));\n  };\n\n  /**\n   * @description\n   * Shows value as it is or adds two decimal zeroes if needed\n   *\n   * @name formatAmount\n   * @type {function}\n   * @param {number} value Value to format\n   * @returns {number} Formatted value\n   */\n  const formatAmount = (value) => {\n    if (!value) { return ''; }\n    const decimalsLength = (value.toString().split('.')[1] || []).length;\n    const fractionSize = decimalsLength < 2 ? 2 : decimalsLength;\n    return numberFilter(value, fractionSize);\n  };\n\n  /**\n   * @description\n   * Returns error object by error code\n   *\n   * @public\n   * @name getError\n   * @type {Object}\n   * @returns {errorMessageDescriptor} Descriptor of the error\n   */\n  const getError = (code) => errors[code];\n\n  return {\n    getChartDataSeries,\n    chartOptions,\n    chartPlugins,\n    isAllocationsAvailable,\n    getAllocations,\n    getColors,\n    isClass,\n    showSign,\n    onMouseLegendEnter,\n    onMouseLegendLeave,\n    isSectorSelected,\n    registerScope,\n    createSectionClickHandler,\n    onDetailsClick,\n    getSymbol,\n    formatAmount,\n    getColorClassByIndex,\n    getError,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-wm-allocations-donut-ng/scripts/helpers.js","import getStyle from 'lib-bb-styles';\n\nexport const CHART_SECTOR_SHIFT_SIZE = 20;\nexport const BORDER_COLOR = 'transparent';\nexport const SECTOR_INACTIVE_COLOR = getStyle('.btn-outline-secondary', 'color');\nexport const CHART_EXPANSION = 1.2;\nexport const CUTOUT_PERCENTAGE = 65;\nexport const PRECISION = 2;\nexport const CHART_ANIMATION_DURATION = 400;\n\n\n\n\n// WEBPACK FOOTER //\n// ./ext-wm-allocations-donut-ng/scripts/constants.js","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-styles\"\n// module id = 15\n// module chunks = 1 2 3 4 5 14 15"],"sourceRoot":""}