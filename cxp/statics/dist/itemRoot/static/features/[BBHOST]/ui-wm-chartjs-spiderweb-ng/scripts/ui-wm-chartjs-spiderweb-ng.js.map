{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***********************","webpack:///webpack/bootstrap d0309a746b17cd403690?c295***********************","webpack:///./ui-wm-chartjs-spiderweb-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114***","webpack:///external \"vendor-bb-chartjs\"?d5ea","webpack:///./ui-wm-chartjs-spiderweb-ng/scripts/index.js","webpack:///./ui-wm-chartjs-spiderweb-ng/scripts/component.js","webpack:///./ui-wm-chartjs-spiderweb-ng/scripts/controller.js"],"names":["angular","module","value","chartjs","component","name","uiWmChartjsChartSpiderwebComponent","controller","uiWmChartjsChartSpiderwebController","transclude","chartSpiderwebTooltip","bindings","series","radarOptions","radarDatasetOptions","polarOptions","polarDatasetsOptions","template","CHART_PADDING","getDefaultRadarOptions","chartMin","chartMax","layout","padding","title","display","legend","scale","ticks","beginAtZero","min","max","fontColor","backdropColor","fontSize","fontWeight","gridLines","circular","color","pointLabels","angleLines","getDefaultRadarDatasetOptions","backgroundColor","borderColor","borderWidth","pointRadius","pointBackgroundColor","pointBorderWidth","pointBorderColor","pointHoverBorderWidth","pointHoverRadius","getDefaultPolarOptions","startAngle","Math","PI","getDefaultPolarDatasetsOptions","negative","getRadarChartData","radarData","map","item","labels","datasets","data","getPolarChartData","minData","maxData","radarDataMin","getStartAngle","seriesLength","isHidden","element","rect","getBoundingClientRect","width","height","$element","$scope","Chartjs","$timeout","canvasItems","getElementsByTagName","radarWrapper","querySelector","polarCanvas","radarCanvas","CHART_MAX","createPolarChart","polarOptionsMerged","merge","polarDatasetsOptionsMerged","polarChart","Object","assign","type","options","createRadarChart","radarOptionsMerged","radarDatasetOptionsMerged","tooltips","custom","customTooltipFunc","tooltipModel","radarChart","createCharts","length","updatePolarChart","datasetsOptions","update","resetRadarCanvas","innerHTML","newCanvas","document","createElement","classList","add","appendChild","updateRadarChart","updateCharts","processCharts","setTimeout","polarDatasetOptions","$postLink","$onChanges"],"mappings":"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","file":"ui-wm-chartjs-spiderweb-ng/scripts/ui-wm-chartjs-spiderweb-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"vendor-bb-chartjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-wm-chartjs-spiderweb-ng\", [\"vendor-bb-angular\", \"vendor-bb-chartjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-wm-chartjs-spiderweb-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"vendor-bb-chartjs\"));\n\telse\n\t\troot[\"ui-wm-chartjs-spiderweb-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"vendor-bb-chartjs\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_99__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0309a746b17cd403690","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ui-wm-chartjs-spiderweb-ng/model.xml\n// module id = 0\n// module chunks = 24","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 93\n// module chunks = 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37","module.exports = __WEBPACK_EXTERNAL_MODULE_99__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-chartjs\"\n// module id = 99\n// module chunks = 23 24","import angular from 'vendor-bb-angular';\nimport chartjs from 'vendor-bb-chartjs';\n\nimport component from './component';\n\n/**\n * @description The angular module name\n * @name default\n * @type {string}\n */\nexport default angular.module('ui-wm-chartjs-spiderweb-ng', [])\n  .value('chartjs', chartjs)\n  .component('uiWmChartjsSpiderwebNg', component)\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./ui-wm-chartjs-spiderweb-ng/scripts/index.js","import uiWmChartjsChartSpiderwebController from './controller';\n\n/**\n * @name uiWmChartjsChartSpiderwebComponent\n * @type {object}\n * @description Chart.js polar and radar charts combined\n *\n * @property {ChartSpiderwebSeries[]} series Array used to draw Chartjs bar chart\n * @property {object} radarOptions Options for radar chart. Default options of chart.js library\n * @property {object} radarDatasetOptions Datasets' options for radar chart.\n *                                        Default options of chart.js library's datasets\n * @property {object} polarOptions Options for polar chart. Default options of chart.js library\n * @property {object} polarDatasetOptions Datasets' options for polar chart.\n *                                        Default options of chart.js library's datasets\n */\nconst uiWmChartjsChartSpiderwebComponent = {\n  controller: ['$element', '$scope', 'chartjs', '$timeout', uiWmChartjsChartSpiderwebController],\n  transclude: {\n    chartSpiderwebTooltip: 'chartSpiderwebTooltip',\n  },\n  bindings: {\n    series: '<',\n    radarOptions: '<',\n    radarDatasetOptions: '<',\n    polarOptions: '<',\n    polarDatasetsOptions: '<',\n  },\n  template: `\n    <div>\n      <div class=\"position-relative\">\n        <canvas class=\"position-relative\"></canvas>\n        <div class=\"radar\">\n          <canvas class=\"position-absolute fixed-top\"></canvas>\n        </div>\n      </div>\n      <div data-ng-transclude=\"chartSpiderwebTooltip\"></div>\n    </div>\n  `,\n};\n\nexport default uiWmChartjsChartSpiderwebComponent;\n\n/**\n * Series item that is used for building charts.\n * @typedef {object} ChartSpiderwebSeries\n * @property {string} name Label of item\n * @property {number} value Value of item\n * @property {number} min Lower value of optimal area for item\n * @property {number} max Higher value of optimal area for item\n */\n\n\n\n// WEBPACK FOOTER //\n// ./ui-wm-chartjs-spiderweb-ng/scripts/component.js","/* global angular, document */\n\nconst CHART_PADDING = 8;\n\n/**\n * @name getDefaultRadarOptions\n * @type {function}\n * @inner\n * @description Default styling options for radar chart\n * @returns {object} Default styling options for radar chart\n */\nconst getDefaultRadarOptions = (chartMin = 0, chartMax = 100) => ({\n  layout: {\n    padding: CHART_PADDING,\n  },\n  title: {\n    display: false,\n  },\n  legend: {\n    display: false,\n  },\n  scale: {\n    ticks: {\n      beginAtZero: true,\n      min: chartMin,\n      max: chartMax,\n      fontColor: '#878787',\n      backdropColor: 'rgba(0, 0, 0, 0)',\n      fontSize: 12,\n      fontWeight: 400,\n    },\n    gridLines: {\n      circular: true,\n      color: '#e3e3e3',\n    },\n    pointLabels: {\n      display: false,\n    },\n    angleLines: {\n      color: '#e6e6e6',\n    },\n  },\n});\n\n/**\n * @name getDefaultRadarDatasetOptions\n * @type {function}\n * @inner\n * @description Default styling options for radar chart datasets\n * @returns {object} Default styling options for radar chart datasets\n */\nconst getDefaultRadarDatasetOptions = () => ({\n  backgroundColor: 'rgba(0, 0, 0, 0)',\n  borderColor: 'rgba(0, 0, 0, 0)',\n  borderWidth: 0,\n  pointRadius: 6,\n  pointBackgroundColor: ['#79CBFF', '#F48B8F', '#FFCC78', '#74D1BC', '#B181DA'],\n  pointBorderWidth: 0,\n  pointBorderColor: 'transparent',\n  pointHoverBorderWidth: 0,\n  pointHoverRadius: 6,\n});\n\n/**\n * @name getDefaultPolarOptions\n * @type {function}\n * @inner\n * @description Default styling options for polar chart\n * @returns {object} Default styling options for polar chart\n */\nconst getDefaultPolarOptions = (chartMin = 0, chartMax = 100, startAngle = -0.5 * Math.PI) => ({\n  layout: {\n    padding: CHART_PADDING,\n  },\n  startAngle,\n  legend: {\n    display: false,\n  },\n  scale: {\n    ticks: {\n      beginAtZero: true,\n      min: chartMin,\n      max: chartMax,\n      fontColor: 'rgba(0, 0, 0, 0)',\n      backdropColor: 'rgba(0, 0, 0, 0)',\n    },\n    gridLines: {\n      display: false,\n    },\n  },\n});\n\n/**\n * @name getDefaultPolarDatasetsOptions\n * @type {function}\n * @inner\n * @description Default styling options for polar chart datasets\n * @returns {object} Default styling options for polar chart datasets\n */\nconst getDefaultPolarDatasetsOptions = () => ({\n  negative: {\n    backgroundColor: 'transparent',\n    borderColor: 'rgba(0, 0, 0, 0)',\n  },\n  min: {\n    backgroundColor: '#ffffff',\n    borderWidth: 1,\n    borderColor: '#ffffff',\n  },\n  max: {\n    backgroundColor: '#f2f2f2',\n    borderWidth: 0,\n  },\n});\n\n/**\n * @name getRadarChartData\n * @type {function}\n * @inner\n *\n * @description\n * Forms data object for radar chart\n *\n * @param {array} series Array of values for radar chart\n * @param {object} radarDatasetOptions Set of options for radar chart\n * @returns {object} Data needed to draw radar chart\n */\nconst getRadarChartData = (series, radarDatasetOptions) => {\n  const radarData = series.map(item => item.value);\n  const labels = series.map(item => item.name);\n\n  return {\n    datasets: [{\n      data: radarData,\n      ...getDefaultRadarDatasetOptions(),\n      ...radarDatasetOptions,\n    }],\n    labels,\n  };\n};\n\n/**\n * @name getPolarChartData\n * @type {function}\n * @inner\n *\n * @description\n * Forms data object for polar chart\n *\n * @param {array} series Array of values for polar chart\n * @param {object} polarDatasetsOptions Set of options for polar chart\n * @returns {object} Data needed to draw polar chart\n */\nconst getPolarChartData = (series, polarDatasetsOptions) => {\n  const minData = series.map(item => item.min || 0);\n  const maxData = series.map(item => item.max || 0);\n  const radarData = series.map(item => item.value);\n  const radarDataMin = Math.min(...radarData);\n\n  return {\n    datasets: [\n      {\n        data: radarDataMin < 0 ? [0] : [],\n        ...polarDatasetsOptions.negative,\n      },\n      {\n        data: minData,\n        ...polarDatasetsOptions.min,\n      },\n      {\n        data: maxData,\n        ...polarDatasetsOptions.max,\n      },\n    ],\n    labels: [],\n  };\n};\n\n/**\n * @name getStartAngle\n * @type {function}\n * @inner\n *\n * @description\n * Calculates start angle for chart\n *\n * @param {number} seriesLength Amount of items in chart\n * @returns {number} Start angle in radians\n */\nconst getStartAngle = seriesLength => Math.PI * (((1 / seriesLength) - 0.5) - (2 / seriesLength));\n\n/**\n * @description\n * Checks, whether element is hidden\n *\n * @name isHidden\n * @type {function}\n * @param {object} element Element to be checked\n * @returns {boolean} Flag, that tells whether element is hidden\n */\nconst isHidden = (element) => {\n  const rect = element.getBoundingClientRect();\n  return rect.width === 0 || rect.height === 0;\n};\n\n\nexport default function uiWmChartjsChartSpiderwebController(\n  $element,\n  $scope,\n  Chartjs,\n  $timeout\n) {\n  const canvasItems = $element[0].getElementsByTagName('canvas');\n  const radarWrapper = $element[0].querySelector('.radar');\n  const polarCanvas = canvasItems[0];\n  let radarCanvas = canvasItems[1];\n\n  const CHART_MAX = 100;\n\n  /**\n   * @name createPolarChart\n   * @type {function}\n   * @inner\n   * @description\n   * Creates new polar chart instance\n   * @param {array} series Array of data for chart\n   * @param {object} polarOptions Options for radar chart\n   * @param {object} polarDatasetsOptions Options for radar chart datasets\n   * @param {number} chartMin Chart's minimum\n   * @param {number} startAngle Start angle of chart\n   * @returns {void}\n   */\n  const createPolarChart = (\n    series,\n    polarOptions,\n    polarDatasetsOptions,\n    chartMin,\n    startAngle\n  ) => {\n    const polarOptionsMerged = angular.merge(\n      getDefaultPolarOptions(chartMin, CHART_MAX, startAngle),\n      polarOptions\n    );\n\n    const polarDatasetsOptionsMerged = angular.merge(\n      getDefaultPolarDatasetsOptions(),\n      polarDatasetsOptions\n    );\n\n    this.polarChart = Object.assign(\n      new Chartjs(polarCanvas, {\n        type: 'polarArea',\n        data: getPolarChartData(series, polarDatasetsOptionsMerged),\n        options: polarOptionsMerged,\n      }),\n      { $scope }\n    );\n  };\n\n  /**\n   * @name createRadarChart\n   * @type {function}\n   * @inner\n   * @description\n   * Creates new radar chart instance\n   * @param {array} series Array of data for chart\n   * @param {object} radarOptions Options for radar chart\n   * @param {object} radarDatasetOptions Options for radar chart datasets\n   * @param {number} chartMin Chart's minimum\n   * @returns {void}\n   */\n  const createRadarChart = (series, radarOptions, radarDatasetOptions, chartMin) => {\n    const radarOptionsMerged = angular.merge(\n      getDefaultRadarOptions(chartMin, CHART_MAX),\n      radarOptions\n    );\n\n    const radarDatasetOptionsMerged = angular.merge(\n      getDefaultRadarDatasetOptions(),\n      radarDatasetOptions\n    );\n\n    if (radarOptionsMerged.tooltips && radarOptionsMerged.tooltips.custom) {\n      const customTooltipFunc = radarOptionsMerged.tooltips.custom;\n      radarOptionsMerged.tooltips.custom =\n        (tooltipModel) => customTooltipFunc(tooltipModel, $element[0], series);\n    }\n\n    this.radarChart = new Chartjs(radarCanvas, {\n      type: 'radar',\n      data: getRadarChartData(series, radarDatasetOptionsMerged),\n      options: radarOptionsMerged,\n    });\n  };\n\n  /**\n   * @name createCharts\n   * @type {function}\n   * @inner\n   * @description\n   * Creates new chart instances\n   * @param {array} series Array of data for chart\n   * @param {object} radarOptions Options for radar chart\n   * @param {object} radarDatasetOptions Options for radar chart datasets\n   * @param {object} polarOptions Options for polar chart\n   * @param {object} polarDatasetsOptions Options for polar chart datasets\n   * @returns {void}\n   */\n  const createCharts = (\n    series,\n    radarOptions,\n    radarDatasetOptions,\n    polarOptions,\n    polarDatasetsOptions\n  ) => {\n    if (!series) { return; }\n\n    const seriesLength = series.length;\n    const radarData = series.map(item => item.value);\n    const startAngle = getStartAngle(seriesLength);\n    const radarDataMin = Math.min(...radarData);\n    const chartMin = radarDataMin < 0 ? radarDataMin - 10 : -10;\n\n    createPolarChart(series, polarOptions, polarDatasetsOptions, chartMin, startAngle);\n    $timeout(() => createRadarChart(series, radarOptions, radarDatasetOptions, chartMin), 0);\n  };\n\n  /**\n   * @name updatePolarChart\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Redraws chart with the new data\n   *\n   * @param {array} series Updated series of data for chart\n   * @param {object} polarOptions Updated options for polar chart\n   * @param {object} polarDatasetsOptions Options of chart's datasets\n   * @returns {void}\n   */\n  const updatePolarChart = (series, polarOptions, polarDatasetsOptions) => {\n    const datasetsOptions = angular.merge(\n      getDefaultPolarDatasetsOptions(),\n      polarDatasetsOptions\n    );\n    this.polarChart.options.startAngle = getStartAngle(series.length);\n    this.polarChart.options = angular.merge(this.polarChart.options, polarOptions);\n    this.polarChart.data = getPolarChartData(series, datasetsOptions);\n    this.polarChart.update();\n  };\n\n  /**\n   * @description\n   * Removes old radar canvase and creates new one\n   *\n   * @public\n   * @name resetRadarCanvas\n   * @type {function}\n   * @returns {void}\n   */\n  const resetRadarCanvas = () => {\n    radarWrapper.innerHTML = '';\n    const newCanvas = document.createElement('canvas');\n    newCanvas.classList.add('position-absolute');\n    newCanvas.classList.add('fixed-top');\n    radarCanvas = newCanvas;\n    radarWrapper.appendChild(newCanvas);\n  };\n\n  /**\n   * @name updateRadarChart\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Redraws chart with the new data\n   *\n   * @param {array} series Updated series of data for chart\n   * @param {object} radarOptions Options of chart\n   * @param {object} radarDatasetOptions Options of chart's datasets\n   * @returns {void}\n   */\n  const updateRadarChart = (series, radarOptions, radarDatasetOptions) => {\n    const radarData = series.map(item => item.value);\n    const radarDataMin = Math.min(...radarData);\n    const chartMin = radarDataMin < 0 ? radarDataMin - 10 : -10;\n\n    resetRadarCanvas();\n    createRadarChart(series, radarOptions, radarDatasetOptions, chartMin);\n  };\n\n  /**\n   * @name updateCharts\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Triggers chart update with new data\n   *\n   * @param {array} series Updated series of data for charts\n   * @param {object} radarOptions Options of chart\n   * @param {object} radarDatasetOptions Options of chart's datasets\n   * @param {object} polarOptions Updated options for polar chart\n   * @param {object} polarDatasetsOptions Options of chart's datasets\n   * @returns {void}\n   */\n  const updateCharts = (\n    series,\n    radarOptions,\n    radarDatasetOptions,\n    polarOptions,\n    polarDatasetsOptions\n  ) => {\n    if (!series) { return; }\n    updatePolarChart(series, polarOptions, polarDatasetsOptions);\n    updateRadarChart(series, radarOptions, radarDatasetOptions);\n  };\n\n  /**\n   * @name processCharts\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * Updates or creates charts depending on received data\n   *\n   * @returns {void}\n   */\n  const processCharts = () => {\n    if (!this.series || this.series.length === 0) { return; }\n    if (isHidden($element[0])) {\n      setTimeout(() => {\n        processCharts();\n      }, 500);\n\n      return;\n    }\n\n    if (this.radarChart && this.polarChart) {\n      updateCharts(\n        this.series,\n        this.radarOptions,\n        this.radarDatasetOptions,\n        this.polarOptions,\n        this.polarDatasetOptions\n      );\n    } else {\n      createCharts(\n        this.series,\n        this.radarOptions,\n        this.radarDatasetOptions,\n        this.polarOptions,\n        this.polarDatasetOptions\n      );\n    }\n  };\n\n  /**\n   * AngularJS Lifecycle hook used to draw chart\n   *\n   * @name $postLink\n   * @type {function}\n   * @returns {void}\n   */\n  const $postLink = () => processCharts();\n\n  /**\n   * @name $onChanges\n   * @type {function}\n   *\n   *\n   * @description\n   * AngularJS Lifecycle hook used to update chart\n   *\n   * @returns {void}\n   */\n  const $onChanges = () => processCharts();\n\n  Object.assign(this, {\n    $postLink,\n    $onChanges,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ui-wm-chartjs-spiderweb-ng/scripts/controller.js"],"sourceRoot":""}