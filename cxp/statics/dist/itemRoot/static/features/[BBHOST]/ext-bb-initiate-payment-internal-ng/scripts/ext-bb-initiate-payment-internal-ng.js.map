{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap 70052c6c6190d07a36f3?d006","webpack:///./ext-bb-initiate-payment-internal-ng/model.xml","webpack:///./ext-bb-initiate-payment-internal-ng/scripts/index.js","webpack:///external \"vendor-bb-angular-ng-aria\"","webpack:///external \"ui-bb-i18n-ng\"?dc01","webpack:///external \"ui-bb-loading-overlay-ng\"","webpack:///external \"ui-bb-account-selector-ng\"","webpack:///external \"ui-bb-currency-input-ng\"","webpack:///external \"ui-bb-char-counter-ng\"","webpack:///external \"ui-bb-calendar-popup-ng\"","webpack:///external \"ui-bb-expandable-ng\"","webpack:///external \"vendor-bb-angular-ng-messages\"","webpack:///external \"ui-bb-account-card-ng\"","webpack:///external \"vendor-bb-uib-alert\"","webpack:///external \"ui-bb-confirm-ng\"","webpack:///external \"ui-bb-autocomplete-search-ng\"","webpack:///external \"ui-bb-format-amount-ng\"","webpack:///external \"ui-bb-switcher-ng\"","webpack:///./ext-bb-initiate-payment-internal-ng/scripts/helpers.js","webpack:///external \"vendor-bb-angular\"?a114","webpack:///./ext-bb-initiate-payment-internal-ng/scripts/constants.js","webpack:///./ext-bb-initiate-payment-internal-ng/scripts/hooks.js","webpack:///./ext-bb-initiate-payment-internal-ng/scripts/events.js"],"names":["dependencyKeys","ngAriaModuleKey","i18nKey","uiBbLoadingOverlayKey","uiBbAccountSelectorKey","uiBbCurrencyInputKey","uiBbCharCounterKey","uiBbCalendarPopupKey","uiBbExpandableKey","bbAngularNgMessagesKey","uiBbAccountCardKey","vendorBbUibAlertKey","uiBbConfirmKey","uiBbAutocompleteSearchKey","uiBbFormatAmountKey","uiBbSwitcherKey","helpers","extHelpers","hooks","extHooks","events","extEvents","templates","form","ExtensionName","review","currencies","minOccurrences","maxOccurrences","maxDigits","fromContactToBeneficiary","contact","name","bank","accountNumber","flattenContactAccounts","contacts","resultContacts","accounts","account","Object","assign","accountName","alias","external","push","fromArrangementToContact","arrangement","BBAN","amount","currency","fromBeneficiaryToContact","beneficiary","accountType","value","getDateOnly","dateArg","date","Date","month","String","getMonth","day","getDate","year","getFullYear","padStart","getRecurringTransactionDay","schedule","transferFrequency","TransferFrequency","YEARLY","startDate","MONTHLY","getDay","fromModelToForm","payment","paymentForm","createdAt","data","id","debtorAccount","debitAccount","angular","copy","arrangementId","creditTransferTransactionInformation","length","creditInfo","instructedAmount","currencyCode","creditor","postalAddress","message","remittanceInformation","content","creditorBank","creditorAccount","identification","code","bankBranchCode","messageToBank","AccountTypes","find","item","correspondentBank","paymentReference","endToEndIdentification","every","parseInt","endDate","repeat","endingType","RecurrenceEnding","AFTER","ON","NEVER","SingleFrequency","requestedExecutionDate","stateContainer","router","$filter","service","i18nFilter","dateFilter","saveNewContact","createSelector","state","getContacts","getPayment","getDebitAccounts","debitAccounts","getCreditAccounts","creditAccounts","getBeneficiary","getBeneficiaryBank","getSchedule","getFrequencies","concat","preferences","recurring","RecurrenceFrequencies","getReview","getForm","getFromEditChanged","fromEditChanged","getEditRole","editRole","getMinDate","minDate","daysInMonth","addDays","toDate","days","getTime","addWeeks","weeks","addYears","years","addMonths","months","newMonth","newYear","newDay","getScheduleText","words","today","setHours","isToday","multipleOccurrences","ONCE","hasEnd","isEndingAfter","todayString","toLowerCase","hasLimitedOccurences","isMinOccurences","join","setEndDate","removeSelectedDebitAccount","selectedDebitAccount","loadContactsByName","combinedAccounts","filter","map","toUpperCase","includes","ownAccsHeaderSet","prevName","group","Promise","resolve","totalItems","selectContact","model","setBeneficiary","resetContact","resetBeneficiary","setDefaultOcurrencesValue","isNewContact","Boolean","isBeneficiarySet","isSaveNewContactEnabled","formToContact","formToPayment","isSinglePayment","schemeName","paymentOrder","paymentMode","paymentType","on","setFormPristine","scope","$watch","newValue","$evalAsync","$setPristine","updateFromEditChanged","template","getRoute","recurrenceEnding","singleFrequency","accountTypes","PaymentType","DAILY","WEEKLY","QUARTERLY","ScheduleRepeatValue","defaultPaymentType","defaultScheduleRepeat","setEditPayment","show"],"mappings":"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","file":"ext-bb-initiate-payment-internal-ng/scripts/ext-bb-initiate-payment-internal-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-account-selector-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-char-counter-ng\"), require(\"ui-bb-calendar-popup-ng\"), require(\"ui-bb-expandable-ng\"), require(\"vendor-bb-angular-ng-messages\"), require(\"ui-bb-account-card-ng\"), require(\"vendor-bb-uib-alert\"), require(\"ui-bb-confirm-ng\"), require(\"ui-bb-autocomplete-search-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-switcher-ng\"), require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-bb-initiate-payment-internal-ng\", [\"vendor-bb-angular-ng-aria\", \"ui-bb-i18n-ng\", \"ui-bb-loading-overlay-ng\", \"ui-bb-account-selector-ng\", \"ui-bb-currency-input-ng\", \"ui-bb-char-counter-ng\", \"ui-bb-calendar-popup-ng\", \"ui-bb-expandable-ng\", \"vendor-bb-angular-ng-messages\", \"ui-bb-account-card-ng\", \"vendor-bb-uib-alert\", \"ui-bb-confirm-ng\", \"ui-bb-autocomplete-search-ng\", \"ui-bb-format-amount-ng\", \"ui-bb-switcher-ng\", \"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-bb-initiate-payment-internal-ng\"] = factory(require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-account-selector-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-char-counter-ng\"), require(\"ui-bb-calendar-popup-ng\"), require(\"ui-bb-expandable-ng\"), require(\"vendor-bb-angular-ng-messages\"), require(\"ui-bb-account-card-ng\"), require(\"vendor-bb-uib-alert\"), require(\"ui-bb-confirm-ng\"), require(\"ui-bb-autocomplete-search-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-switcher-ng\"), require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"ext-bb-initiate-payment-internal-ng\"] = factory(root[\"vendor-bb-angular-ng-aria\"], root[\"ui-bb-i18n-ng\"], root[\"ui-bb-loading-overlay-ng\"], root[\"ui-bb-account-selector-ng\"], root[\"ui-bb-currency-input-ng\"], root[\"ui-bb-char-counter-ng\"], root[\"ui-bb-calendar-popup-ng\"], root[\"ui-bb-expandable-ng\"], root[\"vendor-bb-angular-ng-messages\"], root[\"ui-bb-account-card-ng\"], root[\"vendor-bb-uib-alert\"], root[\"ui-bb-confirm-ng\"], root[\"ui-bb-autocomplete-search-ng\"], root[\"ui-bb-format-amount-ng\"], root[\"ui-bb-switcher-ng\"], root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 70052c6c6190d07a36f3","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-bb-initiate-payment-internal-ng/model.xml\n// module id = 0\n// module chunks = 0","/**\n * @module ext-bb-initiate-payment-us-m-2-m-ng\n *\n * @description\n * Default extension for widget-bb-initiate-payment-us-m2m-ng\n *\n * @requires vendor-bb-angular-ng-aria\n */\nimport ngAriaModuleKey from 'vendor-bb-angular-ng-aria';\nimport i18nKey from 'ui-bb-i18n-ng';\nimport uiBbLoadingOverlayKey from 'ui-bb-loading-overlay-ng';\nimport uiBbAccountSelectorKey from 'ui-bb-account-selector-ng';\nimport uiBbCurrencyInputKey from 'ui-bb-currency-input-ng';\nimport uiBbCharCounterKey from 'ui-bb-char-counter-ng';\nimport uiBbCalendarPopupKey from 'ui-bb-calendar-popup-ng';\nimport uiBbExpandableKey from 'ui-bb-expandable-ng';\nimport bbAngularNgMessagesKey from 'vendor-bb-angular-ng-messages';\nimport uiBbAccountCardKey from 'ui-bb-account-card-ng';\nimport vendorBbUibAlertKey from 'vendor-bb-uib-alert';\nimport uiBbConfirmKey from 'ui-bb-confirm-ng';\nimport uiBbAutocompleteSearchKey from 'ui-bb-autocomplete-search-ng';\nimport uiBbFormatAmountKey from 'ui-bb-format-amount-ng';\nimport uiBbSwitcherKey from 'ui-bb-switcher-ng';\n\nimport extHelpers from './helpers';\nimport extHooks from './hooks';\nimport extEvents from './events';\n\nexport const dependencyKeys = [\n  ngAriaModuleKey,\n  i18nKey,\n  uiBbLoadingOverlayKey,\n  uiBbAccountSelectorKey,\n  uiBbCurrencyInputKey,\n  uiBbCharCounterKey,\n  uiBbCalendarPopupKey,\n  uiBbExpandableKey,\n  bbAngularNgMessagesKey,\n  uiBbAccountCardKey,\n  vendorBbUibAlertKey,\n  uiBbConfirmKey,\n  uiBbAutocompleteSearchKey,\n  uiBbFormatAmountKey,\n  uiBbSwitcherKey,\n];\n\nexport const helpers = extHelpers;\nexport const hooks = extHooks;\nexport const events = extEvents;\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-initiate-payment-internal-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-aria\"\n// module id = 2\n// module chunks = 0 1 2 8 9 10 11 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 3\n// module chunks = 0 1 2 3 4 5 8 9 10 11 12 13 14 19 24","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-overlay-ng\"\n// module id = 4\n// module chunks = 0 1 2 8 9 10 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-account-selector-ng\"\n// module id = 5\n// module chunks = 0 1 2 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-currency-input-ng\"\n// module id = 6\n// module chunks = 0 1 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-char-counter-ng\"\n// module id = 7\n// module chunks = 0 1 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-calendar-popup-ng\"\n// module id = 8\n// module chunks = 0 1 8 9 10 13 14 22","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-expandable-ng\"\n// module id = 9\n// module chunks = 0 1 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-messages\"\n// module id = 10\n// module chunks = 0 1 3 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-account-card-ng\"\n// module id = 11\n// module chunks = 0 1 8","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-alert\"\n// module id = 12\n// module chunks = 0 1 8 9 10 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-confirm-ng\"\n// module id = 13\n// module chunks = 0 1 2 8 9 10 11 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-autocomplete-search-ng\"\n// module id = 14\n// module chunks = 0 9 10 13 14 21","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-format-amount-ng\"\n// module id = 15\n// module chunks = 0 2 3 4 6 7","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-switcher-ng\"\n// module id = 16\n// module chunks = 0 1 8 9 10","\nimport angular from 'vendor-bb-angular';\n\nimport {\n  SingleFrequency,\n  RecurrenceFrequencies,\n  RecurrenceEnding,\n  TransferFrequency,\n  ExtensionName,\n  AccountTypes,\n} from './constants';\n\nconst templates = {\n  form: `#${ExtensionName}/form.html`,\n  review: `#${ExtensionName}/review.html`,\n};\n\nconst currencies = [];\nconst minOccurrences = 2;\nconst maxOccurrences = 200;\nconst maxDigits = 13;\n\nconst fromContactToBeneficiary = (contact) => ({\n  name: contact.name,\n  bank: {\n    accountNumber: contact.accountNumber,\n  },\n});\n\nconst flattenContactAccounts = (contacts) => {\n  const resultContacts = [];\n  for (const contact of contacts) {\n    for (const account of contact.accounts) {\n      Object.assign(account, {\n        ...contact,\n        // following line overwrites account.accountName with this preference\n        accountName: account.accountName || account.alias || account.name,\n        external: true,\n      });\n      resultContacts.push(account);\n    }\n  }\n\n  return resultContacts;\n};\n\nconst fromArrangementToContact = (arrangement) => ({\n  name: arrangement.name,\n  accountNumber: arrangement.BBAN,\n  amount: arrangement.amount,\n  currency: arrangement.currency,\n});\n\nconst fromBeneficiaryToContact = (beneficiary) => ({\n  name: beneficiary.name,\n  accounts: [{\n    name: beneficiary.name,\n    accountNumber: beneficiary.bank.accountNumber,\n    accountType: beneficiary.bank.accountType.value,\n  }],\n});\n\n/**\n * @name getDateOnly\n * @inner\n * @type {function}\n *\n * @description\n * Parses a javascript date to a yyyy-MM-DD format string, dropping time and timezone information.\n *\n * @param {date} dateArg the date to parse\n * @returns {string} the formatted string/date\n */\nconst getDateOnly = (dateArg) => {\n  if (!dateArg) {\n    return null;\n  }\n  const date = new Date(dateArg);\n\n  const month = String(date.getMonth() + 1);\n  const day = String(date.getDate());\n  const year = String(date.getFullYear());\n\n  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n};\n\n/**\n * @name getRecurringTransactionDay\n * @inner\n * @type {function}\n *\n * @description\n * Denotes day on which transfer should be executed.\n * For weekly it will be 1..7 indicating weekday.\n * For monthly it will be 1..31 indicating day of month.\n * For yearly it will be 1..12 indicating month of the year\n *\n * @param {object} schedule Recurring payment schedule object\n * @returns {number} Recurring transaction day\n */\nconst getRecurringTransactionDay = schedule => {\n  switch (schedule.transferFrequency.value) {\n    case TransferFrequency.YEARLY:\n      return schedule.startDate.getMonth() + 1;\n    case TransferFrequency.MONTHLY:\n      return schedule.startDate.getDate();\n    default:\n      return schedule.startDate.getDay() + 1;\n  }\n};\n\n/**\n * @name Helpers#fromModelToForm\n * @description\n * Transforms payment model coming from server to for model\n * @type {Function}\n * @param {Object} payment Payment model from server\n * @returns {Object} Transformed payment\n */\nexport const fromModelToForm = (payment) => {\n  const paymentForm = {\n    createdAt: payment.createdAt ? new Date(payment.createdAt) : null,\n    data: {\n      id: payment.id ? payment.id : null,\n    },\n  };\n\n  // select debtor info\n  if (payment.debtorAccount) {\n    paymentForm.data.debitAccount = {\n      ...angular.copy(payment.debtorAccount),\n      id: payment.debtorAccount.arrangementId,\n    };\n  }\n\n  // creditor info\n  if (payment.creditTransferTransactionInformation &&\n    payment.creditTransferTransactionInformation.length) {\n    const creditInfo = payment.creditTransferTransactionInformation[0];\n    // amount and currency\n    if (creditInfo.instructedAmount) {\n      Object.assign(paymentForm.data, {\n        amount: {\n          currency: creditInfo.instructedAmount.currencyCode || null,\n          value: creditInfo.instructedAmount.amount || null,\n        },\n      });\n    }\n\n    Object.assign(paymentForm.data, {\n      beneficiary: {\n        name: creditInfo.creditor ? creditInfo.creditor.name : null,\n        postalAddress: creditInfo.creditor ? creditInfo.creditor.postalAddress : null,\n        message: creditInfo.remittanceInformation ? creditInfo.remittanceInformation.content : null,\n        bank: {\n          name: creditInfo.creditorBank ? creditInfo.creditorBank.name : null,\n          accountNumber: creditInfo.creditorAccount && creditInfo.creditorAccount.identification\n            ? creditInfo.creditorAccount.identification.identification : null,\n          code: creditInfo.creditorBank ? creditInfo.creditorBank.bankBranchCode : null,\n          postalAddress: creditInfo.creditorBank ? creditInfo.creditorBank.postalAddress : null,\n          message: creditInfo.messageToBank || null,\n          accountType: AccountTypes.find(\n            item => item.value === creditInfo.creditorAccount.accountType\n          ),\n        },\n      },\n    });\n\n    if (creditInfo.correspondentBank) {\n      Object.assign(paymentForm.data.beneficiary, {\n        correspondentBank: {\n          name: creditInfo.correspondentBank.name || null,\n          code: creditInfo.correspondentBank.bankBranchCode,\n        },\n      });\n    }\n\n    // reference and description\n    Object.assign(paymentForm.data, {\n      paymentReference: creditInfo.endToEndIdentification || null,\n    });\n  }\n\n  // schedule\n  if (payment.schedule) {\n    Object.assign(paymentForm.data, {\n      schedule: {\n        transferFrequency: {\n          value: payment.schedule.transferFrequency,\n        },\n      },\n    });\n\n    if (payment.schedule.transferFrequency === 'WEEKLY') {\n      paymentForm.data.schedule.transferFrequency.name = 'form.schedule.frequency.weekly';\n    } else if (payment.schedule.transferFrequency === 'DAILY') {\n      paymentForm.data.schedule.transferFrequency.name = 'form.schedule.frequency.daily';\n    } else if (payment.schedule.transferFrequency === 'MONTHLY') {\n      paymentForm.data.schedule.transferFrequency.name = 'form.schedule.frequency.monthly';\n    } else if (payment.schedule.transferFrequency === 'QUARTERLY') {\n      paymentForm.data.schedule.transferFrequency.name = 'form.schedule.frequency.quarterly';\n    } else if (payment.schedule.transferFrequency === 'YEARLY') {\n      paymentForm.data.schedule.transferFrequency.name = 'form.schedule.frequency.annually';\n    }\n\n    paymentForm.data.schedule.startDate = payment.schedule.startDate ?\n      new Date(payment.schedule.startDate) : null;\n\n    if (payment.schedule.every) {\n      paymentForm.data.schedule.transferFrequency.every = parseInt(payment.schedule.every, 10);\n    }\n\n    if (payment.schedule.endDate) {\n      paymentForm.data.schedule.endDate = new Date(payment.schedule.endDate);\n    }\n\n    if (payment.schedule.repeat) {\n      paymentForm.data.schedule.repeat = payment.schedule.repeat;\n      paymentForm.data.endingType = RecurrenceEnding.AFTER;\n    } else if (payment.schedule.endDate) {\n      paymentForm.data.endingType = RecurrenceEnding.ON;\n    }\n  } else {\n    Object.assign(paymentForm.data, {\n      endingType: RecurrenceEnding.NEVER,\n      schedule: {\n        transferFrequency: angular.copy(SingleFrequency),\n        startDate: new Date(payment.requestedExecutionDate),\n        endDate: new Date(payment.requestedExecutionDate),\n      },\n    });\n  }\n\n  return paymentForm;\n};\n\nexport default ({ stateContainer, router, $filter, service }) => {\n  const i18nFilter = $filter('i18n');\n  const dateFilter = $filter('date');\n\n  /**\n   * @description\n   * Retrieve save new contact flag from state\n   * @name saveNewContact\n   * @inner\n   * @type {Function}\n   * @returns {Boolean}\n   */\n  const saveNewContact = stateContainer.createSelector((state) => state.payment.saveNewContact);\n\n  /**\n   * @description\n   * Retrieve payment data from state store\n   * @name Helpers#getContacts\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getContacts = stateContainer.createSelector((state) => state.contacts.data);\n\n  /**\n   * @description\n   * Retrieve payment data from state store\n   * @name Helpers#getPayment\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getPayment = stateContainer.createSelector((state) => state.payment.data);\n\n  /**\n   * @description\n   * Retrieve debit accounts data from state store\n   * @name Helpers#getDebitAccounts\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getDebitAccounts = stateContainer.createSelector((state) => state.debitAccounts);\n\n  /**\n   * @description\n   * Retrieve credit accounts data from state store\n   * @name Helpers#getCreditAccounts\n   * @type {Function}\n   * @returns {Array}\n   */\n  const getCreditAccounts = stateContainer.createSelector((state) => state.creditAccounts.data);\n\n  /**\n   * @description\n   * Retrieve payment beneficiary data from state store\n   * @name Helpers#getBeneficiary\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getBeneficiary = stateContainer.createSelector(() => getPayment().beneficiary);\n\n  /**\n   * @description\n   * Retrieve beneficiary bank data from state store\n   * @name Helpers#getBeneficiaryBank\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getBeneficiaryBank = stateContainer.createSelector(() => getBeneficiary().bank);\n\n  /**\n   * @description\n   * Retrieve payment schedule data from state store\n   * @name Helpers#getSchedule\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getSchedule = stateContainer.createSelector(() => getPayment().schedule);\n\n  /**\n   * @description\n   * Returns frequencies for payment depending on occurences number\n   *\n   * @name Helpers#getFrequencies\n   * @type {function}\n   * @returns {array<object>} Array of transfer frequencies\n   */\n  const getFrequencies = stateContainer.createSelector(\n    (state) => [SingleFrequency].concat(state.preferences.recurring ? RecurrenceFrequencies : [])\n  );\n\n  /**\n   * @description\n   * Retrieve review from state store\n   * @name Helpers#getReview\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getReview = stateContainer.createSelector((state) => state.review);\n\n  /**\n   * @description\n   * Retrieve form from state store\n   * @name Helpers#getForm\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getForm = stateContainer.createSelector((state) => state.form);\n\n  /**\n   * @description\n   * Retrieve \"fromEditChanged\" value from state store\n   * @name Helpers#getFromEditChanged\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getFromEditChanged = stateContainer.createSelector(state => state.payment.fromEditChanged);\n\n  /**\n   * @description\n   * Retrieve edit role value from state store\n   * @name Helpers#getEditRole\n   * @type {Function}\n   * @returns {Object}\n   */\n  const getEditRole = stateContainer.createSelector(state => state.preferences.editRole);\n\n  /**\n   * @name Helpers#getMinDate\n   * @type {function}\n   * @description\n   * Get the minimum available date for specific frequency\n   *\n   * @param {date} startDate\n   * @param {object} transferFrequency\n   * @return {date}\n   */\n  const getMinDate = (startDate, transferFrequency = {}) => {\n    let minDate;\n\n    const daysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\n    const addDays = (toDate, days) => new Date(toDate.getTime() + (days * 24 * 60 * 60 * 1000));\n    const addWeeks = (toDate, weeks) => addDays(toDate, weeks * 7);\n    const addYears = (toDate, years) => new Date(toDate.getFullYear() + years,\n      toDate.getMonth(), (toDate.getDate() > daysInMonth(toDate.getMonth(),\n        toDate.getFullYear()) ? daysInMonth(toDate.getMonth(),\n          toDate.getFullYear()) : toDate.getDate()));\n    const addMonths = (toDate, months) => {\n      const newMonth = toDate.getMonth() + months + 1 > 12 ?\n        ((toDate.getMonth() + months + 1) % 12) - 1 : toDate.getMonth() + months;\n      const newYear = toDate.getMonth() + months + 1 > 12 ?\n        addYears(toDate, 1).getFullYear() : toDate.getFullYear();\n      const newDay = toDate.getDate() > daysInMonth(newMonth, newYear) ?\n        daysInMonth(newMonth, newYear) : toDate.getDate();\n      return new Date(newYear, newMonth, newDay);\n    };\n\n    switch (transferFrequency.value) {\n      case 'DAILY':\n        minDate = addDays(startDate, transferFrequency.every);\n        break;\n      case 'WEEKLY':\n        minDate = addWeeks(startDate, transferFrequency.every);\n        break;\n      case 'MONTHLY':\n        minDate = addMonths(startDate, transferFrequency.every);\n        break;\n      case 'QUARTERLY':\n        minDate = addMonths(startDate, (transferFrequency.every * 3));\n        break;\n      case 'YEARLY':\n        minDate = addYears(startDate, transferFrequency.every);\n        break;\n      default:\n        minDate = startDate;\n    }\n\n    return minDate;\n  };\n\n  /**\n   * @description\n   * Compiles the scheduling description out of payment object params.\n   * In this process, following translation keys are being used:\n   * form.schedule.starting, for word \"Starting\"\n   * form.schedule.today, for word \"Today\"\n   * form.schedule.on, for word \"On\" (used before date to form \"on 01.01.2017\")\n   * form.schedule.until, for word \"until\" (used before date to form \"until 01.01.2017\")\n   * form.schedule.repeat.count, for word \"times\" (used after repeat count to form \"5 times\")\n   * and name of the transfer frequency set in constants file\n   *\n   * @name Helpers#getScheduleText\n   * @type {function}\n   * @returns {string} Compiled text that can be used as scheduling value in views\n   */\n  const getScheduleText = () => {\n    const payment = getPayment();\n    const schedule = getSchedule();\n    const words = [];\n    const today = (new Date()).setHours(0, 0, 0, 0);\n    const startDate = new Date(schedule.startDate);\n    const isToday = startDate.setHours(0, 0, 0, 0) === today;\n    const multipleOccurrences = schedule.transferFrequency.value !== TransferFrequency.ONCE;\n    const hasEnd = payment.endingType !== RecurrenceEnding.NEVER;\n    const isEndingAfter = payment.endingType === RecurrenceEnding.AFTER;\n\n    // add frequency\n    words.push(i18nFilter(schedule.transferFrequency.name));\n    words.push('-');\n\n    // if there are multiple occurrences, add word starting\n    if (multipleOccurrences) {\n      words.push(i18nFilter('form.schedule.starting'));\n    }\n\n    // if start date is today use word instead of date\n    if (isToday) {\n      let todayString = i18nFilter('form.schedule.today');\n      // for multiple occurrences, there is a prefix word, so this on should be lowercase\n      if (multipleOccurrences) {\n        todayString = todayString.toLowerCase();\n      }\n\n      words.push(todayString);\n    }\n\n    // for single transfer in the future, we need prefix word on\n    if (!multipleOccurrences && !isToday) {\n      words.push(i18nFilter('form.schedule.on').toLowerCase());\n    }\n\n    if (!isToday) {\n      words.push(dateFilter(schedule.startDate));\n    }\n\n    const hasLimitedOccurences = hasEnd && multipleOccurrences;\n    const isMinOccurences = !schedule.repeat || schedule.repeat < minOccurrences;\n\n    // if there are limited number of occurrences,\n    // add comma for the last word, so that there is no space between them\n    if (hasLimitedOccurences && !(isEndingAfter && isMinOccurences)) {\n      words[words.length - 1] += ',';\n    }\n\n    if (hasEnd && multipleOccurrences) {\n      // there is an end for this schedule\n      // based on the type of ending construct words differently\n      if (payment.endingType === RecurrenceEnding.ON) {\n        words.push(i18nFilter('form.schedule.until'));\n        words.push(dateFilter(schedule.endDate));\n      } else if (schedule.repeat >= minOccurrences) {\n        words.push(schedule.repeat);\n        words.push(schedule.repeat ? i18nFilter('form.schedule.repeat.count') : '');\n      }\n    }\n\n    // output everything together\n    return words.join(' ');\n  };\n\n  /**\n   * @description\n   * Updates scheduled end date\n   *\n   * @name Helpers#setEndDate\n   * @type {function}\n   */\n  const setEndDate = () => {\n    const schedule = getSchedule();\n    schedule.endDate = getMinDate(schedule.startDate, schedule.transferFrequency);\n  };\n\n  /**\n   * @description\n   * Check that `account` is not in the current list of beneficiaries\n   * @name removeSelectedDebitAccount\n   * @type {Function}\n   * @inner\n   * @param {Object} account The debit account to check\n   * @returns {Boolean}\n   */\n  const removeSelectedDebitAccount = (account) => {\n    const selectedDebitAccount = getPayment().debitAccount;\n\n    if (!selectedDebitAccount || !selectedDebitAccount.BBAN) {\n      return true;\n    }\n\n    return account.BBAN !== selectedDebitAccount.BBAN;\n  };\n\n  /**\n   * @description\n   * Loads list of contacts filtered by contact name\n   *\n   * @param {string} name Name of the contact\n   * @return {Promise.<Object>}\n   *\n   * @name Helpers#loadContactsByName\n   * @type {function}\n   */\n  const loadContactsByName = (name) => {\n    const contacts = getContacts();\n    const creditAccounts = getCreditAccounts() || [];\n\n    let combinedAccounts = [\n      ...creditAccounts.filter(removeSelectedDebitAccount).map(fromArrangementToContact),\n      ...flattenContactAccounts(contacts),\n    ];\n\n    if (name) {\n      combinedAccounts = combinedAccounts.filter(account =>\n        account.name.toUpperCase().includes(name.toUpperCase()) ||\n        (\n          account.accountName &&\n          account.accountName.toUpperCase().includes(name.toUpperCase())\n        ) ||\n        (\n          account.accountNumber &&\n          account.accountNumber.toUpperCase().includes(name.toUpperCase())\n        )\n      );\n    }\n\n    // add groupheaders\n    let ownAccsHeaderSet = false;\n    let prevName = '';\n    for (const account of combinedAccounts) {\n      if (!account.external && !ownAccsHeaderSet) {\n        ownAccsHeaderSet = true;\n        account.group = i18nFilter('form.beneficiary.group.internal');\n      } else if (account.external) {\n        account.group = prevName !== account.name ? account.name : null;\n        prevName = account.name;\n      } else {\n        account.group = null;\n      }\n    }\n\n    return Promise.resolve({\n      data: combinedAccounts,\n      totalItems: combinedAccounts.length,\n    });\n  };\n\n  /**\n   * @description\n   * Set beneficiary fields when selecting contact\n   *\n   * @param {object} model Contact model\n   * @name Helpers#selectContact\n   * @type {function}\n   */\n  const selectContact = (model) => service.setBeneficiary(fromContactToBeneficiary(model));\n\n  /**\n   * @description\n   * Resets all the beneficiary fields\n   *\n   * @name Helpers#resetContact\n   * @type {function}\n   */\n  const resetContact = () => {\n    service.resetBeneficiary();\n  };\n\n  /**\n   * @description\n   * Sets starting ocurrences number if not defined use default one\n   *\n   * @name Helpers#setDefaultOcurrencesValue\n   * @type {function}\n   */\n  const setDefaultOcurrencesValue = () => {\n    const schedule = getSchedule();\n    if (!schedule.repeat) {\n      schedule.repeat = minOccurrences;\n    }\n  };\n\n  /**\n   * @description\n   * Check if contact is not in address book\n   *\n   * @returns {boolean}\n   *\n   * @name Helpers#isNewContact\n   * @inner\n   * @type {function}\n   */\n  const isNewContact = () => {\n    const beneficiary = getBeneficiary();\n    const contacts = getContacts();\n\n    return !Boolean(contacts && contacts.find((contact) => (\n      contact.name === beneficiary.name &&\n      contact.accountNumber === beneficiary.bank.accountNumber &&\n      contact.accountType === beneficiary.bank.accountType.value\n    )));\n  };\n\n  /**\n   * @description\n   * Check if beneficiary fields are set\n   *\n   * @returns {boolean}\n   *\n   * @name Helpers#isBeneficiarySet\n   * @inner\n   * @type {function}\n   */\n  const isBeneficiarySet = () => {\n    const beneficiary = getBeneficiary();\n\n    return Boolean(\n      beneficiary.name &&\n      beneficiary.bank.accountNumber &&\n      beneficiary.bank.accountType\n    );\n  };\n\n  /**\n   * @description\n   * Checks if save new contact checkbox should be enabled\n   *\n   * @returns {boolean}\n   *\n   * @name Helpers#isSaveNewContactEnabled\n   * @type {function}\n   */\n  const isSaveNewContactEnabled = () => isBeneficiarySet() && isNewContact();\n\n  /**\n   * @description\n   * Transforms form fields to contact model to be saved\n   *\n   * @param {object} beneficiary The beneficiary fields\n   * @returns {object}\n   *\n   * @name Helpers#formToContact\n   * @type {function}\n   */\n  const formToContact = (beneficiary) => (\n    isSaveNewContactEnabled() && saveNewContact() && fromBeneficiaryToContact(beneficiary)\n  );\n\n  /**\n   * @description\n   * Transforms form fields to payment model to be saved\n   *\n   * @param {object} payment The payment fields\n   * @returns {object}\n   *\n   * @name Helpers#formToPayment\n   * @type {function}\n   */\n  const formToPayment = (payment) => {\n    const { beneficiary, debitAccount, schedule, amount } = payment;\n    const isSinglePayment = !schedule.transferFrequency\n      || schedule.transferFrequency.value === SingleFrequency.value;\n\n    const debtorAccount = debitAccount ? {\n      identification: {\n        identification: debitAccount.id,\n        schemeName: 'ID',\n      },\n    } : null;\n\n    if (debitAccount && debitAccount.name) {\n      Object.assign(debtorAccount, { name: debitAccount.name });\n    }\n\n    const creditTransferTransactionInformation = [{\n      instructedAmount: {\n        amount: amount.value,\n        currencyCode: amount.currency,\n      },\n      creditorAccount: {\n        identification: {\n          identification: beneficiary.bank.accountNumber,\n          schemeName: 'BBAN',\n        },\n        name: beneficiary.name,\n        accountType: beneficiary.bank.accountType.value,\n      },\n      creditor: {\n        name: beneficiary.name,\n      },\n    }];\n\n    if (beneficiary.message) {\n      Object.assign(creditTransferTransactionInformation[0], {\n        remittanceInformation: beneficiary.message,\n      });\n    }\n\n    const paymentOrder = {\n      debtorAccount,\n      requestedExecutionDate: getDateOnly(schedule.startDate),\n      paymentMode: isSinglePayment ? 'SINGLE' : 'RECURRING',\n      paymentType: 'INTERNAL',\n      creditTransferTransactionInformation,\n    };\n\n    if (!isSinglePayment) {\n      Object.assign(paymentOrder, {\n        schedule: {\n          transferFrequency: schedule.transferFrequency.value,\n          on: getRecurringTransactionDay(schedule),\n          startDate: getDateOnly(schedule.startDate),\n          every: schedule.transferFrequency.every,\n          endDate: payment.endingType === RecurrenceEnding.ON ?\n            getDateOnly(schedule.endDate) : null,\n          repeat: payment.endingType === RecurrenceEnding.AFTER ?\n            schedule.repeat : null,\n        },\n      });\n    }\n\n    if (payment.id) {\n      Object.assign(paymentOrder, { id: payment.id });\n    }\n\n    return paymentOrder;\n  };\n\n  /**\n   * Transforms the form into a pristine state after binding all fields\n   *\n   * @name setFormPristine\n   * @type {function}\n   * @param {object} scope Current ng scope with form\n   */\n  const setFormPristine = (scope) => {\n    scope.$watch(() => getFromEditChanged(), (newValue) => {\n      if (newValue) {\n        scope.$evalAsync(() => {\n          scope.paymentForm.$setPristine();\n          service.updateFromEditChanged(false);\n        });\n      }\n    });\n  };\n\n  return {\n    get template() {\n      return templates[router.getRoute()];\n    },\n    get recurrenceEnding() { return RecurrenceEnding; },\n    get singleFrequency() { return SingleFrequency; },\n    get accountTypes() { return AccountTypes; },\n    maxDigits,\n    currencies,\n    minOccurrences,\n    maxOccurrences,\n    getPayment,\n    getSchedule,\n    getBeneficiary,\n    getBeneficiaryBank,\n    getDebitAccounts,\n    getReview,\n    getForm,\n    getMinDate,\n    getScheduleText,\n    getFrequencies,\n    setEndDate,\n    loadContactsByName,\n    selectContact,\n    resetContact,\n    isSaveNewContactEnabled,\n    setDefaultOcurrencesValue,\n    formToContact,\n    formToPayment,\n    setFormPristine,\n    getEditRole,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-initiate-payment-internal-ng/scripts/helpers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 18\n// module chunks = 0 8 9 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33","/**\n * @name Constants\n * @type {object}\n */\n\n/**\n * @description\n * Extension name\n *\n * @name Contacts#WidgetName\n * @type {string}\n */\nexport const ExtensionName = 'ext-bb-initiate-payment-internal-ng';\n\n/**\n * @description\n * Payment type identifier\n *\n * @name Constants#PaymentType\n * @type {string}\n */\nexport const PaymentType = 'INTERNAL';\n\n/**\n * @description\n * Widget recurrence ending enum\n *\n * @name Constants#RecurrenceEnding\n * @type {object}\n */\nexport const RecurrenceEnding = {\n  NEVER: 'NEVER',\n  ON: 'ON',\n  AFTER: 'AFTER',\n};\n\n/**\n * @description\n * Widget transfer frequencies enum\n *\n * @name Constants#TransferFrequency\n * @type {object}\n */\nexport const TransferFrequency = {\n  ONCE: 'ONCE',\n  DAILY: 'DAILY',\n  WEEKLY: 'WEEKLY',\n  MONTHLY: 'MONTHLY',\n  QUARTERLY: 'QUARTERLY',\n  YEARLY: 'YEARLY',\n};\n\n/**\n * @description\n * Array of recurring frequency objects with the following properties (all mandatory)\n *\n * @property {string} name Translation key of the label\n * that will be displayed to the end user\n * @property {string} value Denotes frequency type of transfer.\n * Possible values: DAILY/WEEKLY/MONTHLY/YEARLY\n * @property {number} every Indicates skip interval of transfer.\n * 1 would mean execute every time, 2 - every other time\n *\n * @example\n * {\n *   name: 'form.schedule.frequency.weekly',\n *   value: 'WEEKLY',\n *   every: 1,\n * },\n * {\n *   name: 'form.schedule.frequency.bi.weekly',\n *   value: 'WEEKLY',\n *   every: 2,\n * }\n *\n * @name Constants#RecurrenceFrequencies\n * @type {array}\n */\nexport const RecurrenceFrequencies = [\n  {\n    name: 'form.schedule.frequency.daily',\n    value: TransferFrequency.DAILY,\n    every: 1,\n  },\n  {\n    name: 'form.schedule.frequency.weekly',\n    value: TransferFrequency.WEEKLY,\n    every: 1,\n  },\n  {\n    name: 'form.schedule.frequency.monthly',\n    value: TransferFrequency.MONTHLY,\n    every: 1,\n  },\n  {\n    name: 'form.schedule.frequency.quarterly',\n    value: TransferFrequency.QUARTERLY,\n    every: 1,\n  },\n  {\n    name: 'form.schedule.frequency.annually',\n    value: TransferFrequency.YEARLY,\n    every: 1,\n  },\n];\n\n/**\n * @description\n * Object representing single payment\n *\n * @property {string} name Translation key of the label\n * that will be displayed to the end user\n * @property {string} value Denotes frequency, holds value 'ONCE'\n *\n * @name Constants#SingleFrequency\n * @type {object}\n */\nexport const SingleFrequency = {\n  name: 'form.schedule.frequency.once',\n  value: TransferFrequency.ONCE,\n};\n\n/**\n * @description\n * Minimum ocurrences value by default\n * @name Constants#ScheduleRepeatValue\n * @type {Number}\n */\nexport const ScheduleRepeatValue = 2;\n\n/**\n * @description\n * Array of account type objects with the following properties (all mandatory)\n *\n * @property {string} name Translation key of the label that will be displayed to the end user\n * @property {string} value Denotes type of account. Possible values: CHECKING/SAVING\n *\n * @name Constants#AccountTypes\n * @type {Array}\n */\nexport const AccountTypes = [\n  {\n    name: 'form.account.type.checking',\n    value: 'CHECKING',\n  },\n  {\n    name: 'form.account.type.saving',\n    value: 'SAVING',\n  },\n];\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-initiate-payment-internal-ng/scripts/constants.js","import { PaymentType, ScheduleRepeatValue } from './constants';\n\n/**\n * @name Hooks\n * @type {Object}\n */\nexport default {\n  /**\n   * @name Hooks#defaultPaymentType\n   * @type {Function}\n   *\n   * @description\n   * Gets the current extension payment type\n   *\n   * @returns {String} Default payment type\n   */\n  defaultPaymentType: () => PaymentType,\n\n  /**\n   * @name Hooks#defaultScheduleRepeat\n   * @type {Function}\n   *\n   * @description\n   * Get the default repeat value of minimum ocurrences\n   *\n   * @returns {Number} Default schedule repeat default value\n   */\n  defaultScheduleRepeat: () => ScheduleRepeatValue,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-initiate-payment-internal-ng/scripts/hooks.js","import { fromModelToForm } from './helpers';\n\nexport default ({ service }) => ({\n  'bb.event.payment.edit.internal': (payment) => {\n    service.setEditPayment(fromModelToForm(payment));\n    service.updateFromEditChanged(true);\n    service.show();\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-initiate-payment-internal-ng/scripts/events.js"],"sourceRoot":""}