{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*********","webpack:///webpack/bootstrap 70daa42420248d0dae68?ba28*********","webpack:///./lib-bb-login-logout-notifier-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*","webpack:///./lib-bb-login-logout-notifier-ng/scripts/index.js","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///./lib-bb-login-logout-notifier-ng/scripts/bb-login-logout-notifier.service.js","webpack:///./lib-bb-login-logout-notifier-ng/scripts/constants.js"],"names":["moduleKey","bbLoginLogoutNotifierServiceKey","angular","module","eventBusModuleKey","factory","eventBusKey","bbLoginLogoutNotifierService","run","loginLogoutNotifier","init","name","eventBus","$log","$window","storage","localStorage","isLocalStorageAvailable","x","setItem","removeItem","e","DOMException","code","length","setUserLoggedIn","LOCAL_STORAGE_KEY","setUserLoggedOut","subscribeToUserLogout","callback","subscribe","NOTIFICATION_LOGOUT_EVENT","unsubscribe","addEventListener","evt","key","JSON","parse","newValue","publish"],"mappings":"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","file":"lib-bb-login-logout-notifier-ng/scripts/lib-bb-login-logout-notifier-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-login-logout-notifier-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-login-logout-notifier-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"));\n\telse\n\t\troot[\"lib-bb-login-logout-notifier-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_33__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 70daa42420248d0dae68","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-login-logout-notifier-ng/model.xml\n// module id = 0\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0 9 10 11 12 13 14 15 16 17 18 19 21 22","/**\n * @module lib-bb-login-logout-notifier\n * @description\n * Provides a cross-browser interface for tabs logout using localStorage\n * It provides a flag 'IsLoggedIn' that is persisted in localStorage between Pages with 'true'\n * when the user is logged in and should be removed when the user logs out.\n * If there's no localStorage it fallsback to normal behavior (one tab logs out and\n * others needs a refresh)\n *\n * @example\n * import bbLoginLogoutNotifierModuleKey,\n *  { bbLoginLogoutNotifierServiceKey } from 'lib-bb-login-logout-notifier-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     bbLoginLogoutNotifierModuleKey,\n *   ])\n *   .controller('MyController', [\n *     bbLoginLogoutNotifierServiceKey,\n *     // into //\n *     (loginLogoutNotifier) => {\n *       const $ctrl = this;\n *       let unsubscribe = () => {};\n *\n *       const counterStorage = 'counter';\n *\n *       $ctrl.$onInit = () => {\n *         unsubscribe = loginLogoutNotifier.subscribeToUserLogout(() => {\n *           // Refresh page to respond to the logout\n *           window.location.assign(logoutRedirectUrl);\n *          });\n *       };\n *\n *       $ctrl.$onDestroy = () => {\n *         unsubscribe();\n *       };\n *\n *       const logout = () => {\n *          model.logout()\n *           .then(() => {\n *              // Update localStorage flag to be logged out\n *              loginLogoutNotifier.setUserLoggedOut();\n *              window.location.assign(logoutRedirectUrl);\n *             });\n *         };\n *   ]);\n */\n\nimport angular from 'vendor-bb-angular';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\n\nimport bbLoginLogoutNotifierService from './bb-login-logout-notifier.service';\n\nconst moduleKey = 'lib-bb-login-logout-notifier-ng';\n/**\n * @name userDataServiceKey\n * @type {string}\n * @description User data service name\n */\nexport const bbLoginLogoutNotifierServiceKey = `${moduleKey}:loginLogoutNotifierService`;\n\nexport default angular\n  .module(moduleKey, [eventBusModuleKey])\n  .factory(bbLoginLogoutNotifierServiceKey, [\n    eventBusKey,\n    '$log',\n    '$window',\n    /* into */\n    bbLoginLogoutNotifierService,\n  ])\n  .run([bbLoginLogoutNotifierServiceKey, (loginLogoutNotifier) => {\n    loginLogoutNotifier.init();\n  },\n  ])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-login-logout-notifier-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 33\n// module chunks = 9 15 16","/* global window, DOMException */\nimport {\n  NOTIFICATION_LOGOUT_EVENT,\n  LOCAL_STORAGE_KEY,\n} from './constants.js';\n\nexport default function (eventBus, $log, $window) {\n  const storage = $window.localStorage;\n  /**\n   * @name isLocalStorageAvailable\n   * @type {function}\n   * @returns {Boolean}\n   * @description Checks if local storage is available on current browser\n   */\n  const isLocalStorageAvailable = () => {\n    try {\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return e instanceof DOMException && (\n        // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n  };\n\n  /**\n   * @name setUserLoggedIn\n   * @type {function}\n   * @description The property IsLoggedIn should be set true\n   * if tuser log in\n   */\n  const setUserLoggedIn = () => (\n    isLocalStorageAvailable() ?\n    storage.setItem(LOCAL_STORAGE_KEY, true) : false\n  );\n\n  /**\n   * @name setUserLoggedOut\n   * @type {function}\n   * @description The property IsLoggedIn should be set false\n   * if tuser log out\n   */\n  const setUserLoggedOut = () => (\n    isLocalStorageAvailable() ?\n    storage.removeItem(LOCAL_STORAGE_KEY) : false\n  );\n\n  /**\n   * @name subscribeToUserLogout\n   * @type {function}\n   * @returns {Function} unsubscribe from the logout event\n   * @description listen for Logout event to execute whatever widgets\n   * needs after logout (Ex: refresh pages to logout from all pages)\n   */\n  const subscribeToUserLogout = (callback) => {\n    if (!isLocalStorageAvailable()) {\n      return false;\n    }\n\n    eventBus.subscribe(NOTIFICATION_LOGOUT_EVENT, callback);\n\n    return () => eventBus.unsubscribe(NOTIFICATION_LOGOUT_EVENT);\n  };\n\n  /**\n   * @name init\n   * @type {function}\n   * @description Binds 'storage' change event\n   **/\n  const init = () => {\n    if (!isLocalStorageAvailable()) {\n      return false;\n    }\n\n    return $window.addEventListener('storage', (evt) => {\n      // is user logged out\n      if (evt.key === LOCAL_STORAGE_KEY && JSON.parse(evt.newValue) !== true) {\n        eventBus.publish(NOTIFICATION_LOGOUT_EVENT);\n      }\n    });\n  };\n\n  return {\n    init,\n    setUserLoggedIn,\n    setUserLoggedOut,\n    subscribeToUserLogout,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-login-logout-notifier-ng/scripts/bb-login-logout-notifier.service.js","\n/**\n * @name NOTIFICATION_LOGOUT_EVENT\n *\n * @type {string}\n * @description\n * event name that should be triggered once user logout\n */\nexport const NOTIFICATION_LOGOUT_EVENT = 'bb.event.logout.notify';\n\n/**\n * @name LOCAL_STORAGE_KEY\n *\n * @type {string}\n * @description\n * The flag name which will be true when user are logged in\n */\nexport const LOCAL_STORAGE_KEY = 'bb.is.user.logged.in';\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-login-logout-notifier-ng/scripts/constants.js"],"sourceRoot":""}