{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6******","webpack:///webpack/bootstrap 110596ed019bd8a9816a?8523******","webpack:///./model-bb-transactions-ng/model.xml","webpack:///./model-bb-transactions-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"data-bb-transactions-http-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-payment-orders-http-ng\"","webpack:///external \"data-bb-categories-management-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///./model-bb-transactions-ng/scripts/transactions.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-transactions-ng/scripts/constants.js"],"names":["modelTransactionsModuleKey","modelTransactionsKey","BadRequestErrors","angular","module","transactionsDataModuleKey","productSummaryDataModuleKey","paymentOrdersDataModuleKey","categoriesManagementDataModuleKey","widgetModuleKey","bbStorageModuleKey","factory","transactionsDataKey","productSummaryDataKey","paymentOrdersDataKey","categoriesManagementDataKey","widgetKey","bbStorageServiceKey","Model","name","transactionsModel","transactionsData","productSummaryData","paymentOrdersData","transactionCategoriesData","widget","bbStorage","fromHttpOrBadRequestError","httpErrorResponse","modelError","status","errors","data","length","Object","assign","badRequestErrors","loadProductSummary","getProductsummary","then","setItem","BbStorageKeys","PRODUCT_SUMMARY","catch","e","getProducts","getItem","keys","filter","kind","products","reduce","extendedProducts","map","product","concat","getProductViewModel","accountHolderName","accountNumber","IBAN","BBAN","number","productNumber","processResponse","response","transaction","accountOfTransaction","find","id","arrangementId","totalCount","parseInt","headers","load","params","productId","arrangementsIds","Promise","resolve","getTransactions","getExportFileResource","format","ExportFormat","CSV","getTransactionsCsvUrl","findProductById","filterProductByVisibleArrangement","visible","getProductFromList","getFirstInstead","Array","isArray","selectedProducts","includes","firstFilteredProduct","defaultProduct","getSelectedProduct","all","PRODUCT_SELECTED","PRODUCTS_SELECTED","ids","getCurrentTransaction","TRANSACTION_SELECTED","storeTransactionAsCurrent","updateTransactionCategory","category","patchTransactionsRecord","getCurrencies","getPaymentOrdersCurrencies","code","getCategories","defaultCategoriesParams","getTransactionsEnumValues","getTransactionsEnumValuesRecord","attributeName","Preference","ERR_INVALID_ARR_ID","ERR_ARR_NOT_FOUND","ERR_INVALID_TRAN_BODY","ERR_INVALID_TRAN_PARAMS","ERR_TRAN_EXISTS","ERR_ARR_NO_PRIVILEGES","ERR_INVALID_ACCESS_GROUP_BODY","ERR_INVALID_USER_BODY","ERR_USER_NOT_FOUND","ERR_INVALID_PRIVILEGES_REQUESTED","ERR_INVALID_CHECK_SERIAL_NUMBER_VALUE","level"],"mappings":"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","file":"model-bb-transactions-ng/scripts/model-bb-transactions-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-transactions-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"data-bb-categories-management-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-transactions-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"data-bb-transactions-http-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-payment-orders-http-ng\", \"data-bb-categories-management-http-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-transactions-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-transactions-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"data-bb-categories-management-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-transactions-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"data-bb-transactions-http-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-payment-orders-http-ng\"], root[\"data-bb-categories-management-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_65__, __WEBPACK_EXTERNAL_MODULE_66__, __WEBPACK_EXTERNAL_MODULE_67__, __WEBPACK_EXTERNAL_MODULE_68__, __WEBPACK_EXTERNAL_MODULE_69__, __WEBPACK_EXTERNAL_MODULE_71__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 110596ed019bd8a9816a","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-transactions-ng/model.xml\n// module id = 0\n// module chunks = 7","/**\n * @module model-bb-transactions-ng\n *\n * @description\n * Transactions model module.\n *\n * @usage\n * import modelTransactionsModuleKey, {\n *   modelTransactionsKey,\n * } from 'model-bb-transactions-ng';\n *\n * angular.module('widget-bb-transactions-ng', [\n *   modelTransactionsModuleKey,\n * ])\n * .controller('TransactionsController', [\n *   modelTransactionsKey,\n *   ...,\n * ])\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport transactionsDataModuleKey, {\n  transactionsDataKey,\n} from 'data-bb-transactions-http-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport paymentOrdersDataModuleKey, {\n  paymentOrdersDataKey,\n} from 'data-bb-payment-orders-http-ng';\n\nimport categoriesManagementDataModuleKey, {\n  categoriesManagementDataKey,\n} from 'data-bb-categories-management-http-ng';\n\nimport bbStorageModuleKey, {\n  bbStorageServiceKey,\n} from 'lib-bb-storage-ng';\n\nimport Model from './transactions';\n\nimport { BadRequestErrors } from './constants';\n\nexport const modelTransactionsModuleKey = 'model-bb-transactions-ng';\nexport const modelTransactionsKey = 'model-bb-transactions-ng:model';\n\n/**\n * @name BadRequestErrors\n * @type {Object}\n *\n * @description\n * Additional errors thrown from the model\n */\nexport { BadRequestErrors };\n\n/**\n * @name default\n * @type {string}\n *\n * @description\n * Transactions Model\n */\nexport default angular\n  .module(modelTransactionsModuleKey, [\n    transactionsDataModuleKey,\n    productSummaryDataModuleKey,\n    paymentOrdersDataModuleKey,\n    categoriesManagementDataModuleKey,\n    widgetModuleKey,\n    bbStorageModuleKey,\n  ])\n\n  .factory(modelTransactionsKey, [\n    transactionsDataKey,\n    productSummaryDataKey,\n    paymentOrdersDataKey,\n    categoriesManagementDataKey,\n    widgetKey,\n    bbStorageServiceKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-transactions-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 63\n// module chunks = 7 8 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 64\n// module chunks = 7 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_65__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-transactions-http-ng\"\n// module id = 65\n// module chunks = 7","module.exports = __WEBPACK_EXTERNAL_MODULE_66__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 66\n// module chunks = 7","module.exports = __WEBPACK_EXTERNAL_MODULE_67__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-payment-orders-http-ng\"\n// module id = 67\n// module chunks = 7","module.exports = __WEBPACK_EXTERNAL_MODULE_68__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-categories-management-http-ng\"\n// module id = 68\n// module chunks = 7","module.exports = __WEBPACK_EXTERNAL_MODULE_69__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 69\n// module chunks = 7","/* eslint max-len: [\"error\", 100, { \"ignoreComments\": true }]*/\nimport { fromHttpError } from 'lib-bb-model-errors';\nimport { BbStorageKeys, defaultCategoriesParams, ExportFormat } from './constants';\n\n/**\n * @name transactionsModel\n * @returns {object}\n * @inner\n */\nexport default function transactionsModel(\n  transactionsData,\n  productSummaryData,\n  paymentOrdersData,\n  transactionCategoriesData,\n  widget,\n  bbStorage\n) {\n  /**\n   * @name transactionsModel#fromHttpOrBadRequestError\n   * @type {function}\n   * @inner\n   * @param {object} httpErrorResponse response error object\n   * @returns {module:lib-bb-model-errors.ModelError} Default `fromHttpError` result, which, in case\n   * the response status is 400 and the response data contains error information according to the\n   * proper S-SDK schema, is augmented with this extra error information.\n   *\n   * @description\n   * The exception that is thrown when there is a communication error with back-end.\n   */\n  const fromHttpOrBadRequestError = (httpErrorResponse) => {\n    const modelError = fromHttpError(httpErrorResponse);\n\n    if (httpErrorResponse.status === 400) {\n      const errors = httpErrorResponse.data.errors;\n      if (errors && errors.length) {\n        Object.assign(modelError, {\n          badRequestErrors: errors,\n        });\n      }\n    }\n\n    return modelError;\n  };\n\n  /**\n   * @name transactionsModel#loadProducts\n   * @type {function}\n   * @inner\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductKinds, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with ProductsKinds and TotalBalance.\n   *\n   * @description\n   * Load products.\n   */\n  const loadProductSummary = () => productSummaryData\n    .getProductsummary()\n    .then(({ data }) => {\n      bbStorage.setItem(BbStorageKeys.PRODUCT_SUMMARY, data);\n      return data;\n    })\n    .catch((e) => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name transactionsModel#getProducts\n   * @type {function}\n   * @inner\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductKinds, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to array with products.\n   *\n   * @description\n   * Get product list.\n   */\n  const getProducts = () => bbStorage.getItem(BbStorageKeys.PRODUCT_SUMMARY)\n    .then(data => (data || loadProductSummary()))\n    .then(data => Object.keys(data)\n      .filter(kind => data[kind].products && data[kind].products.length)\n      .reduce((products, kind) => {\n        const extendedProducts = data[kind].products\n          .map(product => Object.assign(product, { kind }));\n        return products.concat(extendedProducts);\n      }, []));\n\n  /**\n   * @name transactionsModel#getProductViewModel\n   * @inner\n   * @type {function}\n   * @param {module:model-bb-product-summary-ng.Product} product Product\n   * @returns {ProductViewModel} product view model\n   *\n   * @description\n   * Get product view model contains product name and product number.\n   */\n  const getProductViewModel = product => ({\n    accountHolderName: product.accountHolderName || product.name,\n    accountNumber: product.IBAN || product.BBAN || product.number || product.productNumber,\n  });\n\n  /**\n   * @name transactionsModel#processResponse\n   * @type {function}\n   * @inner\n   * @param {module:model-bb-product-summary-ng.Product} product Product\n   * @returns {Promise.<Array>} Processed transaction data.\n   *\n   * @description\n   * Process response of loading transaction list.\n   */\n  const processResponse = (response) => getProducts()\n    .then((products) => {\n      const data = response.data.map((transaction) => {\n        const accountOfTransaction = products.find(product =>\n          product.id === transaction.arrangementId);\n\n        if (accountOfTransaction) {\n          Object.assign(transaction, getProductViewModel(accountOfTransaction));\n        }\n\n        return transaction;\n      });\n\n      return {\n        totalCount: parseInt(response.headers('x-total-count'), 10) || 0,\n        data,\n      };\n    });\n\n  /**\n   * @name transactionsModel#load\n   * @type {function}\n   * @param {object} params Request parameters\n   * @returns {Promise.<TransactionItem[]>} List of transactions as a promise.\n   *\n   * @description\n   * Load transactions.\n   */\n  const load = (params) => {\n    if (!params.productId &&\n        !params.arrangementId &&\n        (!params.arrangementsIds || !params.arrangementsIds.length)) {\n      return new Promise((resolve) => resolve({\n        totalCount: 0,\n        data: [],\n      }));\n    }\n\n    return transactionsData.getTransactions(params)\n      .then(processResponse)\n      .catch(e => {\n        throw fromHttpOrBadRequestError(e);\n      });\n  };\n\n  /**\n   * @name transactions@getExportFileResource\n   * @type {function}\n   * @param {object} params Request parameters\n   * @param {string} format Export format\n   * @returns {string} URL to export file\n   *\n   * @description\n   * Compound URI by data module method and query parameters\n   */\n  const getExportFileResource = (params, format) => {\n    if (format === ExportFormat.CSV) {\n      return transactionsData.getTransactionsCsvUrl(params);\n    }\n\n    // fallback for unknown/undefined formats\n    return transactionsData.getTransactionsCsvUrl(params);\n  };\n\n  /**\n   * @name transactionsModel#getDefaultProduct\n   * @type {function}\n   * @inner\n   * @param {object} id Product ID\n   * @param {Product[]} products Products list\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product|null, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with default Product or null.\n   *\n   * @description\n   * Get default product.\n   */\n  const findProductById = (id, products) => products.find(product => product.id === id);\n\n  /**\n   * @name transactionsModel#filterProductByVisibleArrangement\n   * @type {function}\n   * @inner\n   * @param {Product[]} products Products list\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product[], module:lib-bb-model-errors.ModelError>}\n   * Returning array of filtered visible Products or empty array.\n   *\n   * @description\n   * Filter products list by visibility.\n   */\n  const filterProductByVisibleArrangement = (products) =>\n    products.filter(product => product.visible);\n\n  /**\n   * @name transactionsModel#getProductFromList\n   * @type {function}\n   * @inner\n   * @param {object} id Product ID or Products IDs\n   * @param {object} getFirstInstead Product ID\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Product/Products or null.\n   *\n   * @description\n   * Get product/products from list.\n   */\n  const getProductFromList = (id, getFirstInstead) => getProducts()\n    .then(products => {\n      if (Array.isArray(id)) {\n        // if there's no products but empty [], it will return all products' IDs\n        const selectedProducts = id.length > 0 ?\n          products.filter((product) => id.includes(product.id)) : products;\n\n        return selectedProducts;\n      }\n\n      const [firstFilteredProduct = null] = filterProductByVisibleArrangement(products);\n      const defaultProduct = getFirstInstead && firstFilteredProduct;\n      return id ? (findProductById(id, products) || defaultProduct) : defaultProduct;\n    });\n\n  /**\n   * @name transactionsModel#getSelectedProduct\n   * @type {function}\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product, module:lib-bb-model-errors.ModelError>}\n   * A Promise with Product\n   *\n   * @description\n   * Get current selected product\n   */\n  const getSelectedProduct = (getFirstInstead = true) =>\n    Promise.all([\n      bbStorage.getItem(BbStorageKeys.PRODUCT_SELECTED),\n      bbStorage.getItem(BbStorageKeys.PRODUCTS_SELECTED),\n    ]).then(([id, ids]) =>\n      getProductFromList(id || ids, getFirstInstead)\n    );\n\n  /**\n   * @name transactionsModel#getCurrentTransaction\n   * @type {function}\n   * @returns {object} Transaction data\n   *\n   * @description\n   * Tries to read the current transaction from sync preferences\n   */\n  const getCurrentTransaction = () => bbStorage.getItem(BbStorageKeys.TRANSACTION_SELECTED);\n\n  /**\n   * @name transactionsModel#storeTransactionAsCurrent\n   * @type {function}\n   * @param {object} transaction Transaction data\n   *\n   * @description\n   * Stores a given transaction as current in sync preferences\n   */\n  const storeTransactionAsCurrent = transaction =>\n    bbStorage.setItem(BbStorageKeys.TRANSACTION_SELECTED, transaction);\n\n  /**\n   * @name transactionsModel#updateTransactionCategory\n   * @type {function}\n   * @param {string} id Transaction identifier\n   * @param {string} arrangementId Related arrangement identifier\n   * @param {string} category Category name\n   * @returns {Promise.<boolean, module:lib-bb-model-errors.ModelError>}\n   * A Promise with Transaction item or error\n   *\n   * @description\n   * Updates the transaction's category\n   */\n  const updateTransactionCategory = (id, arrangementId, category) =>\n    transactionsData.patchTransactionsRecord([{ id, arrangementId, category }])\n      .then(Promise.resolve(true))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n\n  /**\n   * @name transactionsModel#getCurrencies\n   * @type {function}\n   * @returns {Promise.<object[]>} A Promise with response.\n   *\n   * @description\n   * Get available currencies.\n   */\n  const getCurrencies = () => paymentOrdersData\n    .getPaymentOrdersCurrencies()\n    // Convert currencies format to the format used in the widgets\n    .then(({ data }) => data.map(({ code }) => ({ name: code })))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name transactionsModel#getCategories\n   * @type {function}\n   * @param {object} params Request parameters\n   * @returns {Array.<module:data-bb-categories-management-http-ng.CategoriesManagement.Category>}\n   * categories array\n   *\n   * @description\n   * Request categories list\n   */\n  const getCategories = (params = defaultCategoriesParams) =>\n    transactionCategoriesData.getCategories(params)\n     .then(response => response.data)\n     .catch(httpErrorResponse => {\n       throw fromHttpError(httpErrorResponse);\n     });\n\n  /**\n   * @name transactionsModel#getTransactionsEnumValues\n   * @type {function}\n   * @param {object} params Request parameters\n   * @returns {Promise.<Array.<module:data-bb-transactions-http-ng.TransactionsData.DefaultValueGetResponse>, module:lib-bb-model-errors.ModelError>}\n   * A Promise with transactions enum values or error.\n   *\n   * @description\n   * Request transactions enum values\n   */\n  const getTransactionsEnumValues = (params = {}) =>\n    transactionsData.getTransactionsEnumValuesRecord(params.attributeName)\n      .then(response => response.data)\n      .catch(httpErrorResponse => {\n        throw fromHttpOrBadRequestError(httpErrorResponse);\n      });\n\n  /**\n   * @name transactionsModel\n   * @type {object}\n   */\n  return {\n    load,\n    getSelectedProduct,\n    getCurrentTransaction,\n    storeTransactionAsCurrent,\n    getCurrencies,\n    getExportFileResource,\n    updateTransactionCategory,\n    getCategories,\n    getTransactionsEnumValues,\n  };\n}\n\n/**\n * TransactionItem type definition\n * @typedef {Object} TransactionItem\n * @property {string} id Internally used unique identification of the transaction\n * @property {string} arrangementId Reference to the product to which the transaction belongs\n * @property {string} productId Reference to the product to which the transaction belongs\n * @property {string} reference A tag/label issued by the initiator of the transaction in order to be able\n * to refer to the respective transaction\n * @property {string} description Transaction description\n * @property {string} typeGroup Bank specific code of the group the transaaction type belangs to this to be\n * mapped to in integration\n * @property {string} type Bank specific code to be mapped to generic type in integration\n * @property {string} category Transaction category\n * @property {string} bookingDate The date the amount is posted to the balance of\n * an account from a book keeping perspective\n * @property {string} valueDate The date on which an amount posted to an account becomes interest bearing\n * @property {number} amount The amount of the transaction\n * @property {string} currency Currency code\n * @property {string} creditDebitIndicator Indicator if transaction is incoming our outgoing\n * @property {number} instructedAmount Only present if the transaction currency <> account currency\n * @property {string} instructedCurrency Currency code of instructed amount\n * @property {number} currencyExchangeRate The exchange rate (between both account and transaction currency)\n * that was used for the conversion. To be used if those currencies are not the same\n * @property {string} counterPartyName The name of the counterparty\n * @property {string} counterPartyAccountNumber The International Bank Account Number of the counterparty\n * @property {string} counterPartyBIC The BIC of the counterparty\n * @property {string} counterPartyCountry ISO Country code\n * @property {string} counterPartyBankName The bank name of the counterparty\n * @property {string} creditorId Id of the creditor (Only for SEPA DD)\n * @property {string} mandateReference Mandate Reference (Only for SEPA DD)\n */\n\n/**\n * Product view model type definition\n * @typedef {Object} ProductViewModel\n * @property {string} productName name of the Product\n * @property {string} productNumber number of the Product\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-transactions-ng/scripts/transactions.js","module.exports = __WEBPACK_EXTERNAL_MODULE_71__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 71\n// module chunks = 7 9 10","/**\n * Widget preferences enum\n * @type {object}\n */\nexport const Preference = {};\n\n/**\n * bbStorage keys enum\n * @type {object}\n */\nexport const BbStorageKeys = {\n  PRODUCT_SELECTED: 'bb.product.selected',\n  PRODUCTS_SELECTED: 'bb.products.selected',\n  PRODUCT_SUMMARY: 'bb.product.summary.data',\n  TRANSACTION_SELECTED: 'bb.transaction.selected',\n};\n\n/**\n * Bad request error keys enum\n * @type {object}\n */\nexport const BadRequestErrors = {\n  ERR_INVALID_ARR_ID: 'transactions.api.invalidId.arrangement',\n  ERR_ARR_NOT_FOUND: 'transactions.api.notFound.arrangement',\n  ERR_INVALID_TRAN_BODY: 'transactions.api.invalidBody.transaction',\n  ERR_INVALID_TRAN_PARAMS: 'transactions.api.invalidParameters.transaction',\n  ERR_TRAN_EXISTS: 'transactions.api.alreadyExists.transaction',\n  ERR_ARR_NO_PRIVILEGES: 'transactions.api.noPrivilege.arrangement',\n  ERR_INVALID_ACCESS_GROUP_BODY: 'transactions.api.invalidBody.accessGroup',\n  ERR_INVALID_USER_BODY: 'transactions.api.invalidBody.user',\n  ERR_USER_NOT_FOUND: 'transactions.api.notFound.user',\n  ERR_INVALID_PRIVILEGES_REQUESTED: 'transactions.api.invalidPrivileges.arrangement',\n  ERR_INVALID_CHECK_SERIAL_NUMBER_VALUE: 'transactions.api.invalid.fromCheckSerialNumber.value',\n};\n\n/**\n * Default parameters for get categories request\n * @type {object}\n */\nexport const defaultCategoriesParams = {\n  level: 'ALL',\n};\n\n/**\n * Export format enum\n * @type {object}\n */\nexport const ExportFormat = {\n  CSV: 'csv',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-transactions-ng/scripts/constants.js"],"sourceRoot":""}