{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f349473844a5947560cb","webpack:///./ext-bb-audit-query-ng/model.xml","webpack:///./ext-bb-audit-query-ng/scripts/index.js","webpack:///./ext-bb-audit-query-ng/scripts/helpers.js","webpack:///./ext-bb-audit-query-ng/scripts/events.js","webpack:///./ext-bb-audit-query-ng/scripts/hooks.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"vendor-bb-angular-ng-aria\"","webpack:///external \"ui-bb-substitute-error-ng\"","webpack:///external \"vendor-bb-uib-datepicker\"","webpack:///external \"vendor-bb-uib-datepicker-popup\"","webpack:///external \"vendor-bb-uib-tooltip\"","webpack:///external \"ui-bb-i18n-ng\"","webpack:///external \"vendor-bb-uib-dropdown\"","webpack:///external \"ui-bb-loading-overlay-ng\"","webpack:///external \"ui-bb-paginator-ng\"","webpack:///external \"ui-bb-modal-ng\""],"names":["default","dependencyKeys","ngAriaModuleKey","i18nKey","uiSubstituteErrorKey","uibDatepickerKey","uibDatepickerPopupKey","uibTooltipKey","uibDropdownKey","uiBbLoadingOverlayKey","uiBbPaginatorKey","uiBbModalKey","clearAllControls","templates","form","table","clearModelValue","model","Object","assign","value","clearModelValues","values","forEach","controlState","cs","startDatepicker","endDatepicker","user","dropdownServiceAgreement","dropdownLegalEntity","dropdownCategory","dropdownType","dropdownStatus","Helpers","auditQueryService","auditFiltersService","$filter","router","modelValue","length","set","controlId","propertyId","newValue","control","openDatePicker","current","datepickerId","toDisplayObj","name","toOptions","labelKey","rawOptions","allOption","otherOptions","map","opt","auditMessageTableHeader","auditMessageTableRow","category","type","action","time","description","auditDetail","message","fixedLabels","label","fixedValues","eventLabels","data","event","key","eventValues","allLabels","concat","allValues","index","setAuditDetail","state","auditMessages","currentMessageDetails","currentMessageIndex","openStartDatepicker","openEndDatepicker","clearAll","isAnyControlSet","exportToCsv","headerParams","accept","queryForAuditLogMessagesDownload","categories","eventCategories","getCategoryNames","types","selectedCategory","getTypeNames","status","selectedType","getStatusNames","users","serviceAgreements","legalEntities","isTypeDisabled","disabled","isStatusDisabled","isLegalEntityDisabled","serviceAgreementChanged","isExportToCsvDisabled","totalCount","csvMaxSize","csvExportBtnText","csvIsLoading","template","getRoute","toggleAuditDetailModal","showAuditDetailModal","undefined","setNextAuditDetail","nextIndex","setPreviousAuditDetail","previousIndex","isDisabledPreviousAuditDetail","isDisabledNextAuditDetail","notifications","notifyAlert","defaultDpOptions","dateDisabled","formatYear","maxDate","Date","now","startingDay","datepickerMode","formats","format","altInputFormat","options","isOpen","altFormats","currentPage","transformAuditMessage","username","eventCategory","objectType","eventAction","timestamp","eventDescription","eventData","setState","newQuery","clear","newControlState","angular","copy"],"mappings":"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","file":"ext-bb-audit-query-ng/scripts/ext-bb-audit-query-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-substitute-error-ng\"), require(\"vendor-bb-uib-datepicker\"), require(\"vendor-bb-uib-datepicker-popup\"), require(\"vendor-bb-uib-tooltip\"), require(\"ui-bb-i18n-ng\"), require(\"vendor-bb-uib-dropdown\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-paginator-ng\"), require(\"ui-bb-modal-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-bb-audit-query-ng\", [\"vendor-bb-angular\", \"vendor-bb-angular-ng-aria\", \"ui-bb-substitute-error-ng\", \"vendor-bb-uib-datepicker\", \"vendor-bb-uib-datepicker-popup\", \"vendor-bb-uib-tooltip\", \"ui-bb-i18n-ng\", \"vendor-bb-uib-dropdown\", \"ui-bb-loading-overlay-ng\", \"ui-bb-paginator-ng\", \"ui-bb-modal-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-bb-audit-query-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-substitute-error-ng\"), require(\"vendor-bb-uib-datepicker\"), require(\"vendor-bb-uib-datepicker-popup\"), require(\"vendor-bb-uib-tooltip\"), require(\"ui-bb-i18n-ng\"), require(\"vendor-bb-uib-dropdown\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-paginator-ng\"), require(\"ui-bb-modal-ng\"));\n\telse\n\t\troot[\"ext-bb-audit-query-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"vendor-bb-angular-ng-aria\"], root[\"ui-bb-substitute-error-ng\"], root[\"vendor-bb-uib-datepicker\"], root[\"vendor-bb-uib-datepicker-popup\"], root[\"vendor-bb-uib-tooltip\"], root[\"ui-bb-i18n-ng\"], root[\"vendor-bb-uib-dropdown\"], root[\"ui-bb-loading-overlay-ng\"], root[\"ui-bb-paginator-ng\"], root[\"ui-bb-modal-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f349473844a5947560cb","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-bb-audit-query-ng/model.xml\n// module id = 0\n// module chunks = 0","/**\n * @module ext-bb-audit-query-ng\n *\n * @description\n * Default extension for widget-bb-audit-query-ng\n *\n * @requires vendor-bb-angular-ng-aria\n * @extends module:widget-bb-audit-query-ng.Extension\n */\nimport ngAriaModuleKey from 'vendor-bb-angular-ng-aria';\nimport uiSubstituteErrorKey from 'ui-bb-substitute-error-ng';\nimport uibDatepickerKey from 'vendor-bb-uib-datepicker';\nimport uibDatepickerPopupKey from 'vendor-bb-uib-datepicker-popup';\nimport uibTooltipKey from 'vendor-bb-uib-tooltip';\nimport i18nKey from 'ui-bb-i18n-ng';\nimport uibDropdownKey from 'vendor-bb-uib-dropdown';\nimport uiBbLoadingOverlayKey from 'ui-bb-loading-overlay-ng';\nimport uiBbPaginatorKey from 'ui-bb-paginator-ng';\nimport uiBbModalKey from 'ui-bb-modal-ng';\n\nexport const dependencyKeys = [\n  ngAriaModuleKey,\n  i18nKey,\n  uiSubstituteErrorKey,\n  uibDatepickerKey,\n  uibDatepickerPopupKey,\n  uibTooltipKey,\n  uibDropdownKey,\n  uiBbLoadingOverlayKey,\n  uiBbPaginatorKey,\n  uiBbModalKey,\n];\n\n/**\n * @name helpers\n * @type {module:lib-bb-extension-helpers-ng.ExtensionHelpers}\n */\nexport { default as helpers } from './helpers';\n\n/**\n * @name events\n * @type {module:lib-bb-extension-events-ng.ExtensionEvents}\n */\nexport { default as events } from './events';\n\nexport { default as hooks } from './hooks';\n\n/**\n * @typedef ViewState\n * @type {object}\n * @property {Array<AuditMessage>} auditMessages\n * @property {?string} auditMessageError The most recent error from fetching a list of audit msgs\n * @property {bool} isLoading\n */\n\n/**\n * @typedef AuditMessage\n * @type {object}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-audit-query-ng/scripts/index.js","const templates = {\n  form: '#widget-bb-audit-query-ng/form.html',\n  table: '#widget-bb-audit-query-ng/table.html',\n};\n\nconst clearModelValue = ({ model }) => {\n  if (model) {\n    Object.assign(model, { value: '' });\n  }\n};\n\nconst clearModelValues = (...values) => {\n  values.forEach(value => clearModelValue(value));\n};\n\n/**\n * @name clearAllControls\n * @type {function}\n * @description clear all models in the controlState\n * @param {ViewState} controlState The current cloned state of the controls\n * @return {ViewState} The updated control state\n */\nexport function clearAllControls(controlState) {\n  const cs = controlState;\n  cs.startDatepicker.model = cs.endDatepicker.model = null;\n  cs.user.model = null;\n  clearModelValues(cs.dropdownServiceAgreement,\n    cs.dropdownLegalEntity,\n    cs.dropdownCategory,\n    cs.dropdownType,\n    cs.dropdownStatus);\n  return cs;\n}\n\n/**\n * @constructor Helpers\n * @param {Object} obj - An object.\n * @param {AuditQueryService} obj.auditQueryService\n * @param {AuditFiltersService} obj.auditFiltersService\n * @param {Object} obj.$filter - Angular filters\n * @param {Router} obj.router\n */\nexport default function Helpers({\n  auditQueryService,\n  auditFiltersService,\n  $filter,\n  router,\n}) {\n  const modelValue = ({ model }) => model && model.value && model.value.length;\n\n  // set for state for control\n  const set = (controlState, controlId, propertyId, newValue) => {\n    const control = controlState[controlId];\n    control[propertyId] = newValue;\n  };\n\n  const openDatePicker = (current, datepickerId) => set(current, datepickerId, 'isOpen', true);\n\n  const toDisplayObj = (name, value) => ({ name, value });\n\n  const toOptions = (labelKey, rawOptions = []) => {\n    const allOption = toDisplayObj($filter('i18n')(labelKey), '');\n    const otherOptions = rawOptions.map(opt => toDisplayObj(opt, opt));\n    return [allOption, ...otherOptions];\n  };\n\n  /**\n   * @name Helpers#auditMessageTableHeader\n   * @inner\n   * @type {string[]}\n   * @description list of header label translation keys for audit log table\n  */\n  const auditMessageTableHeader = [\n    'table.header.user',\n    'table.header.category',\n    'table.header.type',\n    'table.header.action',\n    'table.header.time',\n    'table.header.description'];\n\n  /**\n   * @name Helpers#auditMessageTableRow\n   * @inner\n   * @type {function}\n   * @description get list of message values for audit log table\n   * @param {Object} auditLog The audit log message for the current row in the table\n   * @return {string[]}\n   */\n  const auditMessageTableRow = ({ user, category, type, action, time, description }) => [\n    user,\n    category,\n    type,\n    action,\n    $filter('date')(time, 'medium'), // todo establish required date/time format\n    description,\n  ];\n\n  /**\n   * @name Helpers#auditDetail\n   * @inner\n   * @type {function}\n   * @description get labels and values for event details\n   * @param {Object} message The audit log message for the current row in the table\n   * @return {Object[]}\n   */\n  const auditDetail = (message) => {\n    const fixedLabels = auditMessageTableHeader.map(label => $filter('i18n')(label));\n    const fixedValues = auditMessageTableRow(message);\n    const eventLabels = message.data ? message.data.map(event => event.key) : [];\n    const eventValues = message.data ? message.data.map(event => event.value) : [];\n    const allLabels = fixedLabels.concat(eventLabels);\n    const allValues = fixedValues.concat(eventValues);\n\n    return allLabels.map((label, index) => ({ label, value: allValues[index] }));\n  };\n\n\n  /**\n   * @name Helpers#setAuditDetail\n   * @inner\n   * @type {function}\n   * @description set the indexed message details (if any) into state\n   * @param {ViewState} state The current state of the view model\n   * @param {Number} index The index of the message to be displayed\n   */\n  const setAuditDetail = (state, index) => {\n    const message = state.auditMessages[index];\n    if (message) {\n      Object.assign(state, {\n        currentMessageDetails: auditDetail(message),\n        currentMessageIndex: index,\n      });\n    }\n  };\n\n  /**\n   * @name Helpers\n   * @type {Object}\n   */\n  return {\n    /**\n     * @name Helpers#openStartDatepicker\n     * @type {function}\n     * @description update controller state to trigger opening the start-date datepicker\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {void}\n     */\n    openStartDatepicker: controlState => openDatePicker(controlState, 'startDatepicker'),\n    /**\n     * @name Helpers#openEndDatepicker\n     * @type {function}\n     * @description update controller state to trigger opening the end-date datepicker\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {void}\n     */\n    openEndDatepicker: controlState => openDatePicker(controlState, 'endDatepicker'),\n    /**\n     * @name Helpers#clearAll\n     * @type {function}\n     * @description update controller state to clear all models\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {void}\n     */\n    clearAll: controlState => {\n      clearAllControls(controlState);\n    },\n    /**\n     * @name Helpers#clearModelValues\n     * @type {function}\n     * @description clear the values in the models\n     * @param {Object[]} values the values whose models to clear\n     * @return {void}\n     */\n    clearModelValues,\n    /**\n     * @name Helpers#isAnyControlSet\n     * @type {function}\n     * @description return true if any control has a state\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {boolean}\n     */\n    isAnyControlSet: controlState =>\n      controlState.startDatepicker.model ||\n      controlState.endDatepicker.model ||\n      controlState.user.model ||\n      modelValue(controlState.dropdownServiceAgreement) ||\n      modelValue(controlState.dropdownLegalEntity) ||\n      modelValue(controlState.dropdownCategory) ||\n      modelValue(controlState.dropdownType) ||\n      modelValue(controlState.dropdownStatus),\n    /**\n     * @name Helpers#exportToCsv\n     * @type {function}\n     * @description query for audit messages and download the CSV format file\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {void}\n     */\n    exportToCsv: (controlState) => {\n      const headerParams = { accept: 'text/csv' };\n      auditQueryService.queryForAuditLogMessagesDownload(controlState, headerParams);\n    },\n    /**\n     * @name Helpers#categories\n     * @type {function}\n     * @description get categories\n     * @param {module:lib-bb-state-container-ng.StateContainer} state\n     * @param {module:model-bb-audit-filters-service-ng.ParsedEventCategories} state.eventCategories\n     * @return {string[]} categories\n     */\n    categories: ({ eventCategories }) => toOptions(\n      'dropdown.placeholder.category', eventCategories\n        ? auditFiltersService.getCategoryNames(eventCategories)\n        : []),\n\n    /**\n     * @name Helpers#categories\n     * @type {function}\n     * @description get types\n     * @param {module:lib-bb-state-container-ng.StateContainer} state\n     * @param {module:model-bb-audit-filters-service-ng.ParsedEventCategories} state.eventCategories\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {string[]} types\n     */\n    types: ({ eventCategories }, controlState) => {\n      const selectedCategory = controlState.dropdownCategory.model\n        ? controlState.dropdownCategory.model.value\n        : '';\n\n      return toOptions(\n        'dropdown.placeholder.type',\n        selectedCategory.length\n          ? auditFiltersService.getTypeNames(eventCategories, selectedCategory)\n          : []);\n    },\n    /**\n     * @name Helpers#status\n     * @type {function}\n     * @description get status\n     * @param {module:lib-bb-state-container-ng.StateContainer} state\n     * @param {module:model-bb-audit-filters-service-ng.ParsedEventCategories} state.eventCategories\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {string[]} status\n     */\n    status: ({ eventCategories }, controlState) => {\n      const selectedCategory = controlState.dropdownCategory.model\n        ? controlState.dropdownCategory.model.value\n        : '';\n      const selectedType = controlState.dropdownType.model\n        ? controlState.dropdownType.model.value\n        : '';\n\n      return toOptions(\n        'dropdown.placeholder.status',\n        selectedType.length\n          ? auditFiltersService.getStatusNames(eventCategories, selectedCategory, selectedType)\n          : []);\n    },\n    /**\n     * @name Helpers#users\n     * @type {function}\n     * @description get users\n     * @return {Array<{name, value}>} users\n     */\n    users: () =>\n      toOptions('dropdown.users.all-users', auditQueryService.users()),\n    /**\n     * @name Helpers#serviceAgreements\n     * @type {function}\n     * @description get serviceAgreements\n     * @param {ViewState} viewState the current view state\n     * @param {Array} viewState.serviceAgreements list of service agreements\n     *\n     * @return {Array<{name, value}>} serviceAgreements\n     */\n    serviceAgreements: ({ serviceAgreements }) => (toOptions(\n      'dropdown.service-agreement.all-service-agreements',\n      serviceAgreements)),\n    /**\n     * @name Helpers#legalEntities\n     * @type {function}\n     * @description get legalEntities\n     * @param {ViewState} viewState the current view state\n     * @param {Array} viewState.serviceAgreements list of service agreements\n     * @return {Array<{name, value}>} legalEntities\n     */\n    legalEntities: ({ legalEntities }) =>\n      toOptions(\n        'dropdown.legal-entity.all-legal-entities',\n        legalEntities),\n    /**\n     * @name Helpers#auditMessageTableHeader\n     * @type {string[]}\n     * @description list of header label translation keys for audit log table\n     */\n    auditMessageTableHeader,\n    /**\n     * @name Helpers#auditMessageTableRow\n     * @type {function}\n     * @description get list of message values for audit log table\n     * @param {Object} auditLog The audit log message for the current row in the table\n     * @return {string[]}\n     */\n    auditMessageTableRow,\n    /**\n     * @name Helpers#isTypeDisabled\n     * @type {function}\n     * @description return true if type dropdown should be disabled\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {boolean}\n     */\n    isTypeDisabled: controlState =>\n      controlState.dropdownType.disabled ||\n      !modelValue(controlState.dropdownCategory),\n    /**\n     * @name Helpers#isStatusDisabled\n     * @type {function}\n     * @description return true if status dropdown should be disabled\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {boolean}\n     */\n    isStatusDisabled: controlState =>\n      controlState.dropdownStatus.disabled ||\n      !modelValue(controlState.dropdownCategory) ||\n      !modelValue(controlState.dropdownType),\n    /**\n     * @name Helpers#isLegalEntityDisabled\n     * @type {function}\n     * @description return true if legal entity dropdown should be disabled\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {boolean}\n     */\n    isLegalEntityDisabled: controlState =>\n      controlState.dropdownLegalEntity.disabled ||\n      !modelValue(controlState.dropdownServiceAgreement),\n    /**\n     * @name Helpers#serviceAgreementChanged\n     * @type {function}\n     * @description clear dependent legal entity dropdown when service agreement changes\n     * @param {ViewState} controlState The current cloned state of the view model\n     * @return {boolean}\n     */\n    serviceAgreementChanged: controlState => clearModelValue(controlState.dropdownLegalEntity),\n    /**\n     * @name Helpers#isExportToCsvDisabled\n     * @type {function}\n     * @description return whether the export to csv is disabled\n     * @param {ViewState} viewState the current view state\n     * @param {Number} viewState.totalCount total amount of audit results\n     * @param {Number} viewState.csvMaxSize max exportable CSV size\n     * @return {boolean}\n     */\n    isExportToCsvDisabled: ({ totalCount, csvMaxSize }) => totalCount > csvMaxSize,\n    /**\n     * @name Helpers#csvExportState\n     * @type {function}\n     * @description returns i18n string depending on export to csv loading state\n     * @return {string}\n     */\n    csvExportBtnText: (csvIsLoading) => (csvIsLoading\n      ? 'button.label.export-to-csv-loading'\n      : 'button.label.export-to-csv'),\n    /**\n     * @name Helpers#template\n     * @type {function}\n     * @description returns a string of the template matching the current route\n     * @return {string}\n     */\n    template: () => templates[router.getRoute()],\n    /**\n     * @name Helpers#auditDetail\n     * @type {function}\n     * @description get labels and values for event details\n     * @param {Object} message The audit log message for the current row in the table\n     * @return {Object[]}\n     */\n    auditDetail,\n    /**\n     * @name Helpers#toggleAuditDetailModal\n     * @type {function}\n     * @description toggle state of event details modal.\n     *  Update state with current message and current index\n     * @param {ViewState} state The current state of the view model\n     * @param {Object} message The audit log message for the current row in the table\n     * @param {Number} index The index of the current message\n     */\n    toggleAuditDetailModal: (state, message, index) =>\n      Object.assign(state, {\n        showAuditDetailModal: !state.showAuditDetailModal,\n        currentMessageDetails: message ? auditDetail(message) : undefined,\n        currentMessageIndex: index,\n      }),\n    /**\n     * @name Helpers#setNextAuditDetail\n     * @type {function}\n     * @description set the next message details (if any) into state\n     * @param {ViewState} state The current state of the view model\n     */\n    setNextAuditDetail(state) {\n      const nextIndex = state.currentMessageIndex + 1;\n      setAuditDetail(state, nextIndex);\n    },\n\n    /**\n     * @name Helpers#setPreviousAuditDetail\n     * @type {function}\n     * @description set the previous message details (if any) into state\n     * @param {ViewState} state The current state of the view model\n     */\n    setPreviousAuditDetail(state) {\n      const previousIndex = state.currentMessageIndex - 1;\n      setAuditDetail(state, previousIndex);\n    },\n\n    /**\n     * @name Helpers#isDisabledPreviousAuditDetail\n     * @type {function}\n     * @description return true if no previous message\n     * @param {ViewState} state The current state of the view model\n     */\n    isDisabledPreviousAuditDetail(state) {\n      const previousIndex = state.currentMessageIndex - 1;\n      return !state.auditMessages[previousIndex];\n    },\n\n    /**\n     * @name Helpers#isDisabledNextAuditDetail\n     * @type {function}\n     * @description return true if no next message\n     * @param {ViewState} state The current state of the view model\n     */\n    isDisabledNextAuditDetail(state) {\n      const nextIndex = state.currentMessageIndex + 1;\n      return !state.auditMessages[nextIndex];\n    },\n  };\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-audit-query-ng/scripts/helpers.js","/**\n * @constructor Events\n * @param {Object} obj - An object.\n * @param {notifications} obj.notifications\n * @param {notifications} obj.$filter\n */\nexport default ({ notifications, $filter }) => ({\n  'model-bb-audit-query.query.failed': () => {\n    notifications.notifyAlert($filter('i18n')('notification.query.failed'));\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-audit-query-ng/scripts/events.js","import angular from 'vendor-bb-angular';\nimport { clearAllControls } from './helpers';\n\nconst defaultDpOptions = {\n  dateDisabled: false,\n  formatYear: 'yy',\n  maxDate: new Date(Date.now()),\n  startingDay: 1,\n  datepickerMode: 'day',\n};\n\nconst formats =\n  [\n    'dd/MM/yyyy',\n    'dd-MMMM-yyyy',\n    'yyyy/MM/dd',\n    'dd.MM.yyyy',\n    'shortDate',\n  ];\n\nconst format = formats[0];\nconst altInputFormat = 'M!/d!/yyyy';\n\n// export to test\nexport const controlState = {\n  startDatepicker: {\n    format,\n    options: defaultDpOptions,\n    isOpen: false,\n    model: null,\n    altFormats: [altInputFormat],\n  },\n  endDatepicker: {\n    format,\n    options: defaultDpOptions,\n    isOpen: false,\n    model: null,\n    altFormats: [altInputFormat],\n  },\n  dropdownServiceAgreement: {\n    model: null,\n    disabled: false,\n  },\n  dropdownLegalEntity: {\n    model: null,\n    disabled: false,\n  },\n  user: {\n    model: null,\n    disabled: false,\n  },\n  dropdownCategory: {\n    model: null,\n    disabled: false,\n  },\n  dropdownType: {\n    model: null,\n    disabled: false,\n  },\n  dropdownStatus: {\n    model: null,\n    disabled: false,\n  },\n  currentPage: 1,\n};\n\n/**\n * @constructor Hooks\n */\nexport default {\n  /**\n   * @name Hooks#transformAuditMessage\n   * @type {function}\n   * @description Perform any transformations required to prepare the AuditMessage item for display\n   * @param {module:model-bb-audit-query-ng.AuditMessage} auditMessage\n   * @return {Object} transformed message\n   */\n  transformAuditMessage: ({\n    username,\n    eventCategory,\n    objectType,\n    eventAction,\n    timestamp,\n    eventDescription,\n    eventData,\n  }) => ({\n    user: username,\n    category: eventCategory,\n    type: objectType,\n    action: eventAction,\n    time: timestamp,\n    description: eventDescription,\n    data: eventData,\n  }),\n\n  // This may not be the correct architecture approach to\n  // decoupling widget and extension state. Update when correct\n  // approach is clear.\n\n  /**\n   * @name Hooks#setState\n   * @type {function}\n   * @description add any state required by extension\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  setState(current) {\n    return {\n      ...current,\n      controlState,\n    };\n  },\n\n  /**\n   * @name Hooks#newQuery\n   * @type {function}\n   * @description extension specific changes to state\n   * @param {ViewState} current The current state of the view model\n   * @param {Boolean} [clear] Option to clear the form values to initial state\n   * @return {ViewState} The new state of the view model\n   */\n  newQuery(current, clear) {\n    const newControlState = clear\n      ? clearAllControls(angular.copy(current.controlState))\n      : current.controlState;\n\n    return {\n      ...current,\n      controlState: newControlState,\n    };\n  },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-audit-query-ng/scripts/hooks.js","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-aria\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-substitute-error-ng\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-datepicker\"\n// module id = 8\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-datepicker-popup\"\n// module id = 9\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-tooltip\"\n// module id = 10\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-dropdown\"\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-overlay-ng\"\n// module id = 13\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-paginator-ng\"\n// module id = 14\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-modal-ng\"\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}