{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap baf8dda326c89b15c708","webpack:///./fe-dist/http-ng/data-bb-categories-management-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-categories-management-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-categories-management-http-ng/scripts/data-bb-categories-management-http.js"],"names":["categoriesManagementDataModuleKey","categoriesManagementDataKey","ng","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","postCategoriesRecord","url","method","then","catch","err","getCategories","params","getCategoriesRecord","id","deleteCategoriesRecord","putCategoriesRecord","schemas"],"mappings":"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","file":"data-bb-categories-management-http-ng/scripts/data-bb-categories-management-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-categories-management-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-categories-management-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-categories-management-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap baf8dda326c89b15c708","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-categories-management-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-categories-management-http-ng\n *\n * @description A data module for accessing the Categories Management REST API.\n *\n * @returns {String} `data-bb-categories-management-http-ng`\n * @example\n * import categoriesManagementDataModuleKey, {\n *   categoriesManagementDataKey,\n * } from 'data-bb-categories-management-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport categoriesManagementData from './data-bb-categories-management-http';\n\nconst categoriesManagementDataModuleKey = 'data-bb-categories-management-http-ng';\n/**\n * @name categoriesManagementDataKey\n * @type {string}\n * @description Angular dependency injection key for the CategoriesManagementData service\n */\nexport const categoriesManagementDataKey = 'data-bb-categories-management-http-ng:categoriesManagementData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(categoriesManagementDataModuleKey, [])\n  \n  /**\n   * @constructor CategoriesManagementData\n   * @type {object}\n   *\n   * @description Public api for data-bb-categories-management-http-ng service\n   *\n   */\n  .provider(categoriesManagementDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name CategoriesManagementDataProvider\n     * @type {object}\n     * @ngkey data-bb-categories-management-http-ng:categoriesManagementDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-categories-management-http-ng:categoriesManagementDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-categories-management-http-ng:categoriesManagementDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name CategoriesManagementDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name CategoriesManagementDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       categoriesManagementData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-categories-management-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n  definedTypes['CategoriesManagementData.Category-UPDATE'] = {\"properties\":{\"categoryId\":{\"type\":\"integer\",\"required\":true},\"transactionId\":{\"type\":\"string\",\"required\":false},\"categoryName\":{\"type\":\"string\",\"required\":true},\"iconLocation\":{\"type\":\"string\",\"required\":false},\"categoryType\":{\"type\":\"string\",\"required\":true},\"parentId\":{\"type\":\"integer\",\"required\":false},\"subCategories\":{\"type\":\"array\",\"items\":{\"properties\":{\"categoryId\":{\"type\":\"integer\",\"required\":true},\"transactionId\":{\"type\":\"string\",\"required\":false},\"categoryName\":{\"type\":\"string\",\"required\":true},\"iconLocation\":{\"type\":\"string\",\"required\":false},\"categoryType\":{\"type\":\"string\",\"required\":true},\"parentId\":{\"type\":\"integer\",\"required\":false},\"subCategories\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false}}},\"required\":false}}};\n  \n  definedTypes['CategoriesManagementData.Category-ITEM'] = {\"properties\":{\"categoryId\":{\"type\":\"integer\",\"required\":true},\"transactionId\":{\"type\":\"string\",\"required\":false},\"categoryName\":{\"type\":\"string\",\"required\":true},\"iconLocation\":{\"type\":\"string\",\"required\":false},\"categoryType\":{\"type\":\"string\",\"required\":true},\"parentId\":{\"type\":\"integer\",\"required\":false},\"subCategories\":{\"type\":\"array\",\"items\":{\"properties\":{\"categoryId\":{\"type\":\"integer\",\"required\":true},\"transactionId\":{\"type\":\"string\",\"required\":false},\"categoryName\":{\"type\":\"string\",\"required\":true},\"iconLocation\":{\"type\":\"string\",\"required\":false},\"categoryType\":{\"type\":\"string\",\"required\":true},\"parentId\":{\"type\":\"integer\",\"required\":false},\"subCategories\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false}}},\"required\":false}}};\n  \n  definedTypes['CategoriesManagementData.Category-LIST'] = {\"type\":\"array\",\"items\":{\"properties\":{\"categoryId\":{\"type\":\"integer\",\"required\":true},\"transactionId\":{\"type\":\"string\",\"required\":false},\"categoryName\":{\"type\":\"string\",\"required\":true},\"iconLocation\":{\"type\":\"string\",\"required\":false},\"categoryType\":{\"type\":\"string\",\"required\":true},\"parentId\":{\"type\":\"integer\",\"required\":false},\"subCategories\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false}}}};\n  \n  definedTypes['CategoriesManagementData.Category-NOT-FOUND'] = {\"properties\":{\"message\":{\"type\":\"string\",\"required\":true},\"errors\":{\"type\":\"array\",\"items\":{\"properties\":{\"message\":{\"type\":\"string\",\"required\":false},\"key\":{\"type\":\"string\",\"required\":false},\"context\":{\"type\":\"object\",\"properties\":{},\"required\":false}}},\"required\":false}}};\n  \n  definedTypes['CategoriesManagementData.CategoryId'] = {\"properties\":{\"id\":{\"type\":\"integer\",\"required\":true}}};\n  \n\n  \n  /**\n   * @typedef CategoriesManagementData.Category-ITEM\n   * @type {Object}\n   * @property {Integer} categoryId Primary Key Internal Category Id\n   * @property {?String} transactionId Internal transaction category, to be used when updating a specific category\n   * @property {String} categoryName backbase specific category names mapped from external category\n   * @property {?String} iconLocation\n   * @property {String} categoryType Specific code of the group the category type belongs to this to be mapped to in integration\n   * @property {?Integer} parentId Parent category Id\n   * @property {?Array.<CategoriesManagementData.CategoryITEM>} subCategories\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef CategoriesManagementData.Category-LIST\n   * @type {Array.<CategoriesManagementData.CategoryITEM>}\n   */\n  \n  /**\n   * @typedef CategoriesManagementData.Category-NOT-FOUND\n   * @type {Object}\n   * @property {String} message Any further information\n   * @property {?Array.<ErrorItem>} errors Detailed error information\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef CategoriesManagementData.Category-UPDATE\n   * @type {Object}\n   * @property {Integer} categoryId Primary Key Internal Category Id\n   * @property {?String} transactionId Internal transaction category, to be used when updating a specific category\n   * @property {String} categoryName backbase specific category names mapped from external category\n   * @property {?String} iconLocation\n   * @property {String} categoryType Specific code of the group the category type belongs to this to be mapped to in integration\n   * @property {?Integer} parentId Parent category Id\n   * @property {?Array.<CategoriesManagementData.CategoryITEM>} subCategories\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef CategoriesManagementData.CategoryITEM\n   * @type {Object}\n   * @property {Integer} categoryId Primary Key Internal Category Id\n   * @property {?String} transactionId Internal transaction category, to be used when updating a specific category\n   * @property {String} categoryName backbase specific category names mapped from external category\n   * @property {?String} iconLocation\n   * @property {String} categoryType Specific code of the group the category type belongs to this to be mapped to in integration\n   * @property {?Integer} parentId Parent category Id\n   * @property {?Array.<CategoryItem>} subCategories\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef CategoriesManagementData.CategoryId\n   * @type {Object}\n   * @property {Integer} id Internally used unique identification\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name CategoriesManagementData#postCategoriesRecord\n   * @type {Function}\n   * @description Create categories\n   \n   * @param {CategoriesManagementData.Category-ITEM} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link CategoriesManagementData.CategoryId} on success \n   *\n   * @example\n   * categoriesManagementData\n   *  .postCategoriesRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postCategoriesRecord(data, headers) {\n    const url = `${baseUri}${version}/categories`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name CategoriesManagementData#getCategories\n   * @type {Function}\n   * @description Retrieve list of categories\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.categoryType Specific code of the group the category type belongs to this to be mapped to in integration.\n     \n   * @param {?string} params.level category Level. (defaults to PARENTS)\n     \n   * @param {?string} params.parentId Parent Category Id.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link CategoriesManagementData.Category-LIST} on success  or rejects with data of {@link CategoriesManagementData.Category-NOT-FOUND} on error\n   *\n   * @example\n   * categoriesManagementData\n   *  .getCategories(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getCategories(params, headers) {\n    const url = `${baseUri}${version}/categories`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name CategoriesManagementData#getCategoriesRecord\n   * @type {Function}\n   * @description Get category by Id\n   \n   * @param {string} id \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link CategoriesManagementData.Category-ITEM} on success  or rejects with data of {@link CategoriesManagementData.Category-NOT-FOUND} on error\n   *\n   * @example\n   * categoriesManagementData\n   *  .getCategoriesRecord(id, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getCategoriesRecord(id, params, headers) {\n    const url = `${baseUri}${version}/categories/${id}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name CategoriesManagementData#deleteCategoriesRecord\n   * @type {Function}\n   * @description Delete category by Id\n   \n   * @param {string} id \n     \n   \n   * @param {Object} params Map of query parameters.\n     \n   * @param {string} params.categoryId Delete the selected category.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as void on success or rejects with data of {@link CategoriesManagementData.Category-NOT-FOUND} on error\n   *\n   * @example\n   * categoriesManagementData\n   *  .deleteCategoriesRecord(id, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteCategoriesRecord(id, params, headers) {\n    const url = `${baseUri}${version}/categories/${id}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name CategoriesManagementData#putCategoriesRecord\n   * @type {Function}\n   * @description Update category by an Id\n   \n   * @param {string} id \n     \n   \n   * @param {CategoriesManagementData.Category-UPDATE} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as void on success or rejects with data of {@link CategoriesManagementData.Category-NOT-FOUND} on error\n   *\n   * @example\n   * categoriesManagementData\n   *  .putCategoriesRecord(id, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putCategoriesRecord(id, data, headers) {\n    const url = `${baseUri}${version}/categories/${id}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name CategoriesManagementData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postCategoriesRecord method\n   *\n   * @name CategoriesManagementData#schemas.postCategoriesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"categoryId\": {\n      \"type\": \"integer\",\n      \"required\": true\n    },\n    \"transactionId\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"categoryName\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"iconLocation\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"categoryType\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"parentId\": {\n      \"type\": \"integer\",\n      \"required\": false\n    },\n    \"subCategories\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {\n          \"categoryId\": {\n            \"type\": \"integer\",\n            \"required\": true\n          },\n          \"transactionId\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"categoryName\": {\n            \"type\": \"string\",\n            \"required\": true\n          },\n          \"iconLocation\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"categoryType\": {\n            \"type\": \"string\",\n            \"required\": true\n          },\n          \"parentId\": {\n            \"type\": \"integer\",\n            \"required\": false\n          },\n          \"subCategories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"properties\": {}\n            },\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.postCategoriesRecord = definedTypes['CategoriesManagementData.Category-ITEM'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putCategoriesRecord method\n   *\n   * @name CategoriesManagementData#schemas.putCategoriesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"categoryId\": {\n      \"type\": \"integer\",\n      \"required\": true\n    },\n    \"transactionId\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"categoryName\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"iconLocation\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"categoryType\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"parentId\": {\n      \"type\": \"integer\",\n      \"required\": false\n    },\n    \"subCategories\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {\n          \"categoryId\": {\n            \"type\": \"integer\",\n            \"required\": true\n          },\n          \"transactionId\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"categoryName\": {\n            \"type\": \"string\",\n            \"required\": true\n          },\n          \"iconLocation\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"categoryType\": {\n            \"type\": \"string\",\n            \"required\": true\n          },\n          \"parentId\": {\n            \"type\": \"integer\",\n            \"required\": false\n          },\n          \"subCategories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"properties\": {}\n            },\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.putCategoriesRecord = definedTypes['CategoriesManagementData.Category-UPDATE'];\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    postCategoriesRecord,\n    \n    getCategories,\n    \n    getCategoriesRecord,\n    \n    deleteCategoriesRecord,\n    \n    putCategoriesRecord,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-categories-management-http-ng/scripts/data-bb-categories-management-http.js"],"sourceRoot":""}