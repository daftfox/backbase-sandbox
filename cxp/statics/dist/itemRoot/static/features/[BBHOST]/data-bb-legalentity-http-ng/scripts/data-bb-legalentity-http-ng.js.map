{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 154fe39235e2682bd0de","webpack:///./fe-dist/http-ng/data-bb-legalentity-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-legalentity-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-legalentity-http-ng/scripts/data-bb-legalentity-http.js"],"names":["legalEntityDataModuleKey","legalEntityDataKey","ng","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getLegalentities","params","url","method","then","catch","err","postLegalentitiesRecord","putLegalentitiesRecord","getLegalentitiesRecord","legalEntityId","getLegalentitiesMe","getLegalentitiesSubEntities","postLegalentitiesExternalRecord","postLegalentitiesBulkExternalIdsRecord","getLegalentitiesServiceagreementsMaster","getLegalentitiesExternalRecord","externalId","putLegalentitiesExternalRecord","getLegalentitiesExternalServiceagreementsMaster","schemas"],"mappings":"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","file":"data-bb-legalentity-http-ng/scripts/data-bb-legalentity-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-legalentity-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-legalentity-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-legalentity-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 154fe39235e2682bd0de","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-legalentity-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-legalentity-http-ng\n *\n * @description A data module for accessing the LegalEntity REST API.\n *\n * @returns {String} `data-bb-legalentity-http-ng`\n * @example\n * import legalEntityDataModuleKey, {\n *   legalEntityDataKey,\n * } from 'data-bb-legalentity-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport legalEntityData from './data-bb-legalentity-http';\n\nconst legalEntityDataModuleKey = 'data-bb-legalentity-http-ng';\n/**\n * @name legalEntityDataKey\n * @type {string}\n * @description Angular dependency injection key for the LegalEntityData service\n */\nexport const legalEntityDataKey = 'data-bb-legalentity-http-ng:legalEntityData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(legalEntityDataModuleKey, [])\n  \n  /**\n   * @constructor LegalEntityData\n   * @type {object}\n   *\n   * @description Public api for data-bb-legalentity-http-ng service\n   *\n   */\n  .provider(legalEntityDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name LegalEntityDataProvider\n     * @type {object}\n     * @ngkey data-bb-legalentity-http-ng:legalEntityDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-legalentity-http-ng:legalEntityDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-legalentity-http-ng:legalEntityDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name LegalEntityDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name LegalEntityDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       legalEntityData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-legalentity-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n  definedTypes['LegalEntityData.GetLegalEntities'] = {\"type\":\"array\",\"items\":{\"properties\":{\"parentId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":36,\"required\":false},\"isParent\":{\"type\":\"boolean\",\"default\":false,\"required\":false}}}};\n  \n  definedTypes['LegalEntityData.GetLegalEntitiesBase'] = {\"type\":\"array\",\"items\":{\"properties\":{}}};\n  \n  definedTypes['LegalEntityData.LegalEntityItem'] = {\"properties\":{\"parentId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":36,\"required\":false},\"isParent\":{\"type\":\"boolean\",\"default\":false,\"required\":false}}};\n  \n  definedTypes['LegalEntityData.LegalEntityItemBase'] = {\"properties\":{}};\n  \n  definedTypes['LegalEntityData.LegalEntityCreateItem'] = {\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":true},\"name\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"pattern\":\"^\\\\S(.*(\\\\S))?$\",\"required\":true},\"parentExternalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":false},\"type\":{\"type\":\"string\",\"enum\":[\"CUSTOMER\",\"BANK\"],\"required\":true}}};\n  \n  definedTypes['LegalEntityData.LegalEntityItemId'] = {\"properties\":{\"id\":{\"type\":\"string\",\"required\":true}}};\n  \n  definedTypes['LegalEntityData.GetServiceAgreement'] = {\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":36,\"required\":true},\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":false},\"name\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":128,\"required\":true},\"description\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"creatorLegalEntity\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":36,\"required\":false},\"isMaster\":{\"type\":\"boolean\",\"default\":false,\"required\":false},\"status\":{\"type\":\"string\",\"enum\":[\"ENABLED\",\"DISABLED\"],\"required\":false}}};\n  \n  definedTypes['LegalEntityData.LegalEntityIds'] = {\"properties\":{\"ids\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"minItems\":1,\"uniqueItems\":true,\"required\":true}}};\n  \n  definedTypes['LegalEntityData.LegalEntityUpdateItem'] = {\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"CUSTOMER\",\"BANK\"],\"required\":true}}};\n  \n  definedTypes['LegalEntityData.LegalEntitiesBatchPut'] = {\"type\":\"array\",\"items\":{\"properties\":{\"legalEntity\":{\"type\":\"object\",\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":true},\"name\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"pattern\":\"^\\\\S(.*(\\\\S))?$\",\"required\":true},\"parentExternalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":false},\"type\":{\"type\":\"string\",\"enum\":[\"CUSTOMER\",\"BANK\"],\"required\":true}},\"required\":true},\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":true}}}};\n  \n\n  \n  /**\n   * @typedef LegalEntityData.GetLegalEntities\n   * @type {Array.<LegalEntityData.LegalEntityItem>}\n   */\n  \n  /**\n   * @typedef LegalEntityData.GetLegalEntitiesBase\n   * @type {Array.<Object>}\n   */\n  \n  /**\n   * @typedef LegalEntityData.GetServiceAgreement\n   * @type {Object}\n   * @property {String} id\n   * @property {?String} externalId External ID of Service Agreement\n   * @property {String} name\n   * @property {String} description\n   * @property {?String} creatorLegalEntity\n   * @property {?Boolean} isMaster\n   * @property {?String} status\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntitiesBatchPut\n   * @type {Array.<LegalEntityData.LegalentityItemPut>}\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntityCreateItem\n   * @type {Object}\n   * @property {String} externalId External Id of the legal entity\n   * @property {String} name Legal Entity name\n   * @property {?String} parentExternalId External Id of the parent Legal Entity\n   * @property {String} type\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntityIds\n   * @type {Object}\n   * @property {Array.<String>} ids\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntityItem\n   * @type {Object}\n   * @property {?String} parentId\n   * @property {?Boolean} isParent\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntityItemBase\n   * @type {Object}\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntityItemId\n   * @type {Object}\n   * @property {String} id Internally used unique identification\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalEntityUpdateItem\n   * @type {Object}\n   * @property {String} type\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalentityCreateItem\n   * @type {Object}\n   * @property {String} externalId External Id of the legal entity\n   * @property {String} name Legal Entity name\n   * @property {?String} parentExternalId External Id of the parent Legal Entity\n   * @property {String} type\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef LegalEntityData.LegalentityItemPut\n   * @type {Object}\n   * @property {LegalEntityData.LegalentityCreateItem} legalEntity\n   * @property {String} externalId\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name LegalEntityData#getLegalentities\n   * @type {Function}\n   * @description Retrieve list of all legalentities.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.parentEntityId Id of the Legal Entity's parent. Eg: 12.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.GetLegalEntities} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentities(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentities(params, headers) {\n    const url = `${baseUri}${version}/legalentities`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#postLegalentitiesRecord\n   * @type {Function}\n   * @description # Creates new legal entity.\n   \n   * @param {LegalEntityData.LegalEntityCreateItem} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.LegalEntityItemId} on success \n   *\n   * @example\n   * legalEntityData\n   *  .postLegalentitiesRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postLegalentitiesRecord(data, headers) {\n    const url = `${baseUri}${version}/legalentities`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#putLegalentitiesRecord\n   * @type {Function}\n   * @description # Legal Entity Batch Put\n\nUpdate batch of legal entities.\n   \n   * @param {LegalEntityData.LegalEntitiesBatchPut} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * legalEntityData\n   *  .putLegalentitiesRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putLegalentitiesRecord(data, headers) {\n    const url = `${baseUri}${version}/legalentities`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#getLegalentitiesRecord\n   * @type {Function}\n   * @description Retrieve a single Legal Entity.\n   \n   * @param {string} legalEntityId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.LegalEntityItem} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentitiesRecord(legalEntityId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentitiesRecord(legalEntityId, params, headers) {\n    const url = `${baseUri}${version}/legalentities/${legalEntityId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#getLegalentitiesMe\n   * @type {Function}\n   * @description Retrieve the Legal Entity for the current User\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.LegalEntityItem} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentitiesMe(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentitiesMe(params, headers) {\n    const url = `${baseUri}${version}/legalentities/me`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#getLegalentitiesSubEntities\n   * @type {Function}\n   * @description Retrieve a list of all children of the given Legal Entity.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.cursor Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.from Page Number. Skip over pages of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.query The search term used to search. Eg: backb.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.GetLegalEntitiesBase} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentitiesSubEntities(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentitiesSubEntities(params, headers) {\n    const url = `${baseUri}${version}/legalentities/sub-entities`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#postLegalentitiesExternalRecord\n   * @type {Function}\n   * @description # Legal Entities list\n\nInitial call to retrieve a Legal Entities from the backbase platform with the given Legal Entity external ids.\n   \n   * @param {LegalEntityData.LegalEntityIds} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.GetLegalEntitiesBase} on success \n   *\n   * @example\n   * legalEntityData\n   *  .postLegalentitiesExternalRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postLegalentitiesExternalRecord(data, headers) {\n    const url = `${baseUri}${version}/legalentities/external`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#postLegalentitiesBulkExternalIdsRecord\n   * @type {Function}\n   * @description # Legal Entities list\n\nInitial call to retrieve a Legal Entities from the backbase platform with the given Legal Entity external ids.\n   \n   * @param {LegalEntityData.LegalEntityIds} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.GetLegalEntitiesBase} on success \n   *\n   * @example\n   * legalEntityData\n   *  .postLegalentitiesBulkExternalIdsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postLegalentitiesBulkExternalIdsRecord(data, headers) {\n    const url = `${baseUri}${version}/legalentities/bulk/externalIds`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#getLegalentitiesServiceagreementsMaster\n   * @type {Function}\n   * @description Retrieve the master service agreement for a Legal Entity.\n   \n   * @param {string} legalEntityId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.GetServiceAgreement} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentitiesServiceagreementsMaster(legalEntityId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentitiesServiceagreementsMaster(legalEntityId, params, headers) {\n    const url = `${baseUri}${version}/legalentities/${legalEntityId}/serviceagreements/master`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#getLegalentitiesExternalRecord\n   * @type {Function}\n   * @description # Legal Entities list\n\nInitial call to retrieve a Legal Entity from the backbase platform with the given Legal Entity external reference.\n   \n   * @param {string} externalId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.LegalEntityItemBase} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentitiesExternalRecord(externalId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentitiesExternalRecord(externalId, params, headers) {\n    const url = `${baseUri}${version}/legalentities/external/${externalId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#putLegalentitiesExternalRecord\n   * @type {Function}\n   * @description # Update legal entity.\nUpdates the type of the Legal Entity by it's external ID.\n   \n   * @param {string} externalId \n     \n   \n   * @param {LegalEntityData.LegalEntityUpdateItem} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * legalEntityData\n   *  .putLegalentitiesExternalRecord(externalId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putLegalentitiesExternalRecord(externalId, data, headers) {\n    const url = `${baseUri}${version}/legalentities/external/${externalId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name LegalEntityData#getLegalentitiesExternalServiceagreementsMaster\n   * @type {Function}\n   * @description Retrieve the master service agreement for a external Legal Entity.\n   \n   * @param {string} externalId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link LegalEntityData.GetServiceAgreement} on success \n   *\n   * @example\n   * legalEntityData\n   *  .getLegalentitiesExternalServiceagreementsMaster(externalId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getLegalentitiesExternalServiceagreementsMaster(externalId, params, headers) {\n    const url = `${baseUri}${version}/legalentities/external/${externalId}/serviceagreements/master`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name LegalEntityData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postLegalentitiesRecord method\n   *\n   * @name LegalEntityData#schemas.postLegalentitiesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 64,\n      \"required\": true\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 64,\n      \"pattern\": \"^\\\\S(.*(\\\\S))?$\",\n      \"required\": true\n    },\n    \"parentExternalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 64,\n      \"required\": false\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"CUSTOMER\",\n        \"BANK\"\n      ],\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postLegalentitiesRecord = definedTypes['LegalEntityData.LegalEntityCreateItem'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putLegalentitiesRecord method\n   *\n   * @name LegalEntityData#schemas.putLegalentitiesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"type\": \"array\",\n  \"items\": {\n    \"properties\": {\n      \"legalEntity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"externalId\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"maxLength\": 64,\n            \"required\": true\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"maxLength\": 64,\n            \"pattern\": \"^\\\\S(.*(\\\\S))?$\",\n            \"required\": true\n          },\n          \"parentExternalId\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"maxLength\": 64,\n            \"required\": false\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"CUSTOMER\",\n              \"BANK\"\n            ],\n            \"required\": true\n          }\n        },\n        \"required\": true\n      },\n      \"externalId\": {\n        \"type\": \"string\",\n        \"minLength\": 1,\n        \"maxLength\": 64,\n        \"required\": true\n      }\n    }\n  }\n}\n   */\n      \n  schemas.putLegalentitiesRecord = definedTypes['LegalEntityData.LegalEntitiesBatchPut'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postLegalentitiesExternalRecord method\n   *\n   * @name LegalEntityData#schemas.postLegalentitiesExternalRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"ids\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {}\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true,\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postLegalentitiesExternalRecord = definedTypes['LegalEntityData.LegalEntityIds'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postLegalentitiesBulkExternalIdsRecord method\n   *\n   * @name LegalEntityData#schemas.postLegalentitiesBulkExternalIdsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"ids\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {}\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true,\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postLegalentitiesBulkExternalIdsRecord = definedTypes['LegalEntityData.LegalEntityIds'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putLegalentitiesExternalRecord method\n   *\n   * @name LegalEntityData#schemas.putLegalentitiesExternalRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"CUSTOMER\",\n        \"BANK\"\n      ],\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.putLegalentitiesExternalRecord = definedTypes['LegalEntityData.LegalEntityUpdateItem'];\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getLegalentities,\n    \n    postLegalentitiesRecord,\n    \n    putLegalentitiesRecord,\n    \n    getLegalentitiesRecord,\n    \n    getLegalentitiesMe,\n    \n    getLegalentitiesSubEntities,\n    \n    postLegalentitiesExternalRecord,\n    \n    postLegalentitiesBulkExternalIdsRecord,\n    \n    getLegalentitiesServiceagreementsMaster,\n    \n    getLegalentitiesExternalRecord,\n    \n    putLegalentitiesExternalRecord,\n    \n    getLegalentitiesExternalServiceagreementsMaster,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-legalentity-http-ng/scripts/data-bb-legalentity-http.js"],"sourceRoot":""}