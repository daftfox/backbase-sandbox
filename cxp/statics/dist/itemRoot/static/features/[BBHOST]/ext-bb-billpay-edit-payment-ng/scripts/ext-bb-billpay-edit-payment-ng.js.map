{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap f3d2485eec67eb2fdf62?1eb6","webpack:///./ext-bb-billpay-edit-payment-ng/model.xml","webpack:///./ext-bb-billpay-edit-payment-ng/scripts/index.js","webpack:///./ext-bb-billpay-edit-payment-ng/scripts/hooks.js","webpack:///./ext-bb-billpay-edit-payment-ng/scripts/helpers.js","webpack:///external \"vendor-bb-angular-ng-aria\"","webpack:///external \"ui-bb-confirm-ng\"","webpack:///external \"ui-bb-currency-input-ng\"","webpack:///external \"ui-bb-dropdown-select-ng\"","webpack:///external \"ui-bb-i18n-ng\"","webpack:///external \"ui-bb-format-amount-ng\"","webpack:///external \"ui-bb-loading-overlay-ng\"","webpack:///external \"ui-bb-number-input-ng\"","webpack:///external \"ui-bb-stepper-ng\"","webpack:///external \"ui-bb-substitute-error-ng\"","webpack:///external \"vendor-bb-uib-datepicker\"","webpack:///external \"vendor-bb-uib-datepicker-popup\""],"names":["default","dependencyKeys","ngAriaKey","uiBbConfirmKey","uiBbCurrencyInputKey","uiBbDropdownSelectKey","uiBbI18nKey","uiBbFormatAmountKey","uiBbLoadingOverlayKey","uiBbNumberInputKey","uiBbStepperKey","uiBbSubstituteErrorKey","uibDatepickerKey","uibDatepickerPopupKey","events","setState","current","template","$filter","accountService","dateService","managePaymentService","expeditedService","stateContainer","managePaymentViewModel","errorHelperUtilities","showWaivedFees","transformPaymentObject","payeeID","id","newPayment","paymentId","paymentAmount","paymentDate","paymentMemo","paymentAccount","accountNumber","accountType","routingNumber","overnightDeliveryAddress","parseFloat","value","convertDateToServerDayString","address1","address2","city","state","postalCode","updateState","viewState","createAction","updatePaymentState","payee","payment","paymentAccountNumber","payeeLoaded","hasLoadingError","accounts","isLoadingAccounts","length","unrecoverableErrorsExist","errorMap","extraErrorsToTreatAsUnrecoverable","Object","keys","some","key","unrecoverable","includes","getCurrencyCode","rushFee","paymentServicesObj","getExpeditedFee","totalPaymentAmount","rushChosen","isDateRush","stepperLabels","previous","next","cancel","finish","accountNameAndNumber","account","allowNextStep","date","isValidDate","isDateSelectable","allowPreviousStep","onFinish","$ctrl","returnToPreviousScreen","putPaymentRecord","then","status","catch","reviewTitle","title","accountDisplay","openCancelConfirmationModal","holder","assign","cancelConfirm","isOpen","navigateForCancel","isLoading","isLoadingPayees","isLoadingPayment","isPuttingPayment","paymentSelected","undefined","getLoadingErrorMessageKey","error","payees","payeeError","fromFormSubmission","message","getLoadingErrorKey","type","getLoadingErrorClass","formInputHasError","inputName","form","hasError","hasErrorClass","getError","clearBackendError","clearBackendErrorAccountField","thisState","getState","newVal","valToCompareTo","clearBackendErrorAmountField","generalErrorMessages","unrecoverableErrorMessages","unrecoverablePageErrorExists","billpay_page_error","errorsExist","showRushNoticeForPayee","hasFeeBeenWaived","showRushNoticeForPayment","rushFeeWaived","currencyInputLabels"],"mappings":"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","file":"ext-bb-billpay-edit-payment-ng/scripts/ext-bb-billpay-edit-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-confirm-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-dropdown-select-ng\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-number-input-ng\"), require(\"ui-bb-stepper-ng\"), require(\"ui-bb-substitute-error-ng\"), require(\"vendor-bb-uib-datepicker\"), require(\"vendor-bb-uib-datepicker-popup\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-bb-billpay-edit-payment-ng\", [\"vendor-bb-angular-ng-aria\", \"ui-bb-confirm-ng\", \"ui-bb-currency-input-ng\", \"ui-bb-dropdown-select-ng\", \"ui-bb-i18n-ng\", \"ui-bb-format-amount-ng\", \"ui-bb-loading-overlay-ng\", \"ui-bb-number-input-ng\", \"ui-bb-stepper-ng\", \"ui-bb-substitute-error-ng\", \"vendor-bb-uib-datepicker\", \"vendor-bb-uib-datepicker-popup\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-bb-billpay-edit-payment-ng\"] = factory(require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-confirm-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-dropdown-select-ng\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-number-input-ng\"), require(\"ui-bb-stepper-ng\"), require(\"ui-bb-substitute-error-ng\"), require(\"vendor-bb-uib-datepicker\"), require(\"vendor-bb-uib-datepicker-popup\"));\n\telse\n\t\troot[\"ext-bb-billpay-edit-payment-ng\"] = factory(root[\"vendor-bb-angular-ng-aria\"], root[\"ui-bb-confirm-ng\"], root[\"ui-bb-currency-input-ng\"], root[\"ui-bb-dropdown-select-ng\"], root[\"ui-bb-i18n-ng\"], root[\"ui-bb-format-amount-ng\"], root[\"ui-bb-loading-overlay-ng\"], root[\"ui-bb-number-input-ng\"], root[\"ui-bb-stepper-ng\"], root[\"ui-bb-substitute-error-ng\"], root[\"vendor-bb-uib-datepicker\"], root[\"vendor-bb-uib-datepicker-popup\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f3d2485eec67eb2fdf62","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-bb-billpay-edit-payment-ng/model.xml\n// module id = 0\n// module chunks = 0","/**\n * @module ext-bb-billpay-edit-payment-ng\n *\n * @description extension for widget-bb-billpay-manage-payment-ng\n *\n * @requires vendor-bb-angular-ng-aria\n */\n\nimport ngAriaKey from 'vendor-bb-angular-ng-aria';\nimport uiBbConfirmKey from 'ui-bb-confirm-ng';\nimport uiBbCurrencyInputKey from 'ui-bb-currency-input-ng';\nimport uiBbDropdownSelectKey from 'ui-bb-dropdown-select-ng';\nimport uiBbI18nKey from 'ui-bb-i18n-ng';\nimport uiBbFormatAmountKey from 'ui-bb-format-amount-ng';\nimport uiBbLoadingOverlayKey from 'ui-bb-loading-overlay-ng';\nimport uiBbNumberInputKey from 'ui-bb-number-input-ng';\nimport uiBbStepperKey from 'ui-bb-stepper-ng';\nimport uiBbSubstituteErrorKey from 'ui-bb-substitute-error-ng';\nimport uibDatepickerKey from 'vendor-bb-uib-datepicker';\nimport uibDatepickerPopupKey from 'vendor-bb-uib-datepicker-popup';\n\nexport const dependencyKeys = [\n  ngAriaKey,\n  uiBbConfirmKey,\n  uiBbCurrencyInputKey,\n  uiBbDropdownSelectKey,\n  uiBbI18nKey,\n  uiBbFormatAmountKey,\n  uiBbLoadingOverlayKey,\n  uiBbNumberInputKey,\n  uiBbStepperKey,\n  uiBbSubstituteErrorKey,\n  uibDatepickerKey,\n  uibDatepickerPopupKey,\n];\n\nexport { default as hooks } from './hooks';\n\nexport { default as helpers } from './helpers';\n\nexport const events = {};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-billpay-edit-payment-ng/scripts/index.js","/**\n * @name Hooks\n * @type {Object}\n * @description Hooks for widget-bb-billpay-manage-payment-ng\n */\nexport default {\n  /**\n   * @name Hooks#setState\n   * @type {function}\n   * @description add any state required by extension\n   * @param {ViewState} current The current state of the view model\n   * @return {ViewState} The new state of the view model\n   */\n  setState(current) {\n    return {\n      ...current,\n      template: '#ext-bb-billpay-edit-payment-ng/main.ng.html',\n    };\n  },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-billpay-edit-payment-ng/scripts/hooks.js","/**\n * @constructor Helpers\n */\nexport default ({\n  $filter,\n  accountService,\n  dateService,\n  managePaymentService,\n  expeditedService,\n  stateContainer,\n  managePaymentViewModel,\n  errorHelperUtilities,\n}) => {\n  const { showWaivedFees } = expeditedService;\n\n  /**\n   * @name transformPaymentObject\n   * @inner\n   * @type {function}\n   * @description transform to flat payment suitable for sending to back end\n   * @param {object} payee\n   * @param {string} payee.id\n   * @param {object} payee.newPayment\n   * @return {string}\n  */\n  const transformPaymentObject = ({ id: payeeID, newPayment }) => {\n    const {\n      id: paymentId,\n      paymentAmount,\n      paymentDate,\n      paymentMemo,\n      paymentAccount: { accountNumber, accountType, routingNumber },\n      overnightDeliveryAddress,\n    } = newPayment;\n\n    return {\n      payeeID,\n      id: paymentId,\n      paymentAmount: parseFloat(paymentAmount.value),\n      paymentDate: paymentDate\n        ? dateService.convertDateToServerDayString(paymentDate)\n        : null,\n      paymentAccount: { accountNumber, accountType, routingNumber },\n      // Add the memo to the obj if it exists\n      ...!!paymentMemo && { paymentMemo },\n      overnightDeliveryAddress: overnightDeliveryAddress || {\n        address1: null,\n        address2: null,\n        city: null,\n        state: null,\n        postalCode: null,\n      },\n    };\n  };\n\n  /**\n   * @name updateState\n   * @inner\n   * @type {function}\n   * @description Update the view model state\n   * @param {object} viewState\n   */\n  const updateState = (viewState) =>\n    stateContainer.createAction(current => ({\n      ...current,\n      ...viewState,\n    }))(viewState);\n\n  /**\n   * @name updatePaymentState\n   * @inner\n   * @type {function}\n   * @description Update the payment into the state\n   * @param {object} $ctrl\n   * @param {object} $ctrl.payee\n   */\n  const updatePaymentState = ({ payee }) => {\n    const payment = transformPaymentObject(payee);\n\n    // Keep the current payment in the state\n    updateState({\n      payment: {\n        ...payment,\n        paymentAccountNumber: payment.paymentAccount.accountNumber,\n      },\n    });\n  };\n\n  /**\n   * @name payeeLoaded\n   * @inner\n   * @type {function}\n   * @description Return true if a payee is in the view state\n   * @param {object} viewState\n   * @param {object} [viewState.payee]\n   * @return {boolean}\n   */\n  const payeeLoaded = ({ payee }) => !!(payee && payee.id);\n\n  /**\n   * @name hasLoadingError\n   * @type {function}\n   * @description return true if no accounts and accounts are loaded\n   * @param {object} state\n   * @param {Array.<any>} [state.accounts]\n   * @param {boolean} [state.isLoadingAccounts]\n   * @inner\n   * @return {boolean}\n   */\n  const hasLoadingError = ({ accounts, isLoadingAccounts }) =>\n    (isLoadingAccounts != null && !isLoadingAccounts) && (!accounts || !accounts.length);\n\n  /**\n   * @name unrecoverableErrorsExist\n   * @inner\n   * @type {function}\n   * @description return true if there are unrecoverable errors in the error map\n   * @param {object} state\n   * @param {object} [state.errorMap]\n   * @return {boolean}\n   */\n  const unrecoverableErrorsExist = ({ errorMap = {} }) => {\n    const extraErrorsToTreatAsUnrecoverable = [\n      'billpay_payment_payee',\n    ];\n    return Object.keys(errorMap).some(key =>\n      errorMap[key].unrecoverable || extraErrorsToTreatAsUnrecoverable.includes(key)\n    );\n  };\n\n  return {\n    /**\n     * @name Helpers#getCurrencyCode\n     * @type {function}\n     * @description get the currency code from service\n     * @return {string}\n     */\n    getCurrencyCode() {\n      return managePaymentService.getCurrencyCode();\n    },\n\n    /**\n     * @name Helpers#rushFee\n     * @type {function}\n     * @description return paymentFee from payment object\n     * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n     * @param {object} payee.paymentServicesObj\n     * @return {number|undefined}\n     */\n    rushFee: ({ paymentServicesObj }) => expeditedService.getExpeditedFee(paymentServicesObj),\n\n    /**\n     * @name Helpers#totalPaymentAmount\n     * @type {function}\n     * @description return the total payment amount, with rush included if selected\n     * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n     * @param {object} payee.newPayment\n     * @param {object} payee.paymentServicesObj\n     * @return {number}\n     */\n    totalPaymentAmount: ({ newPayment, paymentServicesObj }) => {\n      const rushChosen = dateService.isDateRush(newPayment.paymentDate, paymentServicesObj);\n      const rushFee = expeditedService.getExpeditedFee(paymentServicesObj);\n      return parseFloat(newPayment.paymentAmount.value) + (rushChosen ? rushFee : 0);\n    },\n\n    /**\n     * @name Helpers#stepperLabels\n     * @type {object}\n     * @description Internationalised strings for the stepper buttons\n     */\n    stepperLabels: {\n      previous: $filter('i18n')('buttons.previous'),\n      next: $filter('i18n')('buttons.next'),\n      cancel: $filter('i18n')('buttons.cancel'),\n      finish: $filter('i18n')('buttons.finish'),\n    },\n\n    /**\n     * @name Helpers#accountNameAndNumber\n     * @type {function}\n     * @description return the account nickname & blurred acc number, else just a blurred acc number\n     * @param {module:model-bb-billpay-ng.PaymentAccount} account\n     * @return {string}\n     */\n    accountNameAndNumber(account) {\n      return accountService.accountNameAndNumber(account);\n    },\n\n    /**\n     * @name Helpers#allowNextStep\n     * @type {function}\n     * @param {module:widget-bb-billpay-manage-payment-ng.EditPaymentController} ctrl\n     * @param {object} ctrl.payee - payee control data\n     * @param {object} state\n     * @description allow move to next step if control data valid\n     * @returns {boolean}\n     */\n    allowNextStep: ({ payee }, state) => {\n      const date = payee.newPayment.paymentDate;\n      return !!(payee.paymentServicesObj &&\n        payee.newPayment.paymentAccount &&\n        parseFloat(payee.newPayment.paymentAmount.value) &&\n        dateService.isValidDate(date) &&\n        dateService.isDateSelectable(payee.paymentServicesObj, date) &&\n        !unrecoverableErrorsExist(state));\n    },\n\n    /**\n     * @name Helpers#allowPreviousStep\n     * @type {function}\n     * @param {object} state\n     * @description allow move to previous step if no unrecoverable errors exist\n     * @returns {boolean}\n     */\n    allowPreviousStep: (state) => !unrecoverableErrorsExist(state),\n\n    /**\n     * @name Helpers#onFinish\n     * @type {function}\n     * @param {object} $ctrl The control state\n     * @param {function} $ctrl.returnToPreviousScreen The function to call to navigate\n     * @param {object} $ctrl.payee\n     * @param {object} $ctrl.payee.newPayment data to save\n     * @description save changes and call intent if successful\n     * @returns {Promise<void>}\n     */\n    onFinish: ($ctrl) => {\n      const { payee, returnToPreviousScreen } = $ctrl;\n      const payment = transformPaymentObject(payee);\n\n      // Keep the current payment in the state\n      updatePaymentState($ctrl);\n\n      return managePaymentService.putPaymentRecord(payment)\n        .then(() => {\n          returnToPreviousScreen({\n            paymentId: payee.newPayment.id,\n            status: 'success',\n          });\n        })\n        .catch(() => {\n          // error handling is dealt with in the service\n        });\n    },\n\n    /**\n     * @name Helpers#reviewTitle\n     * @type {function}\n     * @description Return the title i18ned string with the account the payment is coming from\n     * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n     * @param {object} payee.newPayment\n     * @return {string}\n     */\n    reviewTitle: ({ newPayment }) => {\n      const title = $filter('i18n')('review.title');\n      const accountDisplay = accountService.accountNameAndNumber(newPayment.paymentAccount);\n      return `${title} ${accountDisplay}`;\n    },\n\n    /**\n     * @name openCancelConfirmationModal\n     * @type {function}\n     * @description Change the control state to show the cancel modal\n     * @param {{cancelConfirm}} holder\n     */\n    openCancelConfirmationModal: (holder) => Object.assign(holder.cancelConfirm, { isOpen: true }),\n\n    /**\n     * @name Helpers#navigateForCancel\n     * @type {function}\n     * @param {function} returnToPreviousScreen\n     * @description Navigate back to the previous screen with a 'cancelled' status payload\n     * @returns {void}\n     */\n    navigateForCancel: (returnToPreviousScreen) => {\n      returnToPreviousScreen({\n        status: 'cancelled',\n      });\n    },\n\n    /**\n     * @name Helpers#isLoading\n     * @type {function}\n     * @description Return true if any of the endpoints are loading\n     * @param {object} state\n     * @param {boolean} state.isLoadingAccounts\n     * @param {boolean} state.isLoadingPayees\n     * @param {boolean} state.isLoadingPayment\n     * @param {boolean} state.isPuttingPayment\n     * @return {boolean}\n     */\n    isLoading: ({ isLoadingAccounts, isLoadingPayees, isLoadingPayment, isPuttingPayment }) =>\n      isLoadingAccounts || isLoadingPayees || isLoadingPayment || isPuttingPayment,\n\n    /**\n     * @name Helpers#paymentSelected\n     * @type {function}\n     * @description Return true if the widget has been initialised with an id\n     * @param {object} state\n     * @param {boolean} state.isLoadingPayment\n     * @return {boolean}\n     */\n    paymentSelected: ({ isLoadingPayment }) => isLoadingPayment !== undefined,\n\n    /**\n     * @name Helpers#getLoadingErrorMessageKey\n     * @type {function}\n     * @description get any error message\n     * @param {object} state\n     * @param {object} state.error\n     * @param {boolean} state.isLoadingPayees\n     * @param {Array.<any>} [state.payees]\n     * @return {string} message from error\n     */\n    getLoadingErrorMessageKey: ({ error, isLoadingPayees, payees }) => {\n      const payeeError = () =>\n        ((isLoadingPayees != null && !isLoadingPayees && (!payees || !payees.length))\n          ? 'billpay.model.error.unexpected'\n          : '');\n      return error && !error.fromFormSubmission ? error.message : payeeError();\n    },\n\n    /**\n     * @name Helpers#hasLoadingError\n     * @type {function}\n     * @description return true if no accounts and accounts are loaded\n     * @param {object} state\n     * @param {Array.<any>} [state.accounts]\n     * @param {boolean} [state.isLoadingAccounts]\n     * @return {boolean}\n     */\n    hasLoadingError,\n\n    /**\n     * @name Helpers#getLoadingErrorKey\n     * @type {function}\n     * @description return error message key for input type\n     * @param {string} type - input type\n     * @return {string} error key\n     */\n    getLoadingErrorKey: (type) => `${type}.error.no-items`,\n\n    /**\n     * @name Helpers#getLoadingErrorClass\n     * @type {function}\n     * @description return error class if hasLoadingError is true\n     * @param {object} state\n     * @return {{'has-error':boolean}} object with error class indicator\n     */\n    getLoadingErrorClass: (state) => ({ 'was-validated is-invalid': hasLoadingError(state) }),\n\n    /**\n     * @name Helpers#formInputHasError\n     * @type {function}\n     * @description Check if the input is invalid\n     * @param {string} inputName - The name of the form input\n     * @param {object} state\n     * @param {object} form - Form that is being submitted\n     * @return {boolean}\n     */\n    formInputHasError: (inputName, state, form) => {\n      errorHelperUtilities.formInputHasError(inputName, form, payeeLoaded(state));\n    },\n\n    /**\n     * @name Helpers#hasError\n     * @type {function}\n     * @description Check if the field has form or backend error\n     * @param {string} inputName - field name\n     * @param {object} state - current view state\n     * @param {object} form - angular form\n     * @return {boolean}\n     */\n    hasError: (inputName, state, form) =>\n      errorHelperUtilities.hasError(inputName, state.errorMap, form, $filter, payeeLoaded(state)),\n\n    /**\n     * @name Helpers#hasErrorClass\n     * @type {function}\n     * @description return class to indicate if field has error\n     * @param {string} inputName - field name\n     * @param {object} state - current view state\n     * @param {object} form - angular form\n     * @return {object}\n     */\n    hasErrorClass: (inputName, state, form) =>\n      errorHelperUtilities\n        .hasErrorClass(inputName, state.errorMap, form, $filter, payeeLoaded(state)),\n\n    /**\n     * @name Helpers#getError\n     * @type {function}\n     * @description get form or backend error\n     * @param {string} inputName - field name\n     * @param {object} state - current view state\n     * @param {object} form - angular form\n     * @return {string}\n     */\n    getError: (inputName, state, form) =>\n      errorHelperUtilities.getError(inputName, state.errorMap, form, $filter,\n        payeeLoaded(state)),\n\n    /**\n     * @name Helpers#clearBackendError\n     * @type {function}\n     * @description clear backend field and page error\n     * @param {object} $ctrl - Control state\n     * @param {string} inputName - field name\n     * @param {object} state - current view state\n     * @param {object} state.errorMap\n     */\n    clearBackendError: ($ctrl, inputName, { errorMap }) => {\n      updatePaymentState($ctrl);\n      const { clearBackendError } = managePaymentViewModel;\n      errorHelperUtilities.clearBackendError(inputName, errorMap, clearBackendError);\n    },\n\n    /**\n     * @name Helpers#clearBackendErrorAccountField\n     * @type {function}\n     * @description Clear backend field and page error.\n     *   Special case for the account field as the change event fires on when it loads\n     * @param {object} $ctrl - Control state\n     * @param {string} inputName - field name\n     * @param {object} state - current view state\n     * @param {object} state.errorMap\n     */\n    clearBackendErrorAccountField: ($ctrl, inputName, { errorMap }) => {\n      // Make sure there has actually been a change\n      const thisState = stateContainer.getState();\n      if (!thisState.payment.paymentAccount) {\n        return;\n      }\n      const newVal = $ctrl.payee.newPayment.paymentAccount.accountNumber;\n      const valToCompareTo = thisState.payment.paymentAccount.accountNumber;\n      if (newVal === valToCompareTo) {\n        return;\n      }\n\n      updatePaymentState($ctrl);\n      const { clearBackendError } = managePaymentViewModel;\n      errorHelperUtilities.clearBackendError(inputName, errorMap, clearBackendError);\n    },\n\n    /**\n     * @name Helpers#clearBackendErrorAmountField\n     * @type {function}\n     * @description Clear backend field and page error.\n     *   Special case for the amount field as the change event fires on when it loads\n     * @param {object} $ctrl - Control state\n     * @param {string} inputName - field name\n     * @param {object} state - current view state\n     * @param {object} state.errorMap\n     */\n    clearBackendErrorAmountField: ($ctrl, inputName, { errorMap }) => {\n      // Ensure the account has loaded\n      if (!$ctrl.payee.newPayment.paymentAccount) {\n        return;\n      }\n\n      // Make sure there has actually been a change\n      const thisState = stateContainer.getState();\n      const newVal = parseFloat($ctrl.payee.newPayment.paymentAmount.value);\n      const valToCompareTo = thisState.payment.paymentAmount;\n      if (newVal === valToCompareTo) {\n        return;\n      }\n\n      updatePaymentState($ctrl);\n      const { clearBackendError } = managePaymentViewModel;\n      errorHelperUtilities.clearBackendError(inputName, errorMap, clearBackendError);\n    },\n\n    /**\n     * @name Helpers#generalErrorMessages\n     * @type {object}\n     * @description keys for general error messages for payments, not related to specific fields\n     */\n    generalErrorMessages: [\n      'billpay_page_error',\n      'billpay_payment_already_exists',\n      'billpay_payment_missing_information',\n      'billpay_payment_invalid_ebill',\n      'billpay_payment_daily_limit_exceeded',\n    ],\n\n    /**\n     * @name Helpers#unrecoverableErrorMessages\n     * @type {object}\n     * @description keys for unrecoverable error messages for payments, not related to specific\n     *   fields\n     */\n    unrecoverableErrorMessages: [\n      'billpay_payment_risk_failed',\n      'billpay_payment_change_failed',\n      'billpay_payment_fraud_failed',\n      'billpay_payment_payee',\n    ],\n\n    /**\n     * @name Helpers#unrecoverablePageErrorExists\n     * @type {function}\n     * @description return true if there is a page error and it has unrecoverable\n     *   set to true\n     * @param {object} state\n     * @param {object} [state.errorMap]\n     * @return {boolean}\n     */\n    unrecoverablePageErrorExists: ({ errorMap = {} }) =>\n      !!(errorMap.billpay_page_error && errorMap.billpay_page_error.unrecoverable),\n\n    /**\n     * @name Helpers#unrecoverableErrorsExist\n     * @type {function}\n     * @description return true if there are unrecoverable errors in the error map\n     * @param {object} state\n     * @param {object} [state.errorMap]\n     * @return {boolean}\n     */\n    unrecoverableErrorsExist,\n\n    /**\n     * @name Helpers#errorsExist\n     * @type {function}\n     * @description return true if there are any errors in the error map\n     * @param {object} state\n     * @param {object} [state.errorMap]\n     * @return {boolean}\n     */\n    errorsExist: ({ errorMap = {} }) => !!Object.keys(errorMap).length,\n\n    /**\n     * @name Helpers#showRushNoticeForPayee\n     * @type {function}\n     * @description Decide whether to show the rush notices for this payee (regardless of whether it\n     *   is in use or not). Decide whether or not to show waived fees based on the widget preference\n     * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n     * @param {object} payee.paymentServicesObj\n     * @return {boolean}\n     */\n    showRushNoticeForPayee: ({ paymentServicesObj }) =>\n      showWaivedFees || !expeditedService.hasFeeBeenWaived(paymentServicesObj),\n\n    /**\n     * @name Helpers#showRushNoticeForPayment\n     * @type {function}\n     * @description Decide to show the rush notice on the payment based on whether it has been used.\n     *   If it has (and has a fee of 0) then decide based on whether the widget preferences are set\n     *   to show it\n     * @param {object} payee\n     * @param {object} payee.newPayment\n     * @param {date} payee.newPayment.paymentDate\n     * @param {object} payee.paymentServicesObj\n     * @return {boolean}\n     */\n    showRushNoticeForPayment: ({ newPayment, paymentServicesObj }) => {\n      const rushChosen = dateService.isDateRush(newPayment.paymentDate, paymentServicesObj);\n      const rushFeeWaived = expeditedService.hasFeeBeenWaived(paymentServicesObj);\n      return showWaivedFees ? rushChosen : rushChosen && !rushFeeWaived;\n    },\n\n    /**\n     * @name Helpers#currencyInputLabels\n     * @type {object}\n     * @description Internationalised strings for the currency input control\n     */\n    currencyInputLabels: {\n      'label.currency': $filter('i18n')('currency.aria-label.input.currency'),\n      'label.amount': $filter('i18n')('currency.aria-label.input.amount'),\n      'label.decimals': $filter('i18n')('currency.aria-label.input.decimals'),\n    },\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-billpay-edit-payment-ng/scripts/helpers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-aria\"\n// module id = 4\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-confirm-ng\"\n// module id = 5\n// module chunks = 0 1 3","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-currency-input-ng\"\n// module id = 6\n// module chunks = 0 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-dropdown-select-ng\"\n// module id = 7\n// module chunks = 0 1 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 8\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-format-amount-ng\"\n// module id = 9\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-overlay-ng\"\n// module id = 10\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-number-input-ng\"\n// module id = 11\n// module chunks = 0 3","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-stepper-ng\"\n// module id = 12\n// module chunks = 0 3","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-substitute-error-ng\"\n// module id = 13\n// module chunks = 0 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-datepicker\"\n// module id = 14\n// module chunks = 0 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-datepicker-popup\"\n// module id = 15\n// module chunks = 0 2 3"],"sourceRoot":""}