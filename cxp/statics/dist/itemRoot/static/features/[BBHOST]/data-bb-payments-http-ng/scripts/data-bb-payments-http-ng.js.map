{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap aed84b58553b90b2993f","webpack:///./fe-dist/http-ng/data-bb-payments-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-payments-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-payments-http-ng/scripts/data-bb-payments-http.js"],"names":["paymentsDataModuleKey","paymentsDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getPayments","params","url","method","then","catch","err","postPaymentsRecord","getPaymentsRecord","paymentId","deletePaymentsRecord","getPaymentsStandingOrders","getPaymentsAuthorizations","getPaymentsDirectDebits","getPaymentsCurrencies","getPaymentsRate","postPaymentsAuthorizationsRecord","postPaymentsRejectionsRecord","postPaymentsDirectDebitsRefundsRecord","directDebitId","postPaymentsDirectDebitsRefusalsRecord","schemas"],"mappings":"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","file":"data-bb-payments-http-ng/scripts/data-bb-payments-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-payments-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-payments-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-payments-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aed84b58553b90b2993f","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-payments-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-payments-http-ng\n *\n * @description A data module for accessing the Payments REST API.\n *\n * @returns {String} `data-bb-payments-http-ng`\n * @example\n * import paymentsDataModuleKey, {\n *   paymentsDataKey,\n * } from 'data-bb-payments-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport paymentsData from './data-bb-payments-http';\n\nconst paymentsDataModuleKey = 'data-bb-payments-http-ng';\n/**\n * @name paymentsDataKey\n * @type {string}\n * @description Angular dependency injection key for the PaymentsData service\n */\nexport const paymentsDataKey = 'data-bb-payments-http-ng:paymentsData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(paymentsDataModuleKey, [])\n  \n  /**\n   * @constructor PaymentsData\n   * @type {object}\n   *\n   * @description Public api for data-bb-payments-http-ng service\n   *\n   */\n  .provider(paymentsDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name PaymentsDataProvider\n     * @type {object}\n     * @ngkey data-bb-payments-http-ng:paymentsDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-payments-http-ng:paymentsDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-payments-http-ng:paymentsDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name PaymentsDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name PaymentsDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       paymentsData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-payments-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n  definedTypes['PaymentsData.DirectDebits'] = {\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"pattern\":\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$\",\"required\":true},\"status\":{\"type\":\"string\",\"enum\":[\"ANNOUNCED\",\"PROCESSED\",\"REJECTED\",\"REFUNDED\",\"REFUSED\",\"REFUND_REQUESTED\",\"REFUSAL_REQUESTED\"],\"required\":true},\"type\":{\"type\":\"string\",\"enum\":[\"CORE\",\"B2B\"],\"required\":false},\"refundDayCount\":{\"type\":\"integer\",\"required\":false},\"creditorReference\":{\"type\":\"string\",\"maxLength\":35,\"required\":true},\"mandateReference\":{\"type\":\"string\",\"maxLength\":35,\"required\":true}}}};\n  \n\n  \n  /**\n   * @typedef PaymentsData.DirectDebit\n   * @type {Object}\n   * @property {String} id\n   * @property {String} status One of \"ANNOUNCED\", \"PROCESSED\", \"REJECTED\", \"REFUNDED\", \"REFUSED\", \"REFUND_REQUESTED\", \"REFUSAL_REQUESTED\"\n   * @property {?String} type One of \"CORE\", \"B2B\"\n   * @property {?Integer} refundDayCount The number of days that indicates how many days the refund is available after the direct debit was processed\n   * @property {String} creditorReference Client reference creditor alphanumeric number like 123AB0078\n   * @property {String} mandateReference Client reference mandate alphanumeric number like 123AB0078\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef PaymentsData.DirectDebits\n   * @type {Array.<PaymentsData.DirectDebit>}\n   */\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name PaymentsData#getPayments\n   * @type {Function}\n   * @description Retrieve list of payments.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.from Skip over a page of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?string} params.cursor As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.orderBy Order by field.\n     \n   * @param {?string} params.direction Direction. (defaults to DESC)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .getPayments(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPayments(params, headers) {\n    const url = `${baseUri}${version}/payments`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#postPaymentsRecord\n   * @type {Function}\n   * @description Create new payment.\n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .postPaymentsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postPaymentsRecord(data, headers) {\n    const url = `${baseUri}${version}/payments`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#getPaymentsRecord\n   * @type {Function}\n   * @description Retrieve single payment.\n   \n   * @param {string} paymentId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .getPaymentsRecord(paymentId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPaymentsRecord(paymentId, params, headers) {\n    const url = `${baseUri}${version}/payments/${paymentId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#deletePaymentsRecord\n   * @type {Function}\n   * @description Delete a single payment by Id\n   \n   * @param {string} paymentId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .deletePaymentsRecord(paymentId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deletePaymentsRecord(paymentId, params, headers) {\n    const url = `${baseUri}${version}/payments/${paymentId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#getPaymentsStandingOrders\n   * @type {Function}\n   * @description Retrieve list of standing orders\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.from Skip over a page of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?string} params.cursor As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.orderBy Order by field.\n     \n   * @param {?string} params.direction Direction. (defaults to DESC)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .getPaymentsStandingOrders(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPaymentsStandingOrders(params, headers) {\n    const url = `${baseUri}${version}/payments/standing-orders`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#getPaymentsAuthorizations\n   * @type {Function}\n   * @description Retrieve list of only payments, which can be authorized or rejected.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.from Skip over a page of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?string} params.cursor As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.orderBy Order by field.\n     \n   * @param {?string} params.direction Direction. (defaults to DESC)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .getPaymentsAuthorizations(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPaymentsAuthorizations(params, headers) {\n    const url = `${baseUri}${version}/payments/authorizations`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#getPaymentsDirectDebits\n   * @type {Function}\n   * @description Retrieve list of direct debits.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.from Skip over a page of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?string} params.cursor As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.orderBy Order by field.\n     \n   * @param {?string} params.direction Direction. (defaults to DESC)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link PaymentsData.DirectDebits} on success \n   *\n   * @example\n   * paymentsData\n   *  .getPaymentsDirectDebits(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPaymentsDirectDebits(params, headers) {\n    const url = `${baseUri}${version}/payments/direct-debits`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#getPaymentsCurrencies\n   * @type {Function}\n   * @description Get currencies available for payment.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .getPaymentsCurrencies(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPaymentsCurrencies(params, headers) {\n    const url = `${baseUri}${version}/payments/currencies`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#getPaymentsRate\n   * @type {Function}\n   * @description Get available rate for currencies.\n   \n   * @param {Object} params Map of query parameters.\n     \n   * @param {string} params.currencyFrom Currency transfer from. Eg: EUR.\n     \n   * @param {string} params.currencyTo Currency transfer to. Eg: USD.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .getPaymentsRate(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPaymentsRate(params, headers) {\n    const url = `${baseUri}${version}/payments/rate`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#postPaymentsAuthorizationsRecord\n   * @type {Function}\n   * @description Authorize payment.\n   \n   * @param {string} paymentId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .postPaymentsAuthorizationsRecord(paymentId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postPaymentsAuthorizationsRecord(paymentId, data, headers) {\n    const url = `${baseUri}${version}/payments/authorizations/${paymentId}`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#postPaymentsRejectionsRecord\n   * @type {Function}\n   * @description Reject payment.\n   \n   * @param {string} paymentId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .postPaymentsRejectionsRecord(paymentId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postPaymentsRejectionsRecord(paymentId, data, headers) {\n    const url = `${baseUri}${version}/payments/rejections/${paymentId}`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#postPaymentsDirectDebitsRefundsRecord\n   * @type {Function}\n   * @description Refund direct debit.\n   \n   * @param {string} directDebitId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .postPaymentsDirectDebitsRefundsRecord(directDebitId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postPaymentsDirectDebitsRefundsRecord(directDebitId, data, headers) {\n    const url = `${baseUri}${version}/payments/direct-debits/${directDebitId}/refunds`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name PaymentsData#postPaymentsDirectDebitsRefusalsRecord\n   * @type {Function}\n   * @description Refuse direct debit.\n   \n   * @param {string} directDebitId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * paymentsData\n   *  .postPaymentsDirectDebitsRefusalsRecord(directDebitId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postPaymentsDirectDebitsRefusalsRecord(directDebitId, data, headers) {\n    const url = `${baseUri}${version}/payments/direct-debits/${directDebitId}/refusals`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name PaymentsData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postPaymentsRecord method\n   *\n   * @name PaymentsData#schemas.postPaymentsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"debitAccountIdentification\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"counterpartyName\": {\n          \"type\": \"string\",\n          \"maxLength\": 256,\n          \"required\": true\n        },\n        \"scheme\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"BBAN\",\n            \"IBAN\",\n            \"ID\"\n          ],\n          \"required\": true\n        },\n        \"identification\": {\n          \"type\": \"string\",\n          \"required\": true\n        },\n        \"counterpartyBIC\": {\n          \"type\": \"string\",\n          \"pattern\": \"[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}\",\n          \"required\": false\n        },\n        \"counterpartyCountry\": {\n          \"type\": \"string\",\n          \"minLength\": 2,\n          \"maxLength\": 2,\n          \"required\": false\n        },\n        \"counterpartyBankName\": {\n          \"type\": \"string\",\n          \"maxLength\": 256,\n          \"required\": false\n        }\n      },\n      \"required\": false\n    },\n    \"creditAccountIdentification\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"counterpartyName\": {\n          \"type\": \"string\",\n          \"maxLength\": 256,\n          \"required\": true\n        },\n        \"scheme\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"BBAN\",\n            \"IBAN\",\n            \"ID\"\n          ],\n          \"required\": true\n        },\n        \"identification\": {\n          \"type\": \"string\",\n          \"required\": true\n        },\n        \"counterpartyBIC\": {\n          \"type\": \"string\",\n          \"pattern\": \"[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}\",\n          \"required\": false\n        },\n        \"counterpartyCountry\": {\n          \"type\": \"string\",\n          \"minLength\": 2,\n          \"maxLength\": 2,\n          \"required\": false\n        },\n        \"counterpartyBankName\": {\n          \"type\": \"string\",\n          \"maxLength\": 256,\n          \"required\": false\n        }\n      },\n      \"required\": false\n    },\n    \"amount\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"currency\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[A-Z]{3}$\",\n      \"required\": true\n    },\n    \"paymentMode\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"SINGLE\",\n        \"RECURRING\"\n      ],\n      \"default\": \"SINGLE\",\n      \"required\": true\n    },\n    \"date\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"required\": false\n    },\n    \"schedule\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"nonWorkingDayExecutionStrategy\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"BEFORE\",\n            \"AFTER\",\n            \"NONE\"\n          ],\n          \"required\": false\n        },\n        \"transferFrequency\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"ONCE\",\n            \"DAILY\",\n            \"WEEKLY\",\n            \"MONTHLY\",\n            \"QUARTERLY\",\n            \"YEARLY\"\n          ],\n          \"required\": true\n        },\n        \"on\": {\n          \"type\": \"integer\",\n          \"required\": true\n        },\n        \"startDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"required\": true\n        },\n        \"endDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"required\": false\n        },\n        \"repeat\": {\n          \"type\": \"integer\",\n          \"required\": false\n        },\n        \"every\": {\n          \"type\": \"integer\",\n          \"enum\": [\n            1,\n            2\n          ],\n          \"required\": true\n        },\n        \"nextExecutionDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"required\": false\n        }\n      },\n      \"required\": false\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"maxLength\": 256,\n      \"required\": false\n    },\n    \"urgent\": {\n      \"type\": \"boolean\",\n      \"required\": false\n    },\n    \"paymentReference\": {\n      \"type\": \"string\",\n      \"maxLength\": 256,\n      \"required\": false\n    },\n    \"createdBy\": {\n      \"type\": \"string\",\n      \"maxLength\": 256,\n      \"required\": false\n    },\n    \"createdAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.postPaymentsRecord = {\"properties\":{\"debitAccountIdentification\":{\"type\":\"object\",\"properties\":{\"counterpartyName\":{\"type\":\"string\",\"maxLength\":256,\"required\":true},\"scheme\":{\"type\":\"string\",\"enum\":[\"BBAN\",\"IBAN\",\"ID\"],\"required\":true},\"identification\":{\"type\":\"string\",\"required\":true},\"counterpartyBIC\":{\"type\":\"string\",\"pattern\":\"[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}\",\"required\":false},\"counterpartyCountry\":{\"type\":\"string\",\"minLength\":2,\"maxLength\":2,\"required\":false},\"counterpartyBankName\":{\"type\":\"string\",\"maxLength\":256,\"required\":false}},\"required\":false},\"creditAccountIdentification\":{\"type\":\"object\",\"properties\":{\"counterpartyName\":{\"type\":\"string\",\"maxLength\":256,\"required\":true},\"scheme\":{\"type\":\"string\",\"enum\":[\"BBAN\",\"IBAN\",\"ID\"],\"required\":true},\"identification\":{\"type\":\"string\",\"required\":true},\"counterpartyBIC\":{\"type\":\"string\",\"pattern\":\"[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}\",\"required\":false},\"counterpartyCountry\":{\"type\":\"string\",\"minLength\":2,\"maxLength\":2,\"required\":false},\"counterpartyBankName\":{\"type\":\"string\",\"maxLength\":256,\"required\":false}},\"required\":false},\"amount\":{\"type\":\"string\",\"required\":true},\"currency\":{\"type\":\"string\",\"pattern\":\"^[A-Z]{3}$\",\"required\":true},\"paymentMode\":{\"type\":\"string\",\"enum\":[\"SINGLE\",\"RECURRING\"],\"default\":\"SINGLE\",\"required\":true},\"date\":{\"type\":\"string\",\"format\":\"date\",\"required\":false},\"schedule\":{\"type\":\"object\",\"properties\":{\"nonWorkingDayExecutionStrategy\":{\"type\":\"string\",\"enum\":[\"BEFORE\",\"AFTER\",\"NONE\"],\"required\":false},\"transferFrequency\":{\"type\":\"string\",\"enum\":[\"ONCE\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\",\"YEARLY\"],\"required\":true},\"on\":{\"type\":\"integer\",\"required\":true},\"startDate\":{\"type\":\"string\",\"format\":\"date\",\"required\":true},\"endDate\":{\"type\":\"string\",\"format\":\"date\",\"required\":false},\"repeat\":{\"type\":\"integer\",\"required\":false},\"every\":{\"type\":\"integer\",\"enum\":[1,2],\"required\":true},\"nextExecutionDate\":{\"type\":\"string\",\"format\":\"date\",\"required\":false}},\"required\":false},\"description\":{\"type\":\"string\",\"maxLength\":256,\"required\":false},\"urgent\":{\"type\":\"boolean\",\"required\":false},\"paymentReference\":{\"type\":\"string\",\"maxLength\":256,\"required\":false},\"createdBy\":{\"type\":\"string\",\"maxLength\":256,\"required\":false},\"createdAt\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false}}};\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getPayments,\n    \n    postPaymentsRecord,\n    \n    getPaymentsRecord,\n    \n    deletePaymentsRecord,\n    \n    getPaymentsStandingOrders,\n    \n    getPaymentsAuthorizations,\n    \n    getPaymentsDirectDebits,\n    \n    getPaymentsCurrencies,\n    \n    getPaymentsRate,\n    \n    postPaymentsAuthorizationsRecord,\n    \n    postPaymentsRejectionsRecord,\n    \n    postPaymentsDirectDebitsRefundsRecord,\n    \n    postPaymentsDirectDebitsRefusalsRecord,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-payments-http-ng/scripts/data-bb-payments-http.js"],"sourceRoot":""}