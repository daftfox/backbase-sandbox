{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6******","webpack:///webpack/bootstrap 22d24c31efc7cba15061?e34e******","webpack:///./model-bb-payment-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114","webpack:///./model-bb-payment-ng/scripts/index.js","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-contact-http-ng\"","webpack:///external \"data-bb-payments-http-ng\"","webpack:///./model-bb-payment-ng/scripts/payment.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-payment-ng/scripts/account-model.js","webpack:///./model-bb-payment-ng/scripts/constants.js"],"names":["modelPaymentModuleKey","modelPaymentKey","module","factory","name","paymentModel","convertRawData","rawData","data","convertToArray","Object","keys","filter","kind","products","length","reduce","memo","concat","map","convertExternalsToProductKind","IDENTIFIER","NAME","aggregatedBalance","productSummaryData","contactData","paymentData","widget","getAccountsFrom","getProductsummaryDebitaccounts","then","catch","httpErrorResponse","getAccountsTo","getProductsummaryCreditaccounts","debitAccountId","accounts","account","id","getExternals","getContacts","createContact","postContactsRecord","contact","makePayment","postPaymentsRecord","paymentParams","getPayments","params","raw","totalCount","parseInt","headers","getStandingOrders","getPaymentsStandingOrders","storeAccounts","savePreference","PAYMENT_ACCOUNTS","JSON","stringify","getAccounts","parse","getStringPreference","ex","getPayment","PAYMENT","storePayment","payment","getPaymentPreferences","paymentPreferences","showExchangeRate","getBooleanPreference","SHOW_EXCHANGE_RATE","recurring","RECURRING","reviewStep","PAYMENT_REVIEW_STEP","REGEX","DESCRIPTION_REGEX","notificationDismissTime","getLongPreference","NOTIFICATION_DISMISS","maxNavPages","PAYMENT_MAX_NAV_PAGES","paginationType","PAYMENT_PAGINATION_TYPE","paymentOrderPageSize","PAYMENT_ORDER_PAGE_SIZE","standingOrderPageSize","STANDING_ORDER_PAGE_SIZE","authorizationPageSize","AUTHORIZATION_PAGE_SIZE","directDebitPageSize","DIRECT_DEBIT_PAGE_SIZE","urgent","URGENT","directDebitMaxNavPages","DIRECT_DEBIT_MAX_NAV_PAGES","directDebitPaginationType","DIRECT_DEBIT_PAGINATION_TYPE","showPin","SHOW_PIN","getPaymentSchedule","endingType","transactionDayCallback","schedule","transferFrequency","startDate","endDate","repeat","on","paymentMode","value","SINGLE","reqPaymentMode","reqAddition","date","every","ON","AFTER","assign","newPayment","today","Date","debitAccountIdentification","scheme","identification","creditAccountIdentification","amount","currency","description","getFullYear","getMonth","getDate","getCurrencies","getPaymentsCurrencies","getRate","getPaymentsRate","rateParams","getPaymentsAuthorizations","authorizePayment","postPaymentsAuthorizationsRecord","paymentId","authorizeMultiplePayments","succeeded","failed","promises","paymentsId","push","Promise","all","rejectPayment","postPaymentsRejectionsRecord","rejectMultiplePayments","paymentIds","deletePayment","deletePaymentsRecord","deleteMultiplePayments","getDirectDebits","getPaymentsDirectDebits","refundDirectDebit","directDebitId","postPaymentsDirectDebitsRefundsRecord","refuseDirectDebit","postPaymentsDirectDebitsRefusalsRecord","singleTransfer","endingTypes","paymentModes","maskCardNumber","suffix","masked","defaultViewModelFactory","externalTransferAllowed","crossCurrencyAllowed","viewModelFactories","currentAccounts","identifier","IBAN","BBAN","availableBalance","savingsAccounts","bookedBalance","termDeposits","principalAmount","loans","creditCards","cardNumberSuffix","investmentAccounts","currentInvestmentValue","external","viewModelFactory","kindId","Preference","NEVER","externalType"],"mappings":"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","file":"model-bb-payment-ng/scripts/model-bb-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-contact-http-ng\"), require(\"data-bb-payments-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-payment-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-contact-http-ng\", \"data-bb-payments-http-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-payment-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-contact-http-ng\"), require(\"data-bb-payments-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-payment-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-contact-http-ng\"], root[\"data-bb-payments-http-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_60__, __WEBPACK_EXTERNAL_MODULE_75__, __WEBPACK_EXTERNAL_MODULE_76__, __WEBPACK_EXTERNAL_MODULE_77__, __WEBPACK_EXTERNAL_MODULE_78__, __WEBPACK_EXTERNAL_MODULE_80__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 22d24c31efc7cba15061","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-payment-ng/model.xml\n// module id = 0\n// module chunks = 6","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 60\n// module chunks = 5 6 7 8 9 10 11 12 13","/**\n * @module model-bb-payment-ng\n *\n * @description\n * Payment widget model.\n *\n * @example\n * import modelPaymentModuleKey, {\n *   modelPaymentKey,\n * } from 'model-bb-payment-ng';\n *\n * angular.module('widget-bb-payment-ng', [\n *   modelPaymentModuleKey,\n * ])\n * .controller('PaymentController', [\n *   modelPaymentKey,\n *   ...,\n * ])\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport contactDataModuleKey, {\n  contactDataKey,\n} from 'data-bb-contact-http-ng';\n\nimport paymentDataModuleKey, {\n  paymentsDataKey,\n} from 'data-bb-payments-http-ng';\n\nimport Model from './payment';\n\nexport const modelPaymentModuleKey = 'model-bb-payment-ng';\nexport const modelPaymentKey = 'model-bb-payment-ng:model';\n\nexport default angular\n  .module('model-bb-payment-ng', [\n    productSummaryDataModuleKey,\n    contactDataModuleKey,\n    paymentDataModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(modelPaymentKey, [\n    productSummaryDataKey,\n    contactDataKey,\n    paymentsDataKey,\n    widgetKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n/**\n * @typedef {object} AccountView\n * @property {string} id The internal account identifier\n * @property {string} name The account's name, suitable for display to users\n * @property {?string} identifier The identifier of the account from the user's perspective\n * @property {?string} amount The most important associated value to be displayed\n * @property {?string} currency Account currency\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_75__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 75\n// module chunks = 6 10 11","module.exports = __WEBPACK_EXTERNAL_MODULE_76__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 76\n// module chunks = 6","module.exports = __WEBPACK_EXTERNAL_MODULE_77__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-contact-http-ng\"\n// module id = 77\n// module chunks = 6","module.exports = __WEBPACK_EXTERNAL_MODULE_78__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-payments-http-ng\"\n// module id = 78\n// module chunks = 6","/* eslint max-len: [\"error\", { \"ignoreComments\": true }] */\n\nimport { fromHttpError } from 'lib-bb-model-errors';\n\nimport createAccountModel from './account-model';\n\nimport {\n  singleTransfer,\n  endingTypes,\n  paymentModes,\n  externalType,\n  Preference,\n  description,\n} from './constants';\n\n/**\n * @description\n * Extracting data set from raw response\n *\n * @inner\n * @param rawData - response\n * @returns [object] data response\n */\nconst convertRawData = rawData => rawData.data || [];\n\n/**\n * @description\n * Method to normalize data\n *\n * @inner\n * @param rawData - response\n * @returns {AccountView[]}\n */\nconst convertToArray = rawData => Object.keys(rawData)\n  .filter(kind => rawData[kind].products && rawData[kind].products.length > 0)\n  .reduce((memo, kind) => memo.concat(\n    rawData[kind].products.map(createAccountModel(kind))\n  ), []);\n\n/**\n * @description\n * Method to format external contacts data as account kind\n *\n * @inner\n * @param rawData - response\n * @returns {ProductKind}\n */\nfunction convertExternalsToProductKind(rawData) {\n  return {\n    [externalType.IDENTIFIER]: {\n      name: externalType.NAME,\n      products: rawData,\n      aggregatedBalance: 0.0,\n    },\n  };\n}\n\n/**\n * Model factory for model-bb-payment-ng\n *\n * @inner\n * @type {function}\n *\n * @returns {object}\n */\nexport default function paymentModel(\n  productSummaryData,\n  contactData,\n  paymentData,\n  widget\n) {\n  /**\n   * @name paymentModel#getAccountsFrom\n   * @type {function}\n   *\n   * @description\n   * Load accounts available to payment from.\n   *\n   * @returns {Promise.<AccountView[]>} A Promise with flat accounts list.\n   */\n  const getAccountsFrom = () => productSummaryData\n    .getProductsummaryDebitaccounts()\n    .then(convertRawData)\n    .then(convertToArray)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#getAccountsTo\n   * @type {function}\n   *\n   * @description\n   * Load accounts available for payment to.\n   *\n   * @param {string}  debitAccountId  Filter account list with debitAccountId param\n   * @returns {Promise.<AccountView[]>} A Promise with flat accounts list.\n   */\n  const getAccountsTo = debitAccountId => productSummaryData\n    .getProductsummaryCreditaccounts({\n      debitAccountId,\n    })\n    .then(convertRawData)\n    .then(convertToArray)\n    .then(accounts => accounts.filter(account => account.id !== debitAccountId))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#getExternals\n   * @type {function}\n   *\n   * @description\n   * Load external accounts from contact list.\n   *\n   * @returns {Promise.<AccountView[]>} A Promise with flat accounts list.\n   */\n  const getExternals = () => contactData\n    .getContacts()\n    .then(convertRawData)\n    .then(convertExternalsToProductKind)\n    .then(convertToArray)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#createContact\n   * @type {function}\n   *\n   * @description\n   * Creates a new contact\n   *\n   * @param {object} contact Contact data\n   * @returns {Promise}\n   */\n  const createContact = contact => contactData\n    .postContactsRecord(contact)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#makePayment\n   * @type {function}\n   *\n   * @description\n   * Send payment to endpoint.\n   *\n   * @param {object} paymentParams  Payment params to send\n   * @returns {Promise.<object>} A Promise with response.\n   */\n  const makePayment = paymentParams => paymentData\n    .postPaymentsRecord(paymentParams)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#getPayments\n   * @type {function}\n   *\n   * @description\n   * Get payments data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<Payments, ModelError>} A Promise\n   */\n  const getPayments = params => paymentData\n    .getPayments(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#getStandingOrders\n   * @type {function}\n   *\n   * @description\n   * Get standing orders data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<Payments, ModelError>} A Promise\n   */\n  const getStandingOrders = params => paymentData\n    .getPaymentsStandingOrders(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#storeAccounts\n   * @type {function}\n   *\n   * @description\n   * Stores a given list of accounts as current in sync preferences (mobile)\n   *\n   * @param {AccountView[]} accounts Accounts data\n   */\n  function storeAccounts(accounts) {\n    widget\n      .savePreference(Preference.PAYMENT_ACCOUNTS, JSON.stringify(accounts));\n  }\n\n  /**\n   * @name paymentModel#getAccounts\n   * @type {function}\n   *\n   * @description\n   * Tries to read the current accounts from sync preferences (mobile)\n   *\n   * @returns {AccountView[]} Accounts data\n   */\n  function getAccounts() {\n    try {\n      return JSON\n        .parse(widget.getStringPreference(Preference.PAYMENT_ACCOUNTS));\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  /**\n   * @name paymentModel#getPayment\n   * @type {function}\n   *\n   * @description\n   * Tries to read the stored payment from sync preferences (mobile)\n   *\n   * @returns {Payment} Payment data\n   */\n  function getPayment() {\n    try {\n      return JSON.parse(widget.getStringPreference(Preference.PAYMENT));\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  /**\n   * @name paymentModel#storePayment\n   * @type {function}\n   *\n   * @description\n   * Stores a given payment as current in sync preferences (mobile)\n   *\n   * @param {Payment} payment Payment data\n   */\n  function storePayment(payment) {\n    widget.savePreference(Preference.PAYMENT, JSON.stringify(payment));\n  }\n\n  /**\n   * @name paymentModel#getPaymentPreferences\n   * @type {function}\n   *\n   * @description\n   * Tries to read the stored payment from sync preferences (mobile)\n   *\n   * @returns {Payment} Payment data\n   */\n  function getPaymentPreferences() {\n    const paymentPreferences = {};\n\n    paymentPreferences.showExchangeRate = widget\n      .getBooleanPreference(Preference.SHOW_EXCHANGE_RATE);\n    paymentPreferences.recurring = widget\n      .getBooleanPreference(Preference.RECURRING);\n    paymentPreferences.reviewStep =\n      // For backward compatibility we return true if the preference is not set\n      // TODO: Remove this logic when the widget version is bumped to v2.0.0\n      (widget.getStringPreference(Preference.PAYMENT_REVIEW_STEP) !== null)\n      ? widget.getBooleanPreference(Preference.PAYMENT_REVIEW_STEP) : true;\n    paymentPreferences.REGEX = widget\n      .getStringPreference(Preference.DESCRIPTION_REGEX) || description.REGEX;\n    paymentPreferences.notificationDismissTime = widget\n      .getLongPreference(Preference.NOTIFICATION_DISMISS);\n    paymentPreferences.maxNavPages =\n      widget.getLongPreference(Preference.PAYMENT_MAX_NAV_PAGES);\n    paymentPreferences.paginationType =\n      widget.getStringPreference(Preference.PAYMENT_PAGINATION_TYPE);\n    paymentPreferences.paymentOrderPageSize = widget\n      .getLongPreference(Preference.PAYMENT_ORDER_PAGE_SIZE);\n    paymentPreferences.standingOrderPageSize = widget\n      .getLongPreference(Preference.STANDING_ORDER_PAGE_SIZE);\n    paymentPreferences.authorizationPageSize = widget\n      .getLongPreference(Preference.AUTHORIZATION_PAGE_SIZE);\n    paymentPreferences.directDebitPageSize = widget\n      .getLongPreference(Preference.DIRECT_DEBIT_PAGE_SIZE);\n    paymentPreferences.urgent = widget\n      .getBooleanPreference(Preference.URGENT);\n    paymentPreferences.directDebitMaxNavPages =\n      widget.getLongPreference(Preference.DIRECT_DEBIT_MAX_NAV_PAGES);\n    paymentPreferences.directDebitPaginationType =\n      widget.getStringPreference(Preference.DIRECT_DEBIT_PAGINATION_TYPE);\n    paymentPreferences.showPin = widget\n      .getBooleanPreference(Preference.SHOW_PIN);\n\n    return paymentPreferences;\n  }\n\n  /**\n   * @description\n   * Compiles \"schedule\" object according to the schema\n   *\n   * @name paymentModel#getPaymentSchedule\n   * @type {function}\n   * @param {Payment} payment\n   * @param {string} endingType\n   * @returns {object} schedule object\n   */\n  const getPaymentSchedule = ({\n    schedule: {\n      transferFrequency,\n      startDate,\n      endDate,\n      repeat,\n      on,\n    },\n  }, endingType, transactionDayCallback) => {\n    const paymentMode =\n      !transferFrequency || transferFrequency.value === singleTransfer.value ?\n        paymentModes.SINGLE :\n        paymentModes.RECURRING;\n\n    const reqPaymentMode = {\n      paymentMode,\n    };\n\n    const reqAddition = paymentMode === paymentModes.SINGLE ? {\n      date: startDate,\n    } : {\n      schedule: {\n        transferFrequency: transferFrequency.value,\n        every: transferFrequency.every,\n        startDate,\n        endDate: endingType === endingTypes.ON ? endDate : null,\n        repeat: endingType === endingTypes.AFTER ? repeat : null,\n        on: transactionDayCallback ?\n          transactionDayCallback(startDate, transferFrequency) : on,\n      },\n    };\n\n    return Object.assign(reqPaymentMode, reqAddition);\n  };\n\n  /**\n   * @description\n   * Create new payment model with default values\n   *\n   * @name paymentModel#newPayment\n   * @type {function}\n   * @returns {Payment}\n   */\n  const newPayment = () => {\n    const today = new Date();\n    return {\n      debitAccountIdentification: {\n        scheme: 'ID',\n        identification: null,\n      },\n      creditAccountIdentification: {\n        scheme: 'ID',\n        identification: null,\n      },\n      amount: null,\n      currency: null,\n      description: null,\n      paymentMode: paymentModes.SINGLE,\n      schedule: {\n        startDate: today,\n        endDate: new Date(\n            today.getFullYear(),\n            today.getMonth() + 1,\n            today.getDate()\n          ),\n        transferFrequency: singleTransfer,\n        repeat: null,\n        on: null,\n      },\n    };\n  };\n\n /**\n  * @typedef {object} Currency\n  * @property {string} id The internal identifier\n  * @property {string} name Currency name, suitable for display to users\n  */\n  /**\n   * @description\n   * Get currencies available for payment.\n   *\n   * @name paymentModel#getCurrencies\n   * @type {function}\n   * @returns {Currency[]}\n   */\n  const getCurrencies = () =>\n    paymentData\n      .getPaymentsCurrencies()\n      .then(convertRawData)\n      .catch((httpErrorResponse) => {\n        throw fromHttpError(httpErrorResponse);\n      });\n\n  /**\n   * @typedef {object} Rate\n   * @property {number} rate\n   */\n  /**\n   * @description\n   * Get currencies available for payment.\n   *\n   * @name paymentModel#getRate\n   * @type {function}\n   * @returns {Rate} rate\n   */\n  const getRate = rateParams =>\n    paymentData\n      .getPaymentsRate(rateParams)\n      .then(convertRawData)\n      .catch((httpErrorResponse) => {\n        throw fromHttpError(httpErrorResponse);\n      });\n\n  /**\n   * @name paymentModel#getPaymentsAuthorizations\n   * @type {function}\n   * @description\n   * Retrieve list of only payments, which can be authorized or rejected.\n   * @param {object} params Parameters for the query string\n   * @returns {Promise.<array>} A Promise with an array of payment authorisations.\n   */\n  const getPaymentsAuthorizations = (params) => paymentData\n    .getPaymentsAuthorizations(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#authorizePayment\n   * @type {function}\n   * @description\n   * Authorizes a payment.\n   * @returns {Promise}\n   */\n  const authorizePayment = paymentId => paymentData\n    .postPaymentsAuthorizationsRecord(paymentId)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#authorizeMultiplePayments\n   * @type {function}\n   * @description\n   * Authorizes multiple payments at once.\n   * @returns {Promise}\n   */\n  const authorizeMultiplePayments = paymentsId => {\n    const succeeded = [];\n    const failed = [];\n    const promises = paymentsId.map(\n      id => paymentData\n        .postPaymentsAuthorizationsRecord(id)\n        .then(() => succeeded.push(id))\n        .catch(() => failed.push(id))\n    );\n\n    return Promise.all(promises)\n      .then(() => ({\n        succeeded,\n        failed,\n      }));\n  };\n\n  /**\n   * @name paymentModel#rejectPayment\n   * @type {function}\n   * @description\n   * Authorizes a payment.\n   * @returns {Promise}\n   */\n  const rejectPayment = paymentId => paymentData\n    .postPaymentsRejectionsRecord(paymentId)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#rejectMultiplePayments\n   * @type {function}\n   * @description\n   * Rejects multiple payments at once.\n   * @returns {Promise}\n   */\n  const rejectMultiplePayments = paymentIds => {\n    const succeeded = [];\n    const failed = [];\n    const promises = paymentIds.map(\n      id => paymentData\n        .postPaymentsRejectionsRecord(id)\n        .then(() => succeeded.push(id))\n        .catch(() => failed.push(id))\n    );\n\n    return Promise.all(promises)\n      .then(() => ({\n        succeeded,\n        failed,\n      }));\n  };\n\n  /**\n   * @name paymentModel#deletePayment\n   * @type {function}\n   * @description\n   * Delete a single payment.\n   * @param {string} paymentId Id of the payment\n   * @returns {Promise}\n   */\n  const deletePayment = paymentId => paymentData\n    .deletePaymentsRecord(paymentId)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#deleteMultiplePayments\n   * @type {function}\n   * @description\n   * Deletes multiple payments at once.\n   * @returns {Promise}\n   */\n  const deleteMultiplePayments = paymentIds => {\n    const succeeded = [];\n    const failed = [];\n    const promises = paymentIds.map(\n      id => paymentData\n        .deletePaymentsRecord(id)\n        .then(() => succeeded.push(id))\n        .catch(() => failed.push(id))\n    );\n\n    return Promise.all(promises)\n      .then(() => ({\n        succeeded,\n        failed,\n      }));\n  };\n\n  /**\n   * @name paymentModel#getDirectDebits\n   * @type {function}\n   *\n   * @description\n   * Get direct debits data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<DirectDebits, ModelError>} A Promise\n   */\n  const getDirectDebits = params => paymentData\n    .getPaymentsDirectDebits(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#refundDirectDebit\n   * @type {function}\n   *\n   * @description\n   * Refund direct debit.\n   *\n   * @param  {string} directDebitId Direct Debit ID\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<DirectDebits, ModelError>} A Promise\n   */\n  const refundDirectDebit = (directDebitId, params) => paymentData\n    .postPaymentsDirectDebitsRefundsRecord(directDebitId, params)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentModel#refuseDirectDebit\n   * @type {function}\n   *\n   * @description\n   * Refuse direct debit.\n   *\n   * @param  {string} directDebitId Direct Debit ID\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<DirectDebits, ModelError>} A Promise\n   */\n  const refuseDirectDebit = (directDebitId, params) => paymentData\n    .postPaymentsDirectDebitsRefusalsRecord(directDebitId, params)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n  * @name paymentModel\n  * @type {object}\n  *\n  * @description\n  * Payment widget and Authorization widget model service.\n  */\n  return {\n    // constants\n    singleTransfer,\n    endingTypes,\n    paymentModes,\n    // methods\n    getAccountsFrom,\n    getAccountsTo,\n    getExternals,\n    createContact,\n    makePayment,\n    getPayments,\n    getStandingOrders,\n    storeAccounts,\n    getAccounts,\n    newPayment,\n    getPayment,\n    storePayment,\n    getPaymentSchedule,\n    getPaymentPreferences,\n    getCurrencies,\n    getRate,\n    getPaymentsAuthorizations,\n    authorizePayment,\n    authorizeMultiplePayments,\n    rejectPayment,\n    rejectMultiplePayments,\n    deletePayment,\n    deleteMultiplePayments,\n    getDirectDebits,\n    refundDirectDebit,\n    refuseDirectDebit,\n  };\n}\n\n/**\n * @typedef {object} AccountIdentification\n * @property {string} scheme Identification of the product\n * @property {?string} counterpartyName Name of the counterparty\n * @property {string} identification Unique identification of the product\n */\n\n/**\n * @typedef {object} Schedule\n * @description\n * Schedule for recurring transfer. Mandatory if paymentMode is RECURRING\n *\n * @property {string} nonWorkingDayExecutionStrategy\n * @property {string} transferFrequency - Denotes frequency type of transfer\n * @property {number} on - Denotes day on which transfer should be executed\n * @property {number} repeat - Number of transfer to be executed\n * @property {number} every - Indicates skip interval of transfer\n * @property {date} startDate - When to start executing the schedule\n * @property {date} endDate - When to stop transfers\n */\n\n/**\n * Payments type definition\n * @typedef {object} Payments\n * @property {Payment[]}  data   Array of Payment orders\n * @property {number} totalCount Number of items in the collection\n */\n\n/**\n * @typedef {object} Payment\n * @property {string} status Authorization status of the payment\n * @property {?AccountIdentification} debitAccountIdentification Data of the payment source account\n * @property {?AccountIdentification} creditAccountIdentification Data of the payment target account\n * @property {number} amount Amount of the payment\n * @property {string} currency Currency of the payment\n * @property {string} date  Execution date of the payment\n * @property {string} description Description of the payment\n * @property {string} paymentMode Mode of the payment\n * @property {Schedule} schedule Schedule for recurring transfer\n * @property {?boolean} urgent Flag if it is an urgent payment\n */\n\n/**\n * Direct Debits type definition\n * @typedef {object} DirectDebits\n * @property {DirectDebit[]} data Direct Debits orders\n * @property {number} totalCount Number of items in the collection\n */\n\n/**\n * Direct Debit type definition\n * @typedef {object} DirectDebit\n * @property {string} id Direct Debit ID\n * @property {string} status Direct Debit status\n * @property {?number} refundDayCount\n * @property {string} creditorReference Creditor ID\n * @property {string} mandateReference Mandate ID\n * @property {AccountIdentification} debitAccountIdentification Data of the payment debit account\n * @property {AccountIdentification} creditAccountIdentification Data of the payment credit account\n * @property {number} amount Amount of the payment\n * @property {string} currency Currency of the payment\n * @property {string} date  Execution date of the payment\n * @property {string} description Description of the payment\n * @property {string} paymentMode Mode of the payment\n * @property {Schedule} schedule Schedule for recurring transfer\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-ng/scripts/payment.js","module.exports = __WEBPACK_EXTERNAL_MODULE_80__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 80\n// module chunks = 6 9 10 11 12 13","import { externalType } from './constants';\n\nconst maskCardNumber = (suffix) => {\n  let masked = '';\n  if (suffix) {\n    masked = `XXXX-XXXX-XXXX-${suffix}`;\n  }\n  return masked;\n};\n\nconst defaultViewModelFactory = ({\n  id,\n  name,\n  currency,\n  externalTransferAllowed,\n  crossCurrencyAllowed,\n}) => ({\n  id,\n  name,\n  currency,\n  externalTransferAllowed,\n  crossCurrencyAllowed,\n});\n\nconst viewModelFactories = {\n  currentAccounts: account => Object.assign({\n    identifier: account.IBAN || account.BBAN,\n    amount: account.availableBalance,\n  },\n  account),\n\n  savingsAccounts: account => Object.assign({\n    identifier: account.BBAN || account.IBAN,\n    amount: account.bookedBalance,\n  },\n  account),\n\n  termDeposits: account => Object.assign({\n    amount: account.principalAmount,\n  },\n  account),\n\n  loans: account => Object.assign({\n    amount: account.bookedBalance,\n  },\n  account),\n\n  creditCards: account => Object.assign({\n    identifier: maskCardNumber(account.cardNumberSuffix),\n    amount: account.availableBalance,\n  },\n  account),\n\n  investmentAccounts: account => Object.assign({\n    amount: account.currentInvestmentValue,\n  },\n  account),\n\n  [externalType.IDENTIFIER]: contact => Object.assign({\n    identifier: contact.accounts[0].IBAN,\n    external: true,\n  },\n  contact),\n};\n\nconst viewModelFactory = (kind, account) =>\n  (viewModelFactories[kind] || defaultViewModelFactory)(account);\n\n/**\n * Prepare the fields of a account into a form ready for display to the User\n *\n * @inner\n * @param {object} account The source account from the API\n * @returns {AccountView}\n */\nexport default (kindId) => (account) =>\n  viewModelFactory(kindId, account);\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-ng/scripts/account-model.js","/**\n * Widget preferences enum\n * @type {object}\n */\nexport const Preference = {\n  PAYMENT: 'bb.payment.payment',\n  PAYMENT_ACCOUNTS: 'bb.payment.accounts',\n  RECURRING: 'bb.payment.recurring',\n  SHOW_EXCHANGE_RATE: 'bb.payment.show.exchange',\n  PAYMENT_REVIEW_STEP: 'bb.payment.review.step',\n  DESCRIPTION_REGEX: 'bb.payment.description.REGEX',\n  NOTIFICATION_DISMISS: 'bb.authorization.notificationDismissTime',\n  PAYMENT_ORDER_PAGE_SIZE: 'bb.paymentOrder.pageSize',\n  STANDING_ORDER_PAGE_SIZE: 'bb.standingOrder.pageSize',\n  AUTHORIZATION_PAGE_SIZE: 'bb.authorization.pageSize',\n  DIRECT_DEBIT_PAGE_SIZE: 'bb.directDebit.pageSize',\n  URGENT: 'bb.payment.urgent',\n  PAYMENT_MAX_NAV_PAGES: 'bb.payment.maxNavPages',\n  PAYMENT_PAGINATION_TYPE: 'bb.payment.paginationType',\n  DIRECT_DEBIT_MAX_NAV_PAGES: 'bb.directDebit.maxNavPages',\n  DIRECT_DEBIT_PAGINATION_TYPE: 'bb.directDebit.paginationType',\n  SHOW_PIN: 'bb.payment.show.pin',\n};\n\n/**\n * @description\n * Payment description condition values\n *\n * @name description\n * @type {object}\n */\nexport const description = {\n  REGEX: '^[ \\\\w_@./#!*()=+-]{0,140}$',\n};\n\n/**\n * @description\n * Single transfer frequency object\n *\n * @name singleTransfer\n * @type {object}\n */\nexport const singleTransfer = {\n  name: 'form.schedule.frequency.once',\n  value: 'ONCE',\n};\n\n/**\n * @description\n * Available payment modes\n *\n * @name paymentModes\n * @type {object}\n */\nexport const paymentModes = {\n  SINGLE: 'SINGLE',\n  RECURRING: 'RECURRING',\n};\n\n/**\n * @description\n * Available payment ending types\n *\n * @name endingTypes\n * @type {object}\n */\nexport const endingTypes = {\n  NEVER: 'never',\n  ON: 'on',\n  AFTER: 'after',\n};\n\n/**\n * @description\n * Identifier and name for external account product kind\n *\n * @name externalType\n * @type {object}\n */\nexport const externalType = {\n  IDENTIFIER: 'ExternalAccounts',\n  NAME: 'Contacts',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-ng/scripts/constants.js"],"sourceRoot":""}