{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3bc677881f227a6d3bba","webpack:///./fe-dist/http-ng/data-bb-trading-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-trading-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-trading-http-ng/scripts/data-bb-trading-http.js"],"names":["tradingDataModuleKey","tradingDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getTradingCurrencypair","params","url","method","then","catch","err","getTradingCurrencyrate","schemas"],"mappings":"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","file":"data-bb-trading-http-ng/scripts/data-bb-trading-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-trading-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-trading-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-trading-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3bc677881f227a6d3bba","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-trading-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-trading-http-ng\n *\n * @description A data module for accessing the Trading REST API.\n *\n * @returns {String} `data-bb-trading-http-ng`\n * @example\n * import tradingDataModuleKey, {\n *   tradingDataKey,\n * } from 'data-bb-trading-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport tradingData from './data-bb-trading-http';\n\nconst tradingDataModuleKey = 'data-bb-trading-http-ng';\n/**\n * @name tradingDataKey\n * @type {string}\n * @description Angular dependency injection key for the TradingData service\n */\nexport const tradingDataKey = 'data-bb-trading-http-ng:tradingData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(tradingDataModuleKey, [])\n  \n  /**\n   * @constructor TradingData\n   * @type {object}\n   *\n   * @description Public api for data-bb-trading-http-ng service\n   *\n   */\n  .provider(tradingDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name TradingDataProvider\n     * @type {object}\n     * @ngkey data-bb-trading-http-ng:tradingDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-trading-http-ng:tradingDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-trading-http-ng:tradingDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name TradingDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name TradingDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       tradingData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-trading-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n  definedTypes['TradingData.TradingCurrenciesPairsGet'] = {\"type\":\"array\",\"items\":{\"properties\":{\"pairKey\":{\"type\":\"string\",\"minLength\":6,\"maxLength\":7,\"required\":true}}}};\n  \n  definedTypes['TradingData.TradingCurrenciesRatesGet'] = {\"type\":\"array\",\"items\":{\"properties\":{\"pairKey\":{\"type\":\"string\",\"minLength\":6,\"maxLength\":7,\"required\":true},\"price\":{\"type\":\"number\",\"required\":true},\"change\":{\"type\":\"number\",\"required\":false},\"changePct\":{\"type\":\"number\",\"required\":false},\"bid\":{\"type\":\"number\",\"required\":true},\"ask\":{\"type\":\"number\",\"required\":true}}}};\n  \n\n  \n  /**\n   * @typedef TradingData.TradingCurrenciesPairsGet\n   * @type {Array.<TradingData.TradingCurrenciesPairsItem>}\n   */\n  \n  /**\n   * @typedef TradingData.TradingCurrenciesPairsItem\n   * @type {Object}\n   * @property {String} pairKey The id of the currency pair according to international conventions.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef TradingData.TradingCurrenciesRatesGet\n   * @type {Array.<TradingData.TradingCurrenciesRatesItem>}\n   */\n  \n  /**\n   * @typedef TradingData.TradingCurrenciesRatesItem\n   * @type {Object}\n   * @property {String} pairKey The id of the currency pair according to international conventions.\n   * @property {Number} price The last executed price for the currency pair.\n   * @property {?Number} change Today's price change.\n   * @property {?Number} changePct Today's price change in percent.\n   * @property {Number} bid Bid price available for the currency pair.\n   * @property {Number} ask Ask price available for the currency pair.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name TradingData#getTradingCurrencypair\n   * @type {Function}\n   * @description Retrieve list of trading currencies pairs.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.query The search term used to search for trading currencies pairs.\n     \n   * @param {?number} params.from Page Number. Skip over pages of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?string} params.cursor Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link TradingData.TradingCurrenciesPairsGet} on success \n   *\n   * @example\n   * tradingData\n   *  .getTradingCurrencypair(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getTradingCurrencypair(params, headers) {\n    const url = `${baseUri}${version}/trading/currencypair`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name TradingData#getTradingCurrencyrate\n   * @type {Function}\n   * @description Retrieve list of trading currency rate.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.currencypair The currency rate.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link TradingData.TradingCurrenciesRatesGet} on success \n   *\n   * @example\n   * tradingData\n   *  .getTradingCurrencyrate(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getTradingCurrencyrate(params, headers) {\n    const url = `${baseUri}${version}/trading/currencyrate`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  const schemas = {};\n  \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getTradingCurrencypair,\n    \n    getTradingCurrencyrate,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-trading-http-ng/scripts/data-bb-trading-http.js"],"sourceRoot":""}