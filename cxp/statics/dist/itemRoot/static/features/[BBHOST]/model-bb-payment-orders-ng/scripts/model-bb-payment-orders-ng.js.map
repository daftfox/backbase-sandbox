{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6****************","webpack:///webpack/bootstrap 59b29c6361f41ebec32c?d678****************","webpack:///./model-bb-payment-orders-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*******","webpack:///./model-bb-payment-orders-ng/scripts/index.js","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"data-bb-payment-orders-http-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-contact-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///./model-bb-payment-orders-ng/scripts/payment-orders.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-payment-orders-ng/scripts/account-model.js","webpack:///./model-bb-payment-orders-ng/scripts/constants.js"],"names":["moduleKey","modelPaymentOrdersKey","angular","module","paymentOrdersDataModuleKey","productSummaryDataModuleKey","contactDataModuleKey","bbStorageModuleKey","widgetModuleKey","factory","paymentOrdersDataKey","productSummaryDataKey","contactDataKey","bbStorageServiceKey","widgetKey","Model","name","paymentOrdersModel","convertToAccountsArray","Object","keys","rawData","filter","kind","products","length","reduce","memo","concat","map","convertExternalsToProductKind","ExternalType","IDENTIFIER","NAME","aggregatedBalance","paymentOrdersData","productSummaryData","contactData","bbStorage","widget","createPaymentOrder","postPaymentOrdersRecord","paymentOrderParams","catch","error","httpErrorResponse","status","assign","breachReport","data","getCurrencies","getPaymentOrdersCurrencies","then","code","normalizeArrangementsParameters","parameters","normalizedParameters","copy","searchQuery","searchTerm","query","getProductSelectedId","getItem","BbStorageKeys","PRODUCT_SELECTED","getContextArrangements","context","params","full","getProductsummaryContextArrangements","ArrangementPrivilegesParameters","raw","totalCount","parseInt","headers","getAccountsFrom","Context","SEPA_CT","size","debitAccount","getAccountsTo","debitAccountId","creditAccount","accounts","account","id","getAccountsToFull","getExternals","getContacts","getContactsByName","getRate","getPaymentOrdersRate","rateParams","rate","createContact","postContactsRecord","contact","getPaymentOrders","getStandingOrdersPreferences","paymentPreferences","standingOrdersPageSize","getLongPreference","Preference","PAGE_SIZE","standingOrdersMaxNavPages","MAX_NAV_PAGES","standingOrdersPaginationType","getStringPreference","PAGINATION_TYPE","standingOrdersNotificationDismissTime","NOTIFICATION_DISMISS","getStandingOrders","paymentMode","getPaymentDraftsPreferences","paymentDraftPreferences","paymentDraftsPageSize","paymentDraftsMaxNavPages","paymentDraftsPaginationType","paymentDraftsNotificationDismissTime","getPaymentDrafts","getPaymentOrderDrafts","saveDraft","postPaymentOrderDraftsRecord","draftPayment","deleteDraft","deletePaymentOrderDraftsRecord","draftPaymentId","editDraft","putPaymentOrderDraftsRecord","validatePayment","postPaymentOrdersValidateRecord","payment","errorsArr","errors","messages","message","push","updatePayment","paymentId","paymentData","putPaymentOrdersRecord","authorizePayment","putPaymentOrdersApprovalsRecord","approvalStatus","approve","rejectPayment","reject","cancelPayment","deletePaymentOrdersRecord","requestPaymentCancel","version","postPaymentOrdersCancelRecord","deletePayment","requestBulkReject","putPaymentOrdersBulkApprovalsRecord","paymentOrderIds","requestBulkApprove","PaymentType","maskCardNumber","suffix","defaultViewModelFactory","currency","externalTransferAllowed","crossCurrencyAllowed","viewModelFactories","currentAccounts","identifier","IBAN","BBAN","amount","availableBalance","savingsAccounts","bookedBalance","termDeposits","principalAmount","loans","creditCards","cardNumberSuffix","investmentAccounts","currentInvestmentValue","external","viewModelFactory","createAccountModel","kindId","getExtendedAccountModelFlat","accountsRaw","productNumber","resourceName","US_DOMESTIC_WIRE","US_FOREIGN_WIRE","INTERNAL","businessFunction","privilege"],"mappings":"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","file":"model-bb-payment-orders-ng/scripts/model-bb-payment-orders-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-contact-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-payment-orders-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"data-bb-payment-orders-http-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-contact-http-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-payment-orders-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-contact-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-payment-orders-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"data-bb-payment-orders-http-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-contact-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_142__, __WEBPACK_EXTERNAL_MODULE_143__, __WEBPACK_EXTERNAL_MODULE_144__, __WEBPACK_EXTERNAL_MODULE_145__, __WEBPACK_EXTERNAL_MODULE_146__, __WEBPACK_EXTERNAL_MODULE_148__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 59b29c6361f41ebec32c","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-payment-orders-ng/model.xml\n// module id = 0\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 18\n// module chunks = 0 8 9 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33","/**\n * @module model-bb-payment-orders-ng\n *\n * @description\n * Model for widget-bb-payment-orders-ng\n *\n * @example\n * import modelPaymentOrdersModuleKey, { modelPaymentOrdersKey } from 'model-bb-payment-orders-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     modelPaymentOrdersModuleKey,\n *   ])\n *   .factory('someFactory', [\n *     modelPaymentOrdersKey,\n *     // into\n *     function someFactory(paymentOrdersModel) {\n *       // ...\n *     },\n *   ]);\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport paymentOrdersDataModuleKey, {\n  paymentOrdersDataKey,\n} from 'data-bb-payment-orders-http-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport contactDataModuleKey, { contactDataKey } from 'data-bb-contact-http-ng';\n\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport Model from './payment-orders';\n\nconst moduleKey = 'model-bb-payment-orders-ng';\nexport const modelPaymentOrdersKey = `${moduleKey}:model`;\n\nexport default angular\n  .module(moduleKey, [\n    paymentOrdersDataModuleKey,\n    productSummaryDataModuleKey,\n    contactDataModuleKey,\n    bbStorageModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(modelPaymentOrdersKey, [\n    paymentOrdersDataKey,\n    productSummaryDataKey,\n    contactDataKey,\n    bbStorageServiceKey,\n    widgetKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_142__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 142\n// module chunks = 16 27 28 30 32 33","module.exports = __WEBPACK_EXTERNAL_MODULE_143__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-payment-orders-http-ng\"\n// module id = 143\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_144__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 144\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_145__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-contact-http-ng\"\n// module id = 145\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_146__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 146\n// module chunks = 16 27 32","/* eslint max-len: [\"error\", 100, { \"ignoreComments\": true }]*/\n\nimport angular from 'vendor-bb-angular';\nimport { fromHttpError } from 'lib-bb-model-errors';\n\nimport { createAccountModel, getExtendedAccountModelFlat } from './account-model';\nimport {\n  ArrangementPrivilegesParameters,\n  BbStorageKeys,\n  Context,\n  ExternalType,\n  Preference,\n  PaymentType,\n  approvalStatus,\n} from './constants';\n\n/**\n * @description\n * Method to normalize products data\n *\n * @inner\n * @param {object} rawData Raw response data object\n * @returns {object[]} An array of products\n */\nconst convertToAccountsArray = rawData => Object.keys(rawData)\n  .filter(kind => rawData[kind].products && rawData[kind].products.length > 0)\n  .reduce((memo, kind) => memo.concat(\n    rawData[kind].products.map(createAccountModel(kind))\n  ), []);\n\n/**\n * @description\n * Method to format external contacts data as product kind.\n *\n * @inner\n * @param {object} rawData Contact object.\n * @returns {object} External product object.\n */\nconst convertExternalsToProductKind = (rawData) => ({\n  [ExternalType.IDENTIFIER]: {\n    name: ExternalType.NAME,\n    products: rawData,\n    aggregatedBalance: 0.0,\n  },\n});\n\n/**\n * Model factory for model-bb-payment-orders-ng\n *\n * @inner\n * @type {function}\n * @param {Object} Promise An ES2015 compatible `Promise` object.\n *\n * @return {Object}\n */\nexport default function paymentOrdersModel(\n  paymentOrdersData,\n  productSummaryData,\n  contactData,\n  bbStorage,\n  widget\n) {\n  /**\n   * @name paymentOrdersModel#createPaymentOrder\n   * @type {function}\n   *\n   * @description\n   * Create new payment order.\n   *\n   * @param {object} paymentOrderParams New payment order data\n   * @returns {Promise.<object>} A Promise with response.\n   */\n  const createPaymentOrder = paymentOrderParams =>\n    paymentOrdersData.postPaymentOrdersRecord(paymentOrderParams)\n      .catch(httpErrorResponse => {\n        const error = fromHttpError(httpErrorResponse);\n        if (httpErrorResponse.status === 403) {\n          Object.assign(error, { breachReport: httpErrorResponse.data.breachReport });\n        }\n        throw error;\n      });\n\n  /**\n   * @name paymentOrdersModel#getCurrencies\n   * @type {function}\n   *\n   * @description\n   * Get available currencies.\n   *\n   * @returns {Promise.<object[]>} A Promise with response.\n   */\n  const getCurrencies = () => paymentOrdersData\n    .getPaymentOrdersCurrencies()\n    // Convert currencies format to the format used in the widgets\n    .then(({ data }) => data.map(({ code }) => ({ name: code })))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name normalizeArrangementsParameters\n   * @type {Function}\n   * @inner\n   * @param {ArrangementsRequestParameters} parameters Parameters to send in the request\n   * @returns {Object} Normalized arrangements request parameters\n   */\n  const normalizeArrangementsParameters = (parameters) => {\n    const normalizedParameters = angular.copy(parameters);\n\n    if (normalizedParameters.searchQuery) {\n      normalizedParameters.searchTerm = normalizedParameters.searchQuery;\n      delete normalizedParameters.searchQuery;\n    }\n\n    if (normalizedParameters.query) {\n      normalizedParameters.searchTerm = normalizedParameters.query;\n      delete normalizedParameters.query;\n    }\n\n    return normalizedParameters;\n  };\n\n  /**\n   * @name paymentOrdersModel#getProductSelectedId\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Tries to read selected product id from storage.\n   *\n   * @returns {Promise<?string>} a Promise with ID\n   */\n  const getProductSelectedId = () => bbStorage.getItem(BbStorageKeys.PRODUCT_SELECTED);\n\n  /**\n   * @name paymentOrdersModel#getContextArrangements\n   * @type {function}\n   *\n   * @description\n   * Load contextualized arrangements\n   *\n   * @param {string} context\n   *   Payment context identifier.\n   *   Values can be {@link module:model-bb-payment-orders-ng.Constants#Context}\n   * @param {ArrangementsRequestParameters} params Parameters to send in the request\n   * @param {Boolean} full Flag to return full response with desired headers\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductDetails[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise fulfilled with collection of arrangements.\n   */\n  const getContextArrangements = (context, params = {}, full = false) => productSummaryData\n    .getProductsummaryContextArrangements({\n      ...ArrangementPrivilegesParameters[context],\n      ...normalizeArrangementsParameters(params),\n    })\n    .then((raw) => {\n      if (full) {\n        return {\n          data: getExtendedAccountModelFlat(raw.data),\n          totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n        };\n      }\n      return getExtendedAccountModelFlat(raw.data);\n    })\n    .catch((httpErrorResponse) => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getAccountsFrom\n   * @type {function}\n   *\n   * @description\n   * Load accounts available to payment from.\n   *\n   * @param {ArrangementsRequestParameters} params Parameters to send in the request\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductDetails[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise with flat accounts list.\n   */\n  const getAccountsFrom = (params = {}) => getContextArrangements(Context.SEPA_CT, {\n    ...params,\n    // @TODO: Setting size hardcoded for hotfixingsolving MAINT-5384. Will be properly fixed with DBSA-1315\n    size: 30,\n    debitAccount: true,\n  });\n\n  /**\n   * @name paymentOrdersModel#getAccountsTo\n   * @type {function}\n   *\n   * @description\n   * Load accounts available for payment to.\n   *\n   * @param {string} debitAccountId Filter account list with debitAccountId param\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductDetails[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise with flat accounts list.\n   */\n  const getAccountsTo = (debitAccountId) => getContextArrangements(Context.SEPA_CT, {\n    creditAccount: true,\n     // @TODO: Setting size hardcoded for hotfixingsolving MAINT-5384. Will be properly fixed with DBSA-1315\n    size: 30,\n  })\n    .then((accounts) => accounts.filter((account) => account.id !== debitAccountId));\n\n  /**\n   * @name paymentOrdersModel#getAccountsToFull\n   * @type {function}\n   *\n   * @description\n   * Load accounts available with total count attached\n   *\n   * @param {Object} params\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductDetails[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise with flat accounts list.\n   */\n  const getAccountsToFull = (params = {}) =>\n    getContextArrangements(Context.SEPA_CT, {\n      creditAccount: true,\n      ...params,\n    }, true);\n\n  /**\n   * @name paymentOrdersModel#getExternals\n   * @type {function}\n   *\n   * @description\n   * Load external accounts from contact list.\n   *\n   * @returns {Promise.<object[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise with flat accounts list.\n   */\n  const getExternals = () => contactData\n    .getContacts({ size: 999 })\n    .then(({ data }) => data)\n    .then(convertExternalsToProductKind)\n    .then(convertToAccountsArray)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getContacts\n   * @type {function}\n   *\n   * @description\n   * Load contact list without special formatting\n   *\n   * @param {Object} params\n   * @returns {Promise.<object[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise with flat contacts list.\n   */\n  const getContacts = (params = {}) => contactData\n    .getContacts(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getContactsByName\n   * @type {function}\n   *\n   * @description\n   * Load contacts filtered by name.\n   *\n   * @returns {Promise.<object[], module:lib-bb-model-errors.ModelError>}\n   *   A Promise with accounts list.\n   */\n  const getContactsByName = (name) => contactData\n    .getContacts({ query: name, size: 999 })\n    .then(({ data }) => data)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @description\n   * Get currencies available for payment.\n   *\n   * @name paymentOrdersModel#getRate\n   * @type {function}\n   * @param {object} rateParams Parameters for getRate request\n   * @returns {number} Rate number\n   */\n  const getRate = rateParams => paymentOrdersData\n    .getPaymentOrdersRate(rateParams)\n    .then(({ data }) => data.rate)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#createContact\n   * @type {function}\n   *\n   * @description\n   * Creates a new contact\n   *\n   * @param {object} contact Contact data\n   * @returns {Promise} A Promise object for create contact request\n   */\n  const createContact = contact => contactData\n    .postContactsRecord(contact)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getPaymentOrders\n   * @type {function}\n   *\n   * @description\n   * Get payments orders data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<Payments, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const getPaymentOrders = params => paymentOrdersData\n    .getPaymentOrders(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getStandingOrdersPreferences\n   * @type {function}\n   *\n   * @description\n   * Tries to read the stored standing orders preferences\n   *\n   * @returns {Object}\n   */\n  function getStandingOrdersPreferences() {\n    const paymentPreferences = {};\n\n    paymentPreferences.standingOrdersPageSize = widget\n      .getLongPreference(Preference.PAGE_SIZE);\n    paymentPreferences.standingOrdersMaxNavPages = widget\n      .getLongPreference(Preference.MAX_NAV_PAGES);\n    paymentPreferences.standingOrdersPaginationType = widget\n      .getStringPreference(Preference.PAGINATION_TYPE);\n    paymentPreferences.standingOrdersNotificationDismissTime = widget\n      .getLongPreference(Preference.NOTIFICATION_DISMISS);\n\n    return paymentPreferences;\n  }\n\n  /**\n   * @name paymentOrdersModel#getStandingOrders\n   * @type {function}\n   *\n   * @description\n   * Get standing orders data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<Payments, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const getStandingOrders = params => paymentOrdersData\n    .getPaymentOrders(Object.assign(params, { paymentMode: 'RECURRING' }))\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getPaymentDraftsPreferences\n   * @type {function}\n   *\n   * @description\n   * Tries to read the stored payment drafts preferences\n   *\n   * @returns {Object}\n   */\n  function getPaymentDraftsPreferences() {\n    const paymentDraftPreferences = {};\n\n    paymentDraftPreferences.paymentDraftsPageSize = widget\n      .getLongPreference(Preference.PAGE_SIZE);\n    paymentDraftPreferences.paymentDraftsMaxNavPages = widget\n      .getLongPreference(Preference.MAX_NAV_PAGES);\n    paymentDraftPreferences.paymentDraftsPaginationType = widget\n      .getStringPreference(Preference.PAGINATION_TYPE);\n    paymentDraftPreferences.paymentDraftsNotificationDismissTime = widget\n      .getLongPreference(Preference.NOTIFICATION_DISMISS);\n\n    return paymentDraftPreferences;\n  }\n\n  /**\n   * @name paymentOrdersModel#getPaymentDrafts\n   * @type {function}\n   *\n   * @description\n   * Get payment drafts.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<PaymentDrafts, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const getPaymentDrafts = params => paymentOrdersData\n    .getPaymentOrderDrafts(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#saveDraft\n   * @type {function}\n   *\n   * @description\n   * Save payment order draft\n   *\n   * @param {object} draftPayment to be saved\n   * @returns {Promise.<object, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const saveDraft = draftPayment => paymentOrdersData\n    .postPaymentOrderDraftsRecord(draftPayment)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#deleteDraft\n   * @type {function}\n   *\n   * @description\n   * Delete payment order draft\n   *\n   * @param {object} draftPaymentId to be deleted\n   * @returns {Promise.<object, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const deleteDraft = draftPaymentId => paymentOrdersData\n    .deletePaymentOrderDraftsRecord(draftPaymentId)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#editDraft\n   * @type {function}\n   *\n   * @description\n   * Save changes to payment order draft\n   *\n   * @param {string} draftPaymentId to be deleted\n   * @param {object} draftPayment\n   * @returns {Promise.<object, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const editDraft = (draftPaymentId, draftPayment) => paymentOrdersData\n    .putPaymentOrderDraftsRecord(draftPaymentId, draftPayment)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name validatePayment\n   * @type {function}\n   * @description\n   * Performs backend validation of payment\n   *\n   * @param {object} payment to be validated\n   * @returns {Promise.<object, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const validatePayment = payment => paymentOrdersData\n    .postPaymentOrdersValidateRecord(payment)\n    .catch(httpErrorResponse => {\n      const error = fromHttpError(httpErrorResponse);\n      const { data } = httpErrorResponse;\n      const errorsArr = data.errors;\n      let messages = [];\n\n      if (errorsArr.length) {\n        messages = errorsArr;\n      } else if (!errorsArr.length && data.message) {\n        messages.push({ message: data.message });\n      }\n\n      Object.assign(error, { messages });\n\n      throw error;\n    });\n\n  /**\n   * @name paymentOrdersModel#saveEditPayment\n   * @type {function}\n   *\n   * @description\n   * Save changes after editing to payment order\n   *\n   * @param {string} paymentId\n   * @param {object} paymentData\n   * @returns {Promise.<object, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const updatePayment = (paymentId, paymentData) => paymentOrdersData\n    .putPaymentOrdersRecord(paymentId, paymentData)\n    .catch(httpErrorResponse => {\n      const error = fromHttpError(httpErrorResponse);\n      if (httpErrorResponse.status === 403) {\n        Object.assign(error, { breachReport: httpErrorResponse.data.breachReport });\n      }\n      throw error;\n    });\n\n  /**\n   * @name paymentOrdersModel#authorizePayment\n   * @type {function}\n   * @description\n   * Authorizes (approves) a payment.\n   *\n   * @param {String} paymentId\n   * @returns {Promise}\n   */\n  const authorizePayment = paymentId => paymentOrdersData\n    .putPaymentOrdersApprovalsRecord(paymentId, { ...approvalStatus.approve })\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#rejectPayment\n   * @type {function}\n   * @description\n   * Rejects payment.\n   *\n   * @param {String} paymentId\n   * @returns {Promise}\n   */\n  const rejectPayment = paymentId => paymentOrdersData\n    .putPaymentOrdersApprovalsRecord(paymentId, { ...approvalStatus.reject })\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#cancelPayment\n   * @type {function}\n   * @description\n   * Cancels payment.\n   *\n   * @param {String} paymentId\n   * @returns {Promise}\n   */\n  const cancelPayment = paymentId => paymentOrdersData\n    .deletePaymentOrdersRecord(paymentId)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#requestPaymentCancel\n   * @type {Function}\n   * @description\n   * Sends a request to cancel the payment order identified by `paymentId`\n   * and an object that has version property\n   *\n   * @param {String} paymentId Payment identifier\n   * @param {Number} version property on payment Object\n   * @returns {Promise}\n   */\n  const requestPaymentCancel = (paymentId, version) => paymentOrdersData\n    .postPaymentOrdersCancelRecord(paymentId, { version })\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#deletePayment\n   * @type {Function}\n   * @description\n   * Sends a request to delete the payment order identified by `paymentId`\n   *\n   * @param {String} paymentId Payment identifier\n   * @param {Number} version property on payment Object\n   * @returns {Promise}\n   */\n  const deletePayment = (paymentId, version) => paymentOrdersData\n    .deletePaymentOrdersRecord(paymentId, { version })\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#requestBulkReject\n   * @type {function}\n   * @description\n   * Sends a request to reject the selected payment orders identified by `paymentId`\n   *\n   * @param {Array} paymentOrderIds\n   * @returns {Promise}\n   */\n  const requestBulkReject = paymentOrderIds => paymentOrdersData\n    .putPaymentOrdersBulkApprovalsRecord({ ...approvalStatus.reject, paymentOrderIds })\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#requestBulkApprove\n   * @type {function}\n   * @description\n   * Sends a request to approve the selected payment orders identified by `paymentId`\n   *\n   * @param {Array} paymentOrderIds\n   * @returns {Promise}\n   */\n  const requestBulkApprove = paymentOrderIds => paymentOrdersData\n    .putPaymentOrdersBulkApprovalsRecord({ ...approvalStatus.approve, paymentOrderIds })\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel\n   * @type {Object}\n   */\n  return {\n    createPaymentOrder,\n    getCurrencies,\n    getContextArrangements,\n    getAccountsFrom,\n    getAccountsTo,\n    getAccountsToFull,\n    getExternals,\n    getContacts,\n    getRate,\n    createContact,\n    getPaymentOrders,\n    getProductSelectedId,\n    getStandingOrdersPreferences,\n    getStandingOrders,\n    getPaymentDraftsPreferences,\n    getPaymentDrafts,\n    saveDraft,\n    deleteDraft,\n    editDraft,\n    getContactsByName,\n    validatePayment,\n    updatePayment,\n    Context,\n    authorizePayment,\n    rejectPayment,\n    cancelPayment,\n    requestPaymentCancel,\n    requestBulkApprove,\n    requestBulkReject,\n    PaymentType,\n    deletePayment,\n  };\n}\n\n/**\n * Payments type definition\n * @typedef {Array.<Payment>} Payments\n */\n\n/**\n * Payment type definition\n * @typedef {Object} Payment\n * @property {string}         id                                   - Payment ID\n * @property {string}         status                               - Payment status\n * @property {string}         bankStatus                           - Bank Status\n * @property {string}         reasonCode                           - Reason id\n * @property {string}         reasonText                           - Reason description\n * @property {object}         debtorAccount                        - Debtor account\n * @property {string}         instructionPriority                  - Instruction priority\n * @property {string}         requestedExecutionDate               - Requested execution date\n * @property {object}         creditTransferTransactionInformation - Transaction information\n * @property {string}         createdBy                            - User id that created payment\n * @property {string}         createdAt                            - Date when payment was created\n */\n\n/**\n  * Arrangements request paramaters definition\n  * @typedef {Object} ArrangementsRequestParameters\n  * @property {String}  searchQuery    - Text to perform search on arrangements\n  * @property {Boolean} debitAccount   - If enabled retrieve debit accounts\n  * @property {Boolean} creditAccount  - If enabled retrieve credit accounts\n  */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/payment-orders.js","module.exports = __WEBPACK_EXTERNAL_MODULE_148__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 148\n// module chunks = 16 27 28 29 30 31 32 33","import { ExternalType } from './constants';\n\nconst maskCardNumber = (suffix) => (suffix ? `XXXX-XXXX-XXXX-${suffix}` : '');\n\nconst defaultViewModelFactory = ({\n  id,\n  name,\n  currency,\n  externalTransferAllowed,\n  crossCurrencyAllowed,\n}) => ({\n  id,\n  name,\n  currency,\n  externalTransferAllowed,\n  crossCurrencyAllowed,\n});\n\nconst viewModelFactories = {\n  currentAccounts: account => Object.assign({\n    identifier: account.IBAN || account.BBAN,\n    amount: account.availableBalance,\n  },\n  account),\n\n  savingsAccounts: account => Object.assign({\n    identifier: account.IBAN || account.BBAN,\n    amount: account.bookedBalance,\n  },\n  account),\n\n  termDeposits: account => Object.assign({\n    amount: account.principalAmount,\n  },\n  account),\n\n  loans: account => Object.assign({\n    amount: account.bookedBalance,\n  },\n  account),\n\n  creditCards: account => Object.assign({\n    identifier: maskCardNumber(account.cardNumberSuffix),\n    amount: account.availableBalance,\n  },\n  account),\n\n  investmentAccounts: account => Object.assign({\n    amount: account.currentInvestmentValue,\n  },\n  account),\n\n  [ExternalType.IDENTIFIER]: contact => Object.assign({\n    identifier: contact.accounts[0].IBAN,\n    external: true,\n  },\n  contact),\n};\n\nconst viewModelFactory = (kind, account) =>\n  (viewModelFactories[kind] || defaultViewModelFactory)(account);\n\n/**\n * @name createAccountModel\n * @type {function}\n * @description\n * Prepare the fields of a account into a form ready for display to the User\n *\n * @param {string} kindId Product kind Id\n * @returns {function}\n */\nexport const createAccountModel = kindId => (account) => viewModelFactory(kindId, account);\n\n/**\n * @name getExtendedAccountModelFlat\n * @type {function}\n * @description\n * Prepare the fields of a account into a form ready for display to the User\n *\n * @param {object[]} accountsRaw flat list of accounts\n * @return {object[]}\n */\nexport const getExtendedAccountModelFlat = (accountsRaw = []) => accountsRaw\n  .map(account => ({\n    identifier: account.IBAN ||\n      account.BBAN ||\n      account.productNumber ||\n      maskCardNumber(account.cardNumberSuffix),\n    amount: account.availableBalance || account.bookedBalance,\n    ...account,\n  }));\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/account-model.js","/**\n * @name Constants\n * @type {object}\n */\n\nconst resourceName = 'Payments';\n\n/**\n * @name Constants#PaymentType\n * @description\n * Map of payment types\n * @type {PaymentType}\n */\nexport const PaymentType = {\n  SEPA_CT: 'SEPA_CREDIT_TRANSFER',\n  US_DOMESTIC_WIRE: 'US_DOMESTIC_WIRE',\n  US_FOREIGN_WIRE: 'US_FOREIGN_WIRE',\n  INTERNAL: 'INTERNAL',\n};\n\n/**\n * @description\n * Available business functions for payments resource\n *\n * @name Constants#Context\n * @type {PaymentType}\n */\nexport const Context = {\n  SEPA_CT: 'SEPA CT',\n  US_DOMESTIC_WIRE: 'US Domestic Wire',\n  US_FOREIGN_WIRE: 'US Foreign Wire',\n  INTERNAL: 'INTERNAL',\n};\n\n/**\n * @description\n * Identifier and name for external account product kind\n *\n * @name ExternalType\n * @type {object}\n * @inner\n */\nexport const ExternalType = {\n  IDENTIFIER: 'ExternalAccounts',\n  NAME: 'Contacts',\n};\n\n/**\n * @description\n * Request params to get privilege entitlements\n *\n * @name ArrangementPrivilegesParameters\n * @type {object}\n * @inner\n */\nexport const ArrangementPrivilegesParameters = {\n  [Context.SEPA_CT]: {\n    businessFunction: Context.SEPA_CT,\n    resourceName,\n    privilege: 'create',\n  },\n  [Context.US_DOMESTIC_WIRE]: {\n    businessFunction: Context.US_DOMESTIC_WIRE,\n    resourceName,\n    privilege: 'create',\n  },\n  [Context.US_FOREIGN_WIRE]: {\n    businessFunction: Context.US_FOREIGN_WIRE,\n    resourceName,\n    privilege: 'create',\n  },\n  [Context.INTERNAL]: {\n    businessFunction: Context.INTERNAL,\n    resourceName,\n    privilege: 'create',\n  },\n};\n\n/**\n * bbStorage keys enum\n * @type {object}\n * @inner\n */\nexport const BbStorageKeys = {\n  PRODUCT_SELECTED: 'bb.product.selected',\n};\n\n/**\n * Widget preferences enum\n * @type {object}\n * @inner\n */\nexport const Preference = {\n  PAGE_SIZE: 'pageSize',\n  MAX_NAV_PAGES: 'maxNavPages',\n  PAGINATION_TYPE: 'paginationType',\n  NOTIFICATION_DISMISS: 'notificationDismissTime',\n};\n\n/**\n * @description\n * Payment action types for approval/rejection\n *\n * @type {Object}\n * @inner\n */\nexport const approvalStatus = {\n  approve: { approvalStatus: 'APPROVED' },\n  reject: { approvalStatus: 'REJECTED' },\n};\n\n/**\n * @typedef {Object} PaymentType\n * @property {String} SEPA_CT               - SEPA Credit Transfer payments\n * @property {String} US_DOMESTIC_WIRE      - United States Domestic Wire payments\n * @property {String} US_FOREIGN_WIRE       - United States International Wire payments\n * @property {String} INTERNAL              - Internal Payments between the customers\n *                                            of same financial institution.\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/constants.js"],"sourceRoot":""}