{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6****************","webpack:///webpack/bootstrap d0309a746b17cd403690?c295****************","webpack:///./lib-wm-compose-selectors/model.xml","webpack:///./lib-wm-compose-selectors/scripts/index.js"],"names":["areArgumentsShallowlyEqual","prev","next","length","i","memoize","func","lastArgs","lastResult","arguments","apply","composeSelectors","funcs","resultFunc","pop","dependencies","memoizedResultFunc","params","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;;;;;;ACAA;AACA;;AAEA;;;;;;;;;AASA,UAASA,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAC9C,OAAID,SAAS,IAAT,IAAiBC,SAAS,IAA1B,IAAkCD,KAAKE,MAAL,KAAgBD,KAAKC,MAA3D,EAAmE;AACjE,YAAO,KAAP;AACD;;AAED;AACA;AACA;AACA,OAAI,CAACF,KAAKE,MAAN,IAAgB,CAACD,KAAKC,MAA1B,EAAkC;AAChC,YAAO,KAAP;AACD;;AAED;AACA;AACA,OAAMA,SAASF,KAAKE,MAApB;AACA,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC/B,SAAIH,KAAKG,CAAL,MAAYF,KAAKE,CAAL,CAAhB,EAAyB;AACvB,cAAO,KAAP;AACD;AACF;;AAED,UAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,UAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,OAAIC,WAAW,IAAf;AACA,OAAIC,aAAa,IAAjB;AACA;AACA,UAAO,YAAY;AACjB;AACA,SAAI,CAACR,2BAA2BO,QAA3B,EAAqCE,SAArC,CAAL,EAAsD;AACpD;AACA;AACAD,oBAAaF,KAAKI,KAAL,CAAW,IAAX,EAAiBD,SAAjB,CAAb;AACD;;AAED;AACAF,gBAAWE,SAAX;AACA,YAAOD,UAAP;AACD,IAXD;AAYD;;AAED;;;;;;;;;;;AAWA,KAAMG,mBAAmB,SAAnBA,gBAAmB,GAAc;AAAA,qCAAVC,KAAU;AAAVA,UAAU;AAAA;;AACrC,OAAMC,aAAaD,MAAME,GAAN,EAAnB;AACA,OAAMC,eAAeH,KAArB;;AAEA,OAAMI,qBAAqBX,QAAQQ,UAAR,CAA3B;;AAEA;AACA;AACA,UAAOR,QAAQ,YAAY;AACzB,SAAMY,SAAS,EAAf;AACA,SAAMd,SAASY,aAAaZ,MAA5B;;AAEA,UAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC/B;AACA;AACAa,cAAOC,IAAP,CAAYH,aAAaX,CAAb,EAAgBM,KAAhB,CAAsB,IAAtB,EAA4BD,SAA5B,CAAZ;AACD;;AAED;AACA,YAAOO,mBAAmBN,KAAnB,CAAyB,IAAzB,EAA+BO,MAA/B,CAAP;AACD,IAZM,CAAP;AAaD,EArBD;;mBAuBeN,gB","file":"lib-wm-compose-selectors/scripts/lib-wm-compose-selectors.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-wm-compose-selectors\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-wm-compose-selectors\"] = factory();\n\telse\n\t\troot[\"lib-wm-compose-selectors\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0309a746b17cd403690","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-wm-compose-selectors/model.xml\n// module id = 0\n// module chunks = 16","// The code below is taken from https://github.com/reactjs/reselect library.\n// It was simplified, unneeded features were removed.\n\n/**\n * @name areArgumentsShallowlyEqual\n * @description Compares previous and current arguments by references\n * @inner\n * @type {function}\n * @param {Array | null} prev Previous arguments\n * @param {Array | null} next Current arguments\n * @returns {boolean} Whether previous and current arguments equal by reference\n */\nfunction areArgumentsShallowlyEqual(prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // In case the main selector is invoked without arguments.\n  // Yeah, we support not pure functions as selectors to compose from...\n  // Todo: remove this code, when library will be merged into stateContainer\n  if (!prev.length && !next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`)\n  // so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (prev[i] !== next[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @name memoize\n * @type {function}\n * @description Wrap functions and allows to memoize its result by arguments\n * @inner\n * @param {function} func Function to wrap to allow\n * @returns {Function} wrapper of passed function with memoization skill\n */\nfunction memoize(func) {\n  let lastArgs = null;\n  let lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    // eslint-disable-next-line prefer-rest-params\n    if (!areArgumentsShallowlyEqual(lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      // eslint-disable-next-line prefer-rest-params\n      lastResult = func.apply(null, arguments);\n    }\n\n    // eslint-disable-next-line prefer-rest-params\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\n/**\n * @name composeSelectors\n * @type {function}\n * @inner\n * @description Function composing selectors into one\n * @param funcs Functions to compose selectors from.\n *        The last function is the result function of selector,\n *        on selector invocation it will be invoked with\n *        all previous functions` results as arguments\n * @returns {Function} Selector function\n */\nconst composeSelectors = (...funcs) => {\n  const resultFunc = funcs.pop();\n  const dependencies = funcs;\n\n  const memoizedResultFunc = memoize(resultFunc);\n\n  // If a selector is called with the exact same arguments\n  // we don't need to traverse our dependencies again.\n  return memoize(function () {\n    const params = [];\n    const length = dependencies.length;\n\n    for (let i = 0; i < length; i++) {\n      // apply arguments instead of spreading and mutate a local list of params for performance.\n      // eslint-disable-next-line prefer-rest-params\n      params.push(dependencies[i].apply(null, arguments));\n    }\n\n    // apply arguments instead of spreading for performance.\n    return memoizedResultFunc.apply(null, params);\n  });\n};\n\nexport default composeSelectors;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-wm-compose-selectors/scripts/index.js"],"sourceRoot":""}