{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 50256e16f76c6c9e44d8","webpack:///./model-fx-trading-ng/model.xml","webpack:///external \"lib-bb-model-errors\"?7567**","webpack:///./model-fx-trading-ng/scripts/index.js","webpack:///external \"data-bb-trading-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///external \"vendor-bb-angular\"","webpack:///./model-fx-trading-ng/scripts/trading-fx.js","webpack:///./model-fx-trading-ng/scripts/constants.js"],"names":["moduleKey","modelFxTradingKey","angular","module","tradingDataModuleKey","bbStorageModuleKey","factory","tradingDataKey","bbStorageServiceKey","Model","name","tradingFxModel","tradingFxData","bbStorage","loadCurrencyPairs","params","getTradingCurrencypair","then","response","totalCount","parseInt","headers","data","catch","e","loadCurrencyPairDetails","currencypairId","setCurrencyPairIdSelected","currencyPairId","setItem","BbStorageKeys","CURRENCY_PAIR_ID_SELECTED","removeItem","setPageNumberSelected","page","PAGE_NUMBER_SELECTED","getSelectedCurrencyPairId","getItem","getPageNumberSelected","loadCurrencyRates","getTradingCurrencyrate","CURRENCY_PAIR_SELECTED"],"mappings":"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","file":"model-fx-trading-ng/scripts/model-fx-trading-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lib-bb-model-errors\"), require(\"data-bb-trading-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-fx-trading-ng\", [\"lib-bb-model-errors\", \"data-bb-trading-http-ng\", \"lib-bb-storage-ng\", \"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-fx-trading-ng\"] = factory(require(\"lib-bb-model-errors\"), require(\"data-bb-trading-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"model-fx-trading-ng\"] = factory(root[\"lib-bb-model-errors\"], root[\"data-bb-trading-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_25__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_27__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 50256e16f76c6c9e44d8","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-fx-trading-ng/model.xml\n// module id = 0\n// module chunks = 5","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 12\n// module chunks = 1 2 3 5","/**\n * @module model-fx-trading-ng\n *\n * @description\n * model-fx-trading-ng\n *\n * @example\n * import modeltradingfxModuleKey, { modeltradingfxKey }\n * from 'model-fx-trading-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     modeltradingfxModuleKey,\n *   ])\n *   .factory('someFactory', [\n *     modeltradingfxKey,\n *     // into\n *     function someFactory(tradingfxModel) {\n *       // ...\n *     },\n *   ]);\n */\nimport tradingDataModuleKey, {\n  tradingDataKey,\n} from 'data-bb-trading-http-ng';\n\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport angular from 'vendor-bb-angular';\n\nimport Model from './trading-fx';\n\nconst moduleKey = 'model-fx-trading-ng';\nexport const modelFxTradingKey = `${moduleKey}:model`;\n\n\nexport default angular\n  .module(moduleKey, [\n    tradingDataModuleKey,\n    bbStorageModuleKey,\n  ])\n\n  .factory(modelFxTradingKey, [\n    tradingDataKey,\n    bbStorageServiceKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n /**\n * CurrencyPair type definition\n * @typedef {Object} CurrencyPair\n * @property {string}        pairKey          - Currency pair id\n */\n\n /**\n * CurrencyRate type definition\n * @typedef {Object} CurrencyRate\n * @property {string}        pairKey          - Currency pair id\n * @property {number}        price            - Last executed price for the currency pair\n * @property {number}        change           - Today's price change\n * @property {number}        changePct        - Today's price change in percent\n * @property {number}        bid              - Bid price available for the currency pair\n * @property {number}        ask              - Ask price available for the currency pair\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-fx-trading-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_25__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-trading-http-ng\"\n// module id = 25\n// module chunks = 5","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 26\n// module chunks = 5","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 27\n// module chunks = 5 6 7 8 9 10","/* eslint-disable no-param-reassign */\nimport { fromHttpError } from 'lib-bb-model-errors';\nimport BbStorageKeys from './constants';\n\n/**\n * Model factory for model-fx-trading-ng\n *\n * @inner\n * @type {function}\n *\n * @return {Object}\n */\nexport default function tradingFxModel(\n  tradingFxData,\n  bbStorage\n) {\n  /**\n   * @name tradingFxModel#loadCurrencyPairs\n   * @type {function}\n   *\n   * @description\n   * Load trading currency pairs.\n   * @param {?object} params Optional configuration object.\n   * @returns {Promise.<CurrencyPairs, ModelError>}\n   * A Promise resolving to object with CurrencyPairs.\n   */\n  function loadCurrencyPairs(params) {\n    return tradingFxData.getTradingCurrencypair(params)\n      .then((response) => ({\n        totalCount: parseInt(response.headers('x-total-count'), 10) || 0,\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name tradingFxModel#loadCurrencyPairDetails\n   * @type {function}\n   *\n   * @description\n   * Load specific currency pair\n   * @param {string} currencypairId ID of currency pair to load\n   * @returns {Promise.<CurrencyPair, ModelError>}\n   * A Promise resolving to object with currency pair\n   */\n  function loadCurrencyPairDetails(currencypairId) {\n    return tradingFxData.getTradingCurrencypair(currencypairId)\n      .then((response) => ({\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name tradingFxModel#setCurrencyPairIdSelected\n   * @type {function}\n   *\n   * @description\n   * Set current selected currency pair id\n   *\n   * @param {string} currencyPairId currency pair id to set selected\n   */\n  const setCurrencyPairIdSelected = (currencyPairId) => {\n    if (currencyPairId) {\n      bbStorage.setItem(BbStorageKeys.CURRENCY_PAIR_ID_SELECTED, currencyPairId);\n    } else {\n      bbStorage.removeItem(BbStorageKeys.CURRENCY_PAIR_ID_SELECTED);\n    }\n  };\n\n  /**\n   * @name tradingFxModel#setPageNumberSelected\n   * @type {function}\n   *\n   * @description\n   * Set current selected page number\n   *\n   * @param {string} page number of page to set selected\n   */\n  const setPageNumberSelected = (page) => {\n    if (page) {\n      bbStorage.setItem(BbStorageKeys.PAGE_NUMBER_SELECTED, page);\n    } else {\n      bbStorage.removeItem(BbStorageKeys.PAGE_NUMBER_SELECTED);\n    }\n  };\n\n  /**\n   * @public\n   * @name tradingFxModel#getSelectedCurrencyPairId\n   * @type {function}\n   *\n   * @description\n   * Get current selected currency pair id.\n   *\n   * @returns {Promise.<string, ModelError>} A Promise with currency pair id.\n   */\n  const getSelectedCurrencyPairId = () =>\n    bbStorage.getItem(BbStorageKeys.CURRENCY_PAIR_ID_SELECTED);\n\n  /**\n   * @public\n   * @name tradingFxModel#getPageNumberSelected\n   * @type {function}\n   *\n   * @description\n   * Get selected page number.\n   *\n   * @returns {Promise.<string, ModelError>} A Promise with page number.\n   */\n  const getPageNumberSelected = () =>\n    bbStorage.getItem(BbStorageKeys.PAGE_NUMBER_SELECTED);\n\n  /**\n   * @name tradingFxModel#loadCurrencyRates\n   * @type {function}\n   *\n   * @description\n   * Load trading currency rates.\n   * @param {?object} params Optional configuration object.\n   * @returns {Promise.<CurrencyRates, ModelError>}\n   * A Promise resolving to object with CurrencyRates.\n   */\n  function loadCurrencyRates(params) {\n    return tradingFxData.getTradingCurrencyrate(params)\n      .then((response) => ({\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name tradingFxModel\n   * @type {Object}\n   */\n  return {\n    loadCurrencyPairs,\n    loadCurrencyPairDetails,\n    loadCurrencyRates,\n    setCurrencyPairIdSelected,\n    getSelectedCurrencyPairId,\n    setPageNumberSelected,\n    getPageNumberSelected,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model-fx-trading-ng/scripts/trading-fx.js","/**\n * bbStorage keys enum\n * @type {object}\n */\nconst BbStorageKeys = {\n  CURRENCY_PAIR_ID_SELECTED: 'bb.currencyPairId.selected',\n  CURRENCY_PAIR_SELECTED: 'bb.currencyPair.selected',\n  PAGE_NUMBER_SELECTED: 'bb.pageNumber.selected',\n};\n\nexport default BbStorageKeys;\n\n\n\n// WEBPACK FOOTER //\n// ./model-fx-trading-ng/scripts/constants.js"],"sourceRoot":""}