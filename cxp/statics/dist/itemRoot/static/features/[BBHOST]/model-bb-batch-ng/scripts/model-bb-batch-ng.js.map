{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap 8cdceecee155e37df468?d533*","webpack:///./model-bb-batch-ng/model.xml","webpack:///./model-bb-batch-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"data-bb-batches-http-ng\"","webpack:///./model-bb-batch-ng/scripts/batch.js","webpack:///external \"lib-bb-model-errors\""],"names":["moduleKey","modelBatchKey","angular","module","batchesModuleKey","factory","batchesDataKey","Model","name","batchModel","data","handleError","error","uploadBatchFile","legalEntityId","file","postBatchesLegalentityRecord","catch","getBatches","requestParams","getBatchesLegalentityRecord","then","raw","totalCount","parseInt","headers","getBatchesAuthorizations","getBatchesLegalentityAuthorizations","authorizeBatch","batchId","postBatchesLegalentityAuthorizationsRecord","authorizeMultipleBatches","batchIds","succeeded","failed","promises","map","id","push","Promise","all","rejectBatch","postBatchesLegalentityRejectionsRecord","rejectMultipleBatches"],"mappings":"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","file":"model-bb-batch-ng/scripts/model-bb-batch-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"data-bb-batches-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-batch-ng\", [\"vendor-bb-angular\", \"data-bb-batches-http-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-batch-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"data-bb-batches-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-batch-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"data-bb-batches-http-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_22__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8cdceecee155e37df468","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-batch-ng/model.xml\n// module id = 0\n// module chunks = 2","/**\n * @module model-bb-batch-ng\n *\n * @description\n * Batches widget model.\n *\n * @usage\n * import modelModuleKey, {\n *   modelBatchKey,\n * } from 'model-bb-batch-ng';\n *\n * angular.module('widget-bb-batch-ng', [\n *   modelModuleKey,\n * ])\n * .controller('BatchController', [\n *   modelBatchKey,\n *   ...,\n * ])\n */\nimport angular from 'vendor-bb-angular';\nimport batchesModuleKey, { batchesDataKey } from 'data-bb-batches-http-ng';\n\nimport Model from './batch';\n\nexport const moduleKey = 'model-bb-batch-ng';\nexport const modelBatchKey = 'model-bb-batch-ng:model';\n\nexport default angular\n  .module(moduleKey, [\n    batchesModuleKey,\n  ])\n\n  .factory(modelBatchKey, [\n    batchesDataKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-batch-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 19\n// module chunks = 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-batches-http-ng\"\n// module id = 20\n// module chunks = 2","/* eslint max-len: [\"error\", { \"ignoreComments\": true }] */\n\nimport { fromHttpError } from 'lib-bb-model-errors';\n\n/**\n * Batches model factory\n * @returns {object}\n * @inner\n */\nexport default function batchModel(data) {\n  /**\n   * @name handleError\n   *\n   * @description\n   * Throws new error based on initial network error.\n   * @type {function}\n   * @param {object} error Network request error\n   * @returns {promise.<Object>} A Promise for batch file upload.\n   * @inner\n   */\n  const handleError = error => {\n    throw fromHttpError(error);\n  };\n\n  /**\n   * @name batchModel#uploadBatchFile\n   *\n   * @description\n   * Uploads batch file.\n   *\n   * @type {function}\n   * @param {string} legalEntityId Id of the legal entity for the batch file.\n   * @param {object} file Batch file data\n   * @returns {promise.<Object>} A Promise for batch file upload.\n   */\n  const uploadBatchFile = (legalEntityId, file) => data\n    .postBatchesLegalentityRecord(legalEntityId, file)\n    .catch(handleError);\n\n  /**\n   * @name batchModel#getBatches\n   *\n   * @description\n   * Gets a list of batches.\n   *\n   * @type {function}\n   * @param {string} legalEntityId Id of the legal entity for the batch file\n   * @param {?BatchesRequestParams} requestParams Contains each parameter to build the request querystring\n   * @returns {promise.<array>} A Promise for a collection of batches\n   */\n  const getBatches = (legalEntityId, requestParams) => data\n    .getBatchesLegalentityRecord(legalEntityId, requestParams)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10),\n    }))\n    .catch(handleError);\n\n  /**\n   * @name batchModel#getBatchesAuthorizations\n   *\n   * @description\n   * Get a list of batches with pending authorization.\n   *\n   * @type {function}\n   * @param {string} legalEntityId Id of the legal entity for the batch file\n   * @param {?BatchesRequestParams} requestParams Contains each parameter to build the request query string\n   * @returns {promise.<array>} A Promise for a collection of pending authorization batches\n   */\n  const getBatchesAuthorizations = (legalEntityId, requestParams) => data\n    .getBatchesLegalentityAuthorizations(legalEntityId, requestParams)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(handleError);\n\n  /**\n   * @name batchModel#authorizeBatch\n   * @type {function}\n   * @description\n   * Authorizes a batch of payments.\n   * @param {string} legalEntityId Id of the legal entity for the batch file\n   * @param {string} batchId Id of the batch\n   * @returns {Promise}\n   */\n  const authorizeBatch = (legalEntityId, batchId) => data\n    .postBatchesLegalentityAuthorizationsRecord(legalEntityId, batchId)\n    .catch(handleError);\n\n  /**\n   * @name batchModel#authorizeMultipleBatches\n   * @type {function}\n   * @description\n   * Authorizes multiple batches at once.\n   * @param {string} legalEntityId Id of the legal entity for the batch file\n   * @param {array} batchIds Collection of batch ids\n   * @returns {Promise}\n   */\n  const authorizeMultipleBatches = (legalEntityId, batchIds) => {\n    const succeeded = [];\n    const failed = [];\n    const promises = batchIds.map(\n      id => data\n        .postBatchesLegalentityAuthorizationsRecord(legalEntityId, id)\n        .then(() => succeeded.push(id))\n        .catch(() => failed.push(id))\n    );\n\n    return Promise.all(promises)\n      .then(() => ({\n        succeeded,\n        failed,\n      }));\n  };\n\n  /**\n   * @name batchModel#rejectBatch\n   * @type {function}\n   * @description\n   * Rejects a batch of payments.\n   * @param {string} legalEntityId Id of the legal entity for the batch file\n   * @param {string} batchId Id of the batch\n   * @returns {Promise}\n   */\n  const rejectBatch = (legalEntityId, batchId) => data\n    .postBatchesLegalentityRejectionsRecord(legalEntityId, batchId)\n    .catch(handleError);\n\n  /**\n   * @name batchModel#rejectMultipleBatches\n   * @type {function}\n   * @description\n   * Rejects multiple batches at once.\n   * @param {string} legalEntityId Id of the legal entity for the batch file\n   * @param {array} batchIds Collection of batch ids\n   * @returns {Promise}\n   */\n  const rejectMultipleBatches = (legalEntityId, batchIds) => {\n    const succeeded = [];\n    const failed = [];\n    const promises = batchIds.map(\n      id => data\n        .postBatchesLegalentityRejectionsRecord(legalEntityId, id)\n        .then(() => succeeded.push(id))\n        .catch(() => failed.push(id))\n    );\n\n    return Promise.all(promises)\n      .then(() => ({\n        succeeded,\n        failed,\n      }));\n  };\n\n  /**\n   * @name batchModel\n   * @type {object}\n   */\n  return {\n    uploadBatchFile,\n    getBatches,\n    getBatchesAuthorizations,\n    authorizeBatch,\n    authorizeMultipleBatches,\n    rejectBatch,\n    rejectMultipleBatches,\n  };\n}\n\n/**\n * @typedef {object} BatchesRequestParams\n * @property {string} orderBy Key of the column to sort the returned list of batches\n * @property {string} direction Sort direction `ASC` or `DESC`. By default is `DESC`\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-batch-ng/scripts/batch.js","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 22\n// module chunks = 2 4 5"],"sourceRoot":""}