{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f3d2485eec67eb2fdf62","webpack:///./lib-bb-billpay-errors/model.xml","webpack:///./lib-bb-billpay-errors/scripts/index.js","webpack:///./lib-bb-billpay-errors/scripts/helper-utilities.js","webpack:///./lib-bb-billpay-errors/scripts/hook-utilities.js","webpack:///external \"lib-bb-model-errors\""],"names":["ErrorHelperUtilities","helperUtilitiess","ErrorHookUtilities","hookUtilitiess","formInputHasError","inputName","form","forceValidate","$submitted","$touched","$invalid","formErrors","error","Object","keys","errorName","errorMessage","type","billpay_manage_payee_name","billpay_manage_payee_nickname","billpay_manage_payee_account","billpay_manage_payee_address1","billpay_manage_payee_address2","billpay_manage_payee_city","billpay_manage_payee_state","billpay_manage_payee_zip","billpay_manage_payee_phone","billpay_payment_account","billpay_payment_amount","billpay_payment_date","billpay_pay_a_bill_rush_address1","billpay_pay_a_bill_rush_address2","billpay_pay_a_bill_rush_city","billpay_pay_a_bill_rush_state","billpay_pay_a_bill_rush_zip","backendError","errorMap","$filter","key","message","hasError","hasErrorClass","getError","index","substring","lastIndexOf","fieldName","isNaN","$error","clearBackendError","clearFn","errorKey","ERROR_MESSAGES","E_AUTH","E_CONNECTIVITY","E_USER","E_UNEXPECTED","errorToFieldMap","field","unrecoverable","keyToFieldMap","name","nickName","accountNumber","city","state","postalCode","address1","address2","paymentAccount","paymentAmount","paymentDate","payee","fallbackMapping","split","reverse","keyField","keyFromFieldMap","fieldId","errorIsUnrecoverable","addErrorsToPayment","payment","responsePayments","errorObj","find","payeeID","responsePayment","errors","map","assign","e","addPaymentErrors","payments","paymentsSummary","response","__httpResponse","code","data","getErrorMap","defaultEntry","billpay_page_error","reduce","transformErrorMap","modelError","fromFormSubmission","length"],"mappings":"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","file":"lib-bb-billpay-errors/scripts/lib-bb-billpay-errors.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-billpay-errors\", [\"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-billpay-errors\"] = factory(require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"lib-bb-billpay-errors\"] = factory(root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_45__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f3d2485eec67eb2fdf62","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-billpay-errors/model.xml\n// module id = 0\n// module chunks = 6","import helperUtilitiess from './helper-utilities';\nimport hookUtilitiess from './hook-utilities';\n\nconst ErrorHelperUtilities = () => ({\n  ...helperUtilitiess,\n});\n\nconst ErrorHookUtilities = () => ({\n  ...hookUtilitiess,\n});\n\nexport {\n  ErrorHelperUtilities,\n  ErrorHookUtilities,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-billpay-errors/scripts/index.js","/**\n * @name formInputHasError\n * @inner\n * @type {function}\n * @description check if field has error\n * @param {string} inputName - name of field\n * @param {object} form - angular form\n * @param {boolean} forceValidate\n * @return {boolean}\n*/\nconst formInputHasError = (inputName, form, forceValidate) =>\n  form && !!form[inputName] &&\n  (form.$submitted || form[inputName].$touched || forceValidate) &&\n  form[inputName].$invalid;\n\n/**\n * @name formErrors\n * @inner\n * @type {function}\n * @description get the error key map for the form\n * @param {object} error - error type\n * @return {string}\n*/\nconst formErrors = (error) => {\n  const [errorName = 'required'] = Object.keys(error);\n  const errorMessage = type => `error.${type}.${errorName}`;\n  return {\n    // Payees\n    billpay_manage_payee_name: errorMessage('name'),\n    billpay_manage_payee_nickname: errorMessage('nickname'),\n    billpay_manage_payee_account: errorMessage('account'),\n    billpay_manage_payee_address1: errorMessage('address1'),\n    billpay_manage_payee_address2: errorMessage('address2'),\n    billpay_manage_payee_city: errorMessage('city'),\n    billpay_manage_payee_state: errorMessage('state'),\n    billpay_manage_payee_zip: errorMessage('zip'),\n    billpay_manage_payee_phone: errorMessage('phone'),\n\n    // Payments\n    billpay_payment_account: errorMessage('account'),\n    billpay_payment_amount: errorMessage('amount'),\n    billpay_payment_date: errorMessage('date'),\n\n    // rush payment overnight address\n    billpay_pay_a_bill_rush_address1: errorMessage('address1'),\n    billpay_pay_a_bill_rush_address2: errorMessage('address2'),\n    billpay_pay_a_bill_rush_city: errorMessage('city'),\n    billpay_pay_a_bill_rush_state: errorMessage('state'),\n    billpay_pay_a_bill_rush_zip: errorMessage('zip'),\n  };\n};\n\n/**\n * @name backendError\n * @inner\n * @type {function}\n * @description get the backend error for a field - fallback to message field\n *  if key doesn't map to i18n string\n * @param {object} errorMap\n * @param {string} inputName - name of field\n * @param {function} $filter\n * @return {string}\n*/\nconst backendError = (errorMap, inputName, $filter) => {\n  const key = errorMap && errorMap[inputName] && errorMap[inputName].key;\n  return key ? ($filter('i18n')(key) || errorMap[inputName].message) : '';\n};\n\n/**\n * @name hasError\n * @inner\n * @type {function}\n * @description Check if the field has form or backend error\n * @param {string} inputName - field name\n * @param {object} errorMap\n * @param {?object} form - angular form\n * @param {function} $filter\n * @param {boolean} forceValidate\n * @return {boolean}\n*/\nconst hasError = (inputName, errorMap, form, $filter, forceValidate) =>\n  formInputHasError(inputName, form, forceValidate) || !!backendError(errorMap, inputName, $filter);\n\n/**\n * @name hasErrorClass\n * @inner\n * @type {function}\n * @description return class to indicate if field has error\n * @param {string} inputName - field name\n * @param {object} errorMap\n * @param {object} form - angular form\n * @param {function} $filter\n * @param {boolean} forceValidate\n * @return {object}\n*/\nconst hasErrorClass = (inputName, errorMap, form, $filter, forceValidate) =>\n  ({ 'was-validated is-invalid': hasError(inputName, errorMap, form, $filter, forceValidate) });\n\n/**\n * @name getError\n * @inner\n * @type {function}\n * @description get form or backend error\n * @param {string} inputName - field name\n * @param {object} errorMap\n * @param {object} form - angular form\n * @param {function} $filter\n * @param {boolean} forceValidate\n * @return {string}\n*/\nconst getError = (inputName, errorMap, form, $filter, forceValidate) => {\n  // if inputName is indexed lop off index to find error\n  const index = inputName.substring(inputName.lastIndexOf('_') + 1);\n  const fieldName = isNaN(index) ? inputName : inputName.substring(0, inputName.lastIndexOf('_'));\n\n  return (formInputHasError(inputName, form, forceValidate)\n    ? $filter('i18n')(formErrors(form[inputName].$error)[fieldName])\n    : backendError(errorMap, inputName, $filter));\n};\n\n/**\n * @name clearBackendError\n * @inner\n * @type {function}\n * @description clear backend field and page error\n * @param {string} inputName - field name\n * @param {object} errorMap\n * @param {function} clearFn\n*/\nconst clearBackendError = (inputName, errorMap, clearFn) => {\n  const errorKey = errorMap ? inputName : 'billpay_page_error';\n  clearFn(errorKey);\n};\n\n/**\n * @name Helpers\n * @type {Object}\n * @description Helpers for displaying errors\n */\nexport default {\n  /**\n   * @name Helpers#formInputHasError\n   * @type {function}\n   * @description check if field has error\n   * @param {string} inputName - name of field\n   * @param {?object} form - angular form\n   * @param {boolean} forceValidate\n   * @return {boolean}\n  */\n  formInputHasError,\n\n  /**\n   * @name Helpers#hasError\n   * @type {function}\n   * @description Check if the field has form or backend error\n   * @param {string} inputName - field name\n   * @param {object} errorMap\n   * @param {?object} form - angular form\n   * @param {function} $filter\n   * @param {boolean} forceValidate\n   * @return {boolean}\n  */\n  hasError,\n\n  /**\n   * @name Helpers#hasErrorClass\n   * @type {function}\n   * @description return class to indicate if field has error\n   * @param {string} inputName - field name\n   * @param {object} errorMap\n   * @param {?object} form - angular form\n   * @param {function} $filter\n   * @param {boolean} forceValidate\n   * @return {object}\n  */\n  hasErrorClass,\n\n  /**\n   * @name Helpers#getError\n   * @type {function}\n   * @description get form or backend error\n   * @param {string} inputName - field name\n   * @param {object} errorMap\n   * @param {?object} form - angular form\n   * @param {function} $filter\n   * @param {boolean} forceValidate\n   * @return {string}\n  */\n  getError,\n\n  /**\n   * @name Helpers#clearBackendError\n   * @type {function}\n   * @description clear backend field and page error\n   * @param {string} inputName - field name\n   * @param {object} errorMap\n   * @param {function} clearFn\n  */\n  clearBackendError,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-billpay-errors/scripts/helper-utilities.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\n\nconst ERROR_MESSAGES = {\n  [E_AUTH]: 'billpay.model.error.auth',\n  [E_CONNECTIVITY]: 'billpay.model.error.connectivity',\n  [E_USER]: 'billpay.model.error.user',\n  [E_UNEXPECTED]: 'billpay.model.error.unexpected',\n};\n\n/**\n * @name errorToFieldMap\n * @type {Object<string, Object>}\n * @description map of backend error to matching field name\n * @inner\n */\nconst errorToFieldMap = {\n  'billpay.api.invalidRequest': { field: 'billpay_page_error', unrecoverable: true },\n  'billpay.api.internalError': { field: 'billpay_page_error', unrecoverable: true },\n\n  // Payees\n  'billpay.api.payeeAlreadyExists': { field: 'billpay_manage_payee_name' },\n  'billpay.api.invalidStatus': { field: 'billpay_manage_payee_name' },\n  'billpay.api.accountSchemingFailed': { field: 'billpay_manage_payee_name' },\n  'billpay.api.invalidZipCode': { field: 'billpay_manage_payee_zip' },\n  'billpay.api.invalidAccountNumber': { field: 'billpay_manage_payee_account' },\n  'billpay.api.invalidAddressInformation':\n    { field: 'billpay_manage_payee_address1' },\n  'billpay.api.invalidCityName': { field: 'billpay_manage_payee_city' },\n  'billpay.api.invalidStateCode': { field: 'billpay_manage_payee_state' },\n\n  // Payments, recoverable\n  'billpay.api.invalidNextPaymentDate': { field: 'billpay_payment_date' },\n  'billpay.api.paymentTooFarInAdvance': { field: 'billpay_payment_date' },\n  'billpay.api.invalidPaymentDate': { field: 'billpay_payment_date' },\n  'billpay.api.invalidPaymentAmount': { field: 'billpay_payment_amount' },\n  'billpay.api.paymentAmountTooLarge': { field: 'billpay_payment_amount' },\n  'billpay.api.paymentAmountTooSmall': { field: 'billpay_payment_amount' },\n  'billpay.api.invalidBankAccount': { field: 'billpay_payment_account' },\n  'billpay.api.paymentAlreadyExists': { field: 'billpay_payment_already_exists' },\n  'billpay.api.missingPaymentInformation': { field: 'billpay_payment_missing_information' },\n  'billpay.api.invalidEBillID': { field: 'billpay_payment_invalid_ebill' },\n  'billpay.api.dailyLimitExceeded': { field: 'billpay_payment_daily_limit_exceeded' },\n  'billpay.api.inactivePayee': { field: 'billpay_payment_payee' },\n  'billpay.api.invalidPayee': { field: 'billpay_payment_payee' },\n  // Payments, non-recoverable\n  'billpay.api.riskCheckFailed': { field: 'billpay_payment_risk_failed', unrecoverable: true },\n  'billpay.api.failedToChangePaymentState':\n    { field: 'billpay_payment_change_failed', unrecoverable: true },\n  'billpay.api.fraudCheckFailed': { field: 'billpay_payment_fraud_failed', unrecoverable: true },\n  'billpay.api.tooManyPaymentsRequested':\n    { field: 'billpay_payment_too_many_payments', unrecoverable: true },\n\n  // Recurring payment, specific. Recoverable assumed\n  'billpay.api.finalDateBeforeFirstDate':\n    { field: 'billpay_payment_date', unrecoverable: false },\n  'billpay.api.paymentQuantityExceeded':\n    { field: 'billpay_payment_quantity', unrecoverable: false },\n  'billpay.api.invalidCardRequest': { field: 'billpay_payment_account', unrecoverable: false },\n};\n\n/**\n * @name keyToFieldMap\n * @type {Object<string, string>}\n * @description map of backend raml fields to matching form field name\n * @inner\n */\nconst keyToFieldMap = {\n  // Payees\n  name: 'billpay_manage_payee_name',\n  nickName: 'billpay_manage_payee_nickname',\n  accountNumber: 'billpay_manage_payee_account',\n  city: 'billpay_manage_payee_city',\n  state: 'billpay_manage_payee_state',\n  postalCode: 'billpay_manage_payee_zip',\n  address1: 'billpay_manage_payee_address1',\n  address2: 'billpay_manage_payee_address2',\n\n  // Payments\n  paymentAccount: 'billpay_payment_account',\n  paymentAmount: 'billpay_payment_amount',\n  paymentDate: 'billpay_payment_date',\n  payee: 'billpay_payment_payee',\n};\n\n/**\n * @name fallbackMapping\n * @type {function}\n * @description attempt to map from a key with a raml field to a form field\n * @param {string} [key]\n * @return {string}\n * @inner\n */\nconst fallbackMapping = (key = '') => {\n  const [keyField] = key.split('.').reverse();\n  return keyToFieldMap[keyField];\n};\n\n/**\n * @name keyFromFieldMap\n * @type {function}\n * @description attempt to get a key from the errorToFieldMap\n * @param {string} key\n * @return {string}\n * @inner\n */\nconst keyFromFieldMap = (key) => (errorToFieldMap[key] && errorToFieldMap[key].field) || '';\n\n/**\n * @name fieldId\n * @type {function}\n * @description Get a fieldID string using the map, the fallback or a default\n * @param {object} error\n * @param {string} error.key\n * @return {string}\n * @inner\n */\nconst fieldId = ({ key }) => keyFromFieldMap(key) || fallbackMapping(key) || 'billpay_page_error';\n\n/**\n * @name errorIsUnrecoverable\n * @type {function}\n * @description Return true if the key exists in the map and is unrecoverable\n * @param {object} error\n * @param {string} error.key\n * @return {boolean}\n * @inner\n */\nconst errorIsUnrecoverable = ({ key }) =>\n  !!(errorToFieldMap[key] && errorToFieldMap[key].unrecoverable);\n\n/**\n * @name addErrorsToPayment\n * @inner\n * @type {function}\n * @param {module.model-bb-billpay-ng.Payment} payment\n * @param {Array<module.model-bb-billpay-ng.Payment>} responsePayments\n * @description Add any backend errors onto payment, mark as recoverable or not\n * @return {module.model-bb-billpay-ng.Payment} payment with errors added\n */\nconst addErrorsToPayment = (payment, responsePayments) => {\n  const errorObj =\n    responsePayments.find(responsePayment => payment.payeeID === responsePayment.payeeID);\n  const errors = (errorObj ? errorObj.errors : [])\n    .map(e => Object.assign(e, { unrecoverable: errorIsUnrecoverable(e) }));\n  return Object.assign(payment, { errors });\n};\n\n/**\n * @name addPaymentErrors\n * @inner\n * @type {function}\n * @param {object} current\n * @param {Array<module.model-bb-billpay-ng.Payment>} current.paymentsSummary.payments\n * @param {object} error\n * @description Add any backend errors onto matching payments\n * @return {Array<module.model-bb-billpay-ng.Payment>} Array of transformed payments\n */\nconst addPaymentErrors = ({ paymentsSummary: { payments } }, error) => {\n  // eslint-disable-next-line no-underscore-dangle\n  const response = error.__httpResponse;\n\n  if (error.code === E_USER && response && response.data && response.data.payments) {\n    return payments.map(payment => addErrorsToPayment(payment, response.data.payments));\n  }\n  return payments;\n};\n\n/**\n * @name Hooks\n * @type {Object}\n * @description Hooks for mapping errors\n */\nexport default {\n  /**\n   * @name Hooks#getErrorMap\n   * @type {function}\n   * @description convert backend errors into a map keyed by field name\n   * @param {Array<{key : string}>} errors\n   * @return {Object<string, {key : string}>}\n   */\n  getErrorMap: (errors) => {\n    const defaultEntry = { billpay_page_error: { key: 'billpay.model.error.default' } };\n    return errors.reduce((map, error) =>\n      Object.assign(map, {\n        [fieldId(error)]: {\n          ...error,\n          // Set unrecoverable if it is true\n          ...errorIsUnrecoverable(error) && { unrecoverable: true },\n        },\n      }), defaultEntry);\n  },\n\n  /**\n   * @name Hooks#transformErrorMap\n   * @type {function}\n   * @description map backend errors into error object\n   * @param {module:lib-bb-model-errors.ModelError} modelError\n   * @return {{message : string, errors : Array<Object>}} mapped error\n   */\n  transformErrorMap: (modelError) => {\n    const errors =\n      /* eslint-disable no-underscore-dangle */\n      (modelError &&\n        modelError.code === E_USER &&\n        modelError.__httpResponse &&\n        modelError.__httpResponse.data.errors) ||\n      [];\n      /* eslint-enable no-underscore-dangle */\n    return {\n      message: modelError && modelError.code ? ERROR_MESSAGES[modelError.code] : '',\n      fromFormSubmission: true,\n      errors,\n    };\n  },\n\n  /**\n   * @name Hooks#clearBackendError\n   * @type {function}\n   * @description clear an error from the map of backend errors\n   * @param {string} inputName\n   * @param {object} state\n   * @param {object} state.errorMap\n   * @return {object}\n   */\n  clearBackendError: (inputName, { errorMap }) => {\n    const map = errorMap; // avoid eslint no-param-reassign\n    if (map) {\n      delete map[inputName];\n    }\n    if (map && Object.keys(map).length === 1 && map.billpay_page_error) {\n      // if no input field errors remove page error\n      delete map.billpay_page_error;\n    }\n    return errorMap;\n  },\n\n  /**\n   * @name Hooks#addPaymentErrors\n   * @type {function}\n   * @param {object} current\n   * @param {Array<module.model-bb-billpay-ng.Payment>} current.paymentsSummary.payments\n   * @param {object} error\n   * @description Add any backend errors onto matching payments\n   * @return {Array<module.model-bb-billpay-ng.Payment>} Array of transformed payments\n   */\n  addPaymentErrors,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-billpay-errors/scripts/hook-utilities.js","module.exports = __WEBPACK_EXTERNAL_MODULE_45__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 45\n// module chunks = 6 7 10 11"],"sourceRoot":""}