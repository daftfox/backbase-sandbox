{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///webpack/bootstrap f3d2485eec67eb2fdf62?1eb6***","webpack:///./ext-bb-billpay-pay-recurring-bill-ng/model.xml","webpack:///external \"vendor-bb-angular-ng-aria\"?9d0e**","webpack:///external \"ui-bb-confirm-ng\"?ed9c*","webpack:///external \"ui-bb-currency-input-ng\"?3ab2*","webpack:///external \"ui-bb-dropdown-select-ng\"?4101**","webpack:///external \"ui-bb-i18n-ng\"?dc01**","webpack:///external \"ui-bb-format-amount-ng\"?8f72**","webpack:///external \"ui-bb-loading-overlay-ng\"?3561**","webpack:///external \"ui-bb-number-input-ng\"?969d","webpack:///external \"ui-bb-stepper-ng\"?1edd","webpack:///external \"ui-bb-substitute-error-ng\"?f57a*","webpack:///external \"vendor-bb-uib-datepicker\"?e2fd*","webpack:///external \"vendor-bb-uib-datepicker-popup\"?67db*","webpack:///./ext-bb-billpay-pay-recurring-bill-ng/scripts/index.js","webpack:///./ext-bb-billpay-pay-recurring-bill-ng/scripts/hooks.js","webpack:///./ext-bb-billpay-pay-recurring-bill-ng/scripts/helpers.js","webpack:///external \"ui-bb-loading-indicator-ng\""],"names":["default","dependencyKeys","ngAriaKey","uiBbConfirmKey","uiBbCurrencyInputKey","uiBbDropdownSelectKey","uiBbFormatAmountKey","uiBbI18nKey","uiBbLoadingIndicatorKey","uiBbLoadingOverlayKey","uiBbNumberInputKey","uiBbStepperKey","uiBbSubstituteErrorKey","uibDatepickerKey","uibDatepickerPopupKey","events","setState","current","mainTemplate","currentStep","isModalOpen","postingRecurringPaymentsComplete","transformPayee","payee","displayName","nickName","name","Helpers","isDatepickerPastDate","date","dateService","isDateInPast","isDatepickerAfterAYear","isDateBefore","getDateTodayPlusAYear","datepickerError","minPaymentDate","limitMaxDate","datepicker","$viewValue","$modelValue","length","isDatepickerValidFormat","isValidDate","isWeekend","stateContainer","managePaymentService","$filter","bbIntent","errorHelperUtilities","managePaymentViewModel","viewBillpaySummaryIntent","create","updateState","viewState","createAction","isStepZeroComplete","account","paymentAmount","paymentDate","frequency","frequencyEnd","numberOfInstances","finalPaymentDate","paymentDateIsValid","mainFieldsFilled","value","untilChange","untilNumber","untilDate","resetFormToStepZero","stepperCtrl","recurringPaymentCtrl","Object","assign","allowBack","goToStep","resetNewPayment","accounts","transformPaymentObject","newPayment","alert","accountNumber","accountType","routingNumber","payment","calculateNumberOfInstances","toUpperCase","payeeID","id","parseFloat","convertDateToServerDayString","paymentAccount","unrecoverableErrorsExist","getState","errorMap","keys","some","key","unrecoverable","openCancelConfirmationModal","confirmCancel","returnUserToBillpaySummary","getCurrentIndex","clearPayeeFromStorage","hasLoadingError","getItems","items","resetFinalPaymentDate","clearBackendError","inputName","clearFn","paymentFrequencyOptions","i18nPaymentFrequencyOption","option","i18nSingularPlural","number","str","getCurrencyCode","showFinalPaymentDate","showFinalRecurringPaymentDate","showFinalPaymentDateAndNumInstances","showFinalRecurringPaymentDateAndNumInstances","getFinalPaymentDateForNumberedInstances","getFinalRecurringPaymentDate","getFinalPaymentDateGivenEndDate","initialPageIsLoading","isLoadingPayees","isLoadingAccounts","getLoadingErrorKey","type","getLoadingErrorClass","datepickerHasError","form","finalDateDatepickerError","error","overwriteErrorMappings","datepickerErrorClass","cancelHandler","sharedStepperCtrl","onCancel","onConfirmCancel","allowNextStep","allowPreviousStep","onFinish","recurringPayment","postRecurringPaymentsRecord","then","notification","status","message","catch","onBeforeStepChange","tmpPaymentAmount","tmpPayee","tmpAccount","stepperLabels","previous","next","cancel","finish","alertOptions","modelKey","i18nKey","cancelModalLabels","heading","bodyText","confirm","datepickerOptions","defaultOptions","extraOptions","disableEndDateInput","isBadFirstPaymentDate","disableNumInstancesInput","onPaymentDateChange","onPayeeChange","updatePaymentDateForNewPayee","currentState","onAmountChange","$ctrl","getLoadingErrorMessageKey","fromFormSubmission","hasError","hasErrorClass","getError","onPaymentAccountChange","generalErrorMessages","unrecoverableErrorMessages","unrecoverablePageErrorExists","billpay_page_error","errorsExist","currencyInputLabels"],"mappings":"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","file":"ext-bb-billpay-pay-recurring-bill-ng/scripts/ext-bb-billpay-pay-recurring-bill-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-confirm-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-dropdown-select-ng\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-number-input-ng\"), require(\"ui-bb-stepper-ng\"), require(\"ui-bb-substitute-error-ng\"), require(\"vendor-bb-uib-datepicker\"), require(\"vendor-bb-uib-datepicker-popup\"), require(\"ui-bb-loading-indicator-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-bb-billpay-pay-recurring-bill-ng\", [\"vendor-bb-angular-ng-aria\", \"ui-bb-confirm-ng\", \"ui-bb-currency-input-ng\", \"ui-bb-dropdown-select-ng\", \"ui-bb-i18n-ng\", \"ui-bb-format-amount-ng\", \"ui-bb-loading-overlay-ng\", \"ui-bb-number-input-ng\", \"ui-bb-stepper-ng\", \"ui-bb-substitute-error-ng\", \"vendor-bb-uib-datepicker\", \"vendor-bb-uib-datepicker-popup\", \"ui-bb-loading-indicator-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-bb-billpay-pay-recurring-bill-ng\"] = factory(require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-confirm-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-dropdown-select-ng\"), require(\"ui-bb-i18n-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-loading-overlay-ng\"), require(\"ui-bb-number-input-ng\"), require(\"ui-bb-stepper-ng\"), require(\"ui-bb-substitute-error-ng\"), require(\"vendor-bb-uib-datepicker\"), require(\"vendor-bb-uib-datepicker-popup\"), require(\"ui-bb-loading-indicator-ng\"));\n\telse\n\t\troot[\"ext-bb-billpay-pay-recurring-bill-ng\"] = factory(root[\"vendor-bb-angular-ng-aria\"], root[\"ui-bb-confirm-ng\"], root[\"ui-bb-currency-input-ng\"], root[\"ui-bb-dropdown-select-ng\"], root[\"ui-bb-i18n-ng\"], root[\"ui-bb-format-amount-ng\"], root[\"ui-bb-loading-overlay-ng\"], root[\"ui-bb-number-input-ng\"], root[\"ui-bb-stepper-ng\"], root[\"ui-bb-substitute-error-ng\"], root[\"vendor-bb-uib-datepicker\"], root[\"vendor-bb-uib-datepicker-popup\"], root[\"ui-bb-loading-indicator-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_32__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f3d2485eec67eb2fdf62","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-bb-billpay-pay-recurring-bill-ng/model.xml\n// module id = 0\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-aria\"\n// module id = 4\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-confirm-ng\"\n// module id = 5\n// module chunks = 0 1 3","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-currency-input-ng\"\n// module id = 6\n// module chunks = 0 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-dropdown-select-ng\"\n// module id = 7\n// module chunks = 0 1 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 8\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-format-amount-ng\"\n// module id = 9\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-overlay-ng\"\n// module id = 10\n// module chunks = 0 1 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-number-input-ng\"\n// module id = 11\n// module chunks = 0 3","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-stepper-ng\"\n// module id = 12\n// module chunks = 0 3","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-substitute-error-ng\"\n// module id = 13\n// module chunks = 0 2 3 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-datepicker\"\n// module id = 14\n// module chunks = 0 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-datepicker-popup\"\n// module id = 15\n// module chunks = 0 2 3","/**\n * @module ext-bb-billpay-pay-recurring-bill-ng\n *\n * @description\n * Extension for widget-bb-billpay-manage-payment-ng\n *\n * @requires vendor-bb-angular-ng-aria\n */\nimport ngAriaKey from 'vendor-bb-angular-ng-aria';\nimport uiBbConfirmKey from 'ui-bb-confirm-ng';\nimport uiBbCurrencyInputKey from 'ui-bb-currency-input-ng';\nimport uiBbDropdownSelectKey from 'ui-bb-dropdown-select-ng';\nimport uiBbFormatAmountKey from 'ui-bb-format-amount-ng';\nimport uiBbI18nKey from 'ui-bb-i18n-ng';\nimport uiBbLoadingIndicatorKey from 'ui-bb-loading-indicator-ng';\nimport uiBbLoadingOverlayKey from 'ui-bb-loading-overlay-ng';\nimport uiBbNumberInputKey from 'ui-bb-number-input-ng';\nimport uiBbStepperKey from 'ui-bb-stepper-ng';\nimport uiBbSubstituteErrorKey from 'ui-bb-substitute-error-ng';\nimport uibDatepickerKey from 'vendor-bb-uib-datepicker';\nimport uibDatepickerPopupKey from 'vendor-bb-uib-datepicker-popup';\n\nexport const dependencyKeys = [\n  ngAriaKey,\n  uiBbConfirmKey,\n  uiBbCurrencyInputKey,\n  uiBbDropdownSelectKey,\n  uiBbFormatAmountKey,\n  uiBbI18nKey,\n  uiBbLoadingIndicatorKey,\n  uiBbLoadingOverlayKey,\n  uiBbNumberInputKey,\n  uiBbStepperKey,\n  uiBbSubstituteErrorKey,\n  uibDatepickerKey,\n  uibDatepickerPopupKey,\n];\n\nexport { default as hooks } from './hooks';\n\nexport { default as helpers } from './helpers';\n\nexport const events = {};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-billpay-pay-recurring-bill-ng/scripts/index.js","/**\n * @name Hooks\n * @type {Object}\n * @description extension hooks\n */\nexport default {\n  setState(current) {\n    return {\n      ...current,\n      mainTemplate: '#ext-bb-billpay-pay-recurring-bill-ng/main.ng.html',\n      currentStep: 0,\n      isModalOpen: false,\n      postingRecurringPaymentsComplete: false,\n    };\n  },\n\n  /**\n   * @name Hooks#transformPayee\n   * @type {function}\n   * @description Perform any transformations required to prepare the PayeeSummary item for display\n   * @param {module:model-bb-billpay-ng.PayeeSummary} payee\n   * @return {Object} transformed payee\n   */\n  transformPayee(payee) {\n    return {\n      ...payee,\n      displayName: payee.nickName || payee.name,\n    };\n  },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-billpay-pay-recurring-bill-ng/scripts/hooks.js","// Check if is datepicker past date\nconst isDatepickerPastDate = (date, dateService) => dateService.isDateInPast(date);\n// check if datepicker date is in the next year\nconst isDatepickerAfterAYear = (date, dateService) =>\n  !dateService.isDateBefore(date, dateService.getDateTodayPlusAYear());\n\n/**\n * @name datepickerError\n * @type {function}\n * @description Return error i18n strings (or empty for no error) based on the datepicker input\n * @param {object} dateService\n * @param {object} datePickerForm - ng form for the datepicker\n * @param {date} minPaymentDate\n * @param {boolean} limitMaxDate\n * @return {string}\n * @inner\n */\nconst datepickerError = (\n  dateService,\n  { datepicker: { $viewValue, $modelValue } },\n  minPaymentDate,\n  limitMaxDate\n) => {\n  if ($viewValue === null) {\n    return '';\n  }\n  if ($viewValue.length === 0) {\n    return 'datepicker.error.empty';\n  } else if (!dateService.isDatepickerValidFormat($viewValue) ||\n  !dateService.isValidDate($modelValue)) {\n    return 'datepicker.error.format';\n  } else if (isDatepickerPastDate($modelValue, dateService)) {\n    return 'datepicker.error.date-in-past';\n  } else if (dateService.isDateBefore($modelValue, minPaymentDate)) {\n    return 'datepicker.error.early-date';\n  } else if (dateService.isWeekend($modelValue)) {\n    return 'datepicker.error.wrong-date';\n  } else if (limitMaxDate && isDatepickerAfterAYear($modelValue, dateService)) {\n    return 'datepicker.error.year-range';\n  }\n  return '';\n};\n\n/**\n * @constructor Helpers\n */\nexport default function Helpers(\n  {\n    stateContainer,\n    managePaymentService,\n    dateService,\n    $filter,\n    bbIntent,\n    errorHelperUtilities,\n    managePaymentViewModel,\n  }) {\n  const viewBillpaySummaryIntent = bbIntent.create('intent.rb.billpay.summary.view');\n\n  /**\n   * @name updateState\n   * @type {function}\n   * @description update view state\n   * @param {object} viewState - new state\n   * @inner\n   */\n  const updateState = (viewState) =>\n    // On one line, eslint enforced trailing comma breaks Chrome & Bitbucket syntax highlighting\n    stateContainer.createAction(current => ({ ...current, ...viewState }))(viewState);\n\n  /**\n   * @name isStepZeroComplete\n   * @type {function}\n   * @description Returns true of all fields for step 1 have been completed\n   * @param {object} newPayment\n   * @return {boolean}\n   * @inner\n   */\n  const isStepZeroComplete = ({\n    payee,\n    account,\n    paymentAmount,\n    paymentDate,\n    minPaymentDate,\n    frequency,\n    frequencyEnd,\n    numberOfInstances,\n    finalPaymentDate,\n  }) => {\n    const paymentDateIsValid = dateService.isValidDate(paymentDate)\n      && !dateService.isDateBefore(paymentDate, minPaymentDate)\n      && !dateService.isWeekend(paymentDate);\n    const mainFieldsFilled = !!payee && !!account && !!frequency && paymentAmount.value > 0\n      && paymentDateIsValid;\n\n    const untilChange = frequencyEnd === 'manual';\n    const untilNumber = frequencyEnd === 'number' && !!numberOfInstances;\n    const untilDate = frequencyEnd === 'date'\n      && dateService.isValidDate(finalPaymentDate)\n      && !dateService.isWeekend(finalPaymentDate)\n      && !dateService.isDateBefore(finalPaymentDate, paymentDate);\n\n    return mainFieldsFilled && (untilChange || untilNumber || untilDate);\n  };\n\n  /**\n   * @name resetFormToStepZero\n   * @type {function}\n   * @description Return the form to initial state\n   * @param {object} stepperCtrl The control state of the stepper directive\n   * @param {object} recurringPaymentCtrl The control state of the recurring payment\n   * @param {object} viewState\n   * @return {boolean}\n   * @inner\n   */\n  const resetFormToStepZero = (stepperCtrl, recurringPaymentCtrl, viewState) => {\n    // Navigate to step 0 & reset the form\n\n    updateState({\n      ...viewState,\n      isModalOpen: false,\n      postingRecurringPaymentsComplete: false,\n    });\n\n    // Temporarily allow the stepper to be allowed to go backwards\n    Object.assign(stepperCtrl, { allowBack: true });\n    stepperCtrl.goToStep(0);\n\n    recurringPaymentCtrl.resetNewPayment(viewState.accounts[0]);\n  };\n\n  /**\n   * @name transformPaymentObject\n   * @type {function}\n   * @description Transform the new payment object from the page into one formatted for a POST\n   *   request\n   * @param {object} newPayment - newPayment from the template\n   * @return {module:data-bb-bill-pay-http-ng.BillPayData.RecurringPayment}\n   * @inner\n   */\n  const transformPaymentObject = (newPayment) => {\n    const {\n      frequency,\n      numberOfInstances,\n      alert,\n      payee,\n      paymentAmount,\n      paymentDate,\n      frequencyEnd,\n      account: { accountNumber, accountType, routingNumber },\n    } = newPayment;\n\n    return {\n      payment: {\n        // Include numberOfInstances if frequencyEnd is \"number\"\n        ...frequencyEnd === 'number' && { numberOfInstances },\n\n        // Set numberOfInstances based on the finalPaymentDate if frequencyEnd is \"date\"\n        ...frequencyEnd === 'date' && {\n          numberOfInstances: dateService.calculateNumberOfInstances(newPayment),\n        },\n\n        // Split the alerts out of their object\n        ...alert,\n        frequency: frequency.toUpperCase(),\n        payeeID: payee.id,\n        paymentAmount: parseFloat(paymentAmount.value),\n        paymentDate: dateService.convertDateToServerDayString(paymentDate),\n        paymentAccount: { accountNumber, accountType, routingNumber },\n      },\n    };\n  };\n\n  /**\n   * @name unrecoverableErrorsExist\n   * @inner\n   * @type {function}\n   * @description return true if there are unrecoverable errors in the error map\n   * @return {boolean}\n   */\n  const unrecoverableErrorsExist = () => {\n    const { errorMap = {} } = stateContainer.getState();\n    return Object.keys(errorMap).some(key => errorMap[key].unrecoverable);\n  };\n\n  /**\n   * @name openCancelConfirmationModal\n   * @description Change the view state to show the cancel modal\n   * @param {Object} viewState\n   * @inner\n   */\n  const openCancelConfirmationModal = (viewState) => {\n    updateState({\n      ...viewState,\n      isModalOpen: true,\n    });\n  };\n\n  /**\n   * @name confirmCancel\n   * @description Clear and reset the form to step 1 if the user is not on it, otherwise call the\n   *   view billpay summary intent to navigate away from the widget\n   * @param {Object} viewState\n   * @param {Object} recurringPaymentCtrl - Control state of the recurring payment\n   * @param {Object} stepperCtrl - Control state of the stepper component\n   * @inner\n   */\n  const confirmCancel = (viewState, recurringPaymentCtrl, stepperCtrl) => {\n    const returnUserToBillpaySummary =\n      stepperCtrl.getCurrentIndex() === 0 || unrecoverableErrorsExist();\n\n    if (returnUserToBillpaySummary) {\n      recurringPaymentCtrl.clearPayeeFromStorage();\n      viewBillpaySummaryIntent();\n    } else {\n      resetFormToStepZero(stepperCtrl, recurringPaymentCtrl, viewState);\n    }\n  };\n\n  /**\n   * @name hasLoadingError\n   * @type {function}\n   * @description return true if passed in function returns no items\n   * @param {function} getItems\n   * @inner\n   * @return {boolean}\n   */\n  const hasLoadingError = (getItems) => {\n    const items = getItems();\n    return !items || !items.length;\n  };\n\n  /**\n   * @name resetFinalPaymentDate\n   * @inner\n   * @type {function}\n   * @description Reset the final payment date to initial state\n   * @param {object} newPayment\n   */\n  const resetFinalPaymentDate = (newPayment) => {\n    Object.assign(newPayment, {\n      finalPaymentDate: null,\n    });\n  };\n\n  /**\n   * @name clearBackendError\n   * @inner\n   * @type {function}\n   * @description clear backend field and page error\n   * @param {string} inputName - field name\n   */\n  const clearBackendError = (inputName) => {\n    const { clearBackendError: clearFn } = managePaymentViewModel;\n    const { errorMap } = stateContainer.getState();\n    errorHelperUtilities.clearBackendError(inputName, errorMap, clearFn);\n  };\n\n  /**\n   * @name Helpers\n   * @type {Object}\n   */\n  return {\n    /**\n     * @name Helpers#paymentFrequencyOptions\n     * @type {array}\n     * @description Different options for payment frequencies\n     */\n    paymentFrequencyOptions: [\n      'weekly',\n      'bi-weekly',\n      'semi-monthly',\n      'monthly',\n      'quarterly',\n      'semi-annually',\n      'annually',\n    ],\n\n    /**\n     * @name Helpers#i18nPaymentFrequencyOption\n     * @type {function}\n     * @description Return the i18n string for the given frequency option\n     * @param {string} option - The option selected for the frequency\n     * @return {string} i18n string\n     */\n    i18nPaymentFrequencyOption: (option) => $filter('i18n')(`payment.regularity.options.${option}`),\n\n    /**\n     * @name Helpers#i18nSingularPlural\n     * @type {function}\n     * @description Take a number and i18n key. Append '.singular' or '.plural' to the key\n     *  based on the number and filter that with i18n.\n     * @param {number} number The number to check the value of\n     * @param {string} str The key to append to\n     * @return {string} The singular or plural message from messages.json\n     */\n    i18nSingularPlural: (number, str) =>\n      $filter('i18n')(number === 1 ? `${str}.singular` : `${str}.plural`),\n\n    /**\n     * @name Helpers#getCurrencyCode\n     * @type {function}\n     * @description get the currency code from service\n     * @return {string}\n     */\n    getCurrencyCode() {\n      return managePaymentService.getCurrencyCode();\n    },\n\n    /**\n     * @name Helpers#showFinalPaymentDate\n     * @type {function}\n     * @description return whether to show the final payment date from the date service\n     * @param {object} newPayment\n     * @return {boolean}\n     */\n    showFinalPaymentDate: dateService.showFinalRecurringPaymentDate,\n\n    /**\n     * @name Helpers#showFinalPaymentDateAndNumInstances\n     * @type {function}\n     * @description return whether to show the final payment date and no. of instances from the\n     *   date service\n     * @param {object} newPayment\n     * @return {boolean}\n     */\n    showFinalPaymentDateAndNumInstances: dateService.showFinalRecurringPaymentDateAndNumInstances,\n\n    /**\n     * @name Helpers#getFinalPaymentDateForNumberedInstances\n     * @type {function}\n     * @description get the date of the final recurring payment from date service given that the\n     *   numberOfInstances has been given by the user\n     * @param {object} newPayment\n     * @return {date}\n     */\n    getFinalPaymentDateForNumberedInstances: ({ paymentDate, frequency, numberOfInstances }) =>\n      dateService.getFinalRecurringPaymentDate(paymentDate, frequency, numberOfInstances),\n\n    /**\n     * @name Helpers#getFinalPaymentDateGivenEndDate\n     * @type {function}\n     * @description get the date of the final recurring payment from date service given that the\n     *   the finalPaymentDate has been given\n     * @param {object} newPayment\n     * @return {date}\n     */\n    getFinalPaymentDateGivenEndDate: (newPayment) => {\n      const { paymentDate, frequency } = newPayment;\n      const numberOfInstances = dateService.calculateNumberOfInstances(newPayment);\n      return dateService.getFinalRecurringPaymentDate(paymentDate, frequency, numberOfInstances);\n    },\n\n    /**\n     * @name Helpers#initialPageIsLoading\n     * @type {function}\n     * @description Return true if the initial GET requests are running. Want to ensure that the\n     *   template only renders once complete. The loading indicator flashes its child properties\n     *   before hiding them\n     * @return {boolean}\n     */\n    initialPageIsLoading: () => {\n      const { isLoadingPayees, isLoadingAccounts } = stateContainer.getState();\n      return isLoadingPayees || isLoadingAccounts;\n    },\n\n    /**\n     * @name Helpers#hasLoadingError\n     * @type {function}\n     * @description return true if passed in function returns no items\n     * @param {function} getItems\n     * @return {boolean}\n     */\n    hasLoadingError,\n\n    /**\n     * @name Helpers#getLoadingErrorKey\n     * @type {function}\n     * @description return error message key for input type\n     * @param {string} type - input type\n     * @return {string} error key\n     */\n    getLoadingErrorKey: (type) => `${type}.error.no-items`,\n\n    /**\n     * @name Helpers#getLoadingErrorClass\n     * @type {function}\n     * @description return error class if hasLoadingError is true\n     * @param {function} getItems\n     * @return {{'was-validated is-invalid':boolean}} object with error class indicator\n     */\n    getLoadingErrorClass: (getItems) => ({ 'was-validated is-invalid': hasLoadingError(getItems) }),\n\n    /**\n     * @name Helpers#datepickerHasError\n     * @type {function}\n     * @description Check if the datepicker has errors\n     * @param {DatepickerForm} form\n     * @param {date} minPaymentDate\n     * @param {boolean} limitMaxDate\n     * @return {boolean} the datepicker has errors\n     */\n    datepickerHasError: (form, minPaymentDate, limitMaxDate) =>\n      !!datepickerError(dateService, form, minPaymentDate, limitMaxDate),\n\n    /**\n     * @name Helpers#datepickerError\n     * @type {function}\n     * @description Returns error string key if there is an error present\n     * @param {DatepickerForm} form\n     * @param {date} minPaymentDate\n     * @param {boolean} limitMaxDate\n     * @return {string} error key or empty string\n     */\n    datepickerError: (form, minPaymentDate, limitMaxDate) =>\n      datepickerError(dateService, form, minPaymentDate, limitMaxDate),\n\n    /**\n     * @name Helpers#finalDateDatePickerError\n     * @type {function}\n     * @description Function check for datepicker errors, and to possibly override the i18n keys\n     *   from the default datepicker errors\n     * @param {DatepickerForm} form\n     * @param {date} minPaymentDate\n     * @param {boolean} limitMaxDate\n     * @return {string}\n     */\n    finalDateDatepickerError: (form, minPaymentDate, limitMaxDate) => {\n      const error = datepickerError(dateService, form, minPaymentDate, limitMaxDate);\n      const overwriteErrorMappings = {\n        'datepicker.error.early-date': 'datepicker.error.early-final-payment-date',\n      };\n\n      return overwriteErrorMappings[error] || error;\n    },\n\n    /**\n     * @name Helpers#datepickerErrorClass\n     * @type {function}\n     * @description get datepicker error class\n     * @param {DatepickerForm} form\n     * @param {date} minPaymentDate\n     * @param {boolean} limitMaxDate\n     * @return {{'was-validated is-invalid':boolean}} object with error class indicator\n     */\n    datepickerErrorClass: (form, minPaymentDate, limitMaxDate) =>\n      ({\n        'was-validated is-invalid':\n          !!datepickerError(dateService, form, minPaymentDate, limitMaxDate),\n      }),\n    /**\n     * @name Helpers#cancelHandler\n     * @type {function}\n     * @description Handle the cancel operations: initial click and confirmation.\n     *   The confirmation function needs access to the control state of the stepper in order to\n     *   reset it, so that is stored inside this function and updated when onCancel is called from\n     *   the stepper component.\n     * @returns {CancelHandler}\n     */\n    cancelHandler: (() => {\n      const sharedStepperCtrl = {};\n\n      return {\n        /**\n         * @name CancelHandler#onCancel\n         * @type {function}\n         * @description Open the cancel confirmation modal and copy the stepper control state into\n         *   the shared stepper control var\n         * @param {object} viewState - Current view state\n         * @param {object} stepperCtrl - Stepper control state\n         */\n        onCancel: (viewState, stepperCtrl) => {\n          openCancelConfirmationModal(viewState);\n          Object.assign(sharedStepperCtrl, stepperCtrl);\n        },\n\n        /**\n         * @name CancelHandler#onConfirmCancel\n         * @type {function}\n         * @description Call the function for handling the cancel confirmation with the passed\n         *   parameters and the shared stepper control var\n         * @param {object} viewState - Current view state\n         * @param {object} recurringPaymentCtrl - Recurring payment control state\n         */\n        onConfirmCancel: (viewState, recurringPaymentCtrl) =>\n          confirmCancel(viewState, recurringPaymentCtrl, sharedStepperCtrl),\n      };\n    })(),\n\n    /**\n     * @name Helpers#allowNextStep\n     * @type {function}\n     * @description Decide whether or not to allow the user to click to the next step, check that\n     *   the 1st step is complete and that there are no unrecoverable errors\n     * @param {object} newPayment\n     * @return {boolean}\n     */\n    allowNextStep: (newPayment) => isStepZeroComplete(newPayment) && !unrecoverableErrorsExist(),\n\n    /**\n     * @name Helpers#allowPreviousStep\n     * @type {function}\n     * @description Decide whether or not to allow the user to click to the previous step, check\n     *   that there are no unrecoverable errors\n     * @return {boolean}\n     */\n    allowPreviousStep: () => !unrecoverableErrorsExist(),\n\n    /**\n     * @name Helpers#onFinish\n     * @type {function}\n     * @description Function fired by the stepper when the user completes the steps\n     * @param {object} $ctrl\n     * @param {object} $ctrl.newPayment\n     * @param {function} $ctrl.clearPayeeFromStorage\n     */\n    onFinish: ({ newPayment, clearPayeeFromStorage }) => {\n      const recurringPayment = transformPaymentObject(newPayment);\n      managePaymentService.postRecurringPaymentsRecord(recurringPayment)\n        .then(() => {\n          clearPayeeFromStorage();\n          viewBillpaySummaryIntent({\n            notification: {\n              status: 'success',\n              message: 'Payment created',\n            },\n          });\n        })\n        .catch(() => {\n          // error handling is dealt with in the service\n        });\n    },\n\n    /**\n     * @name Helpers#onBeforeStepChange\n     * @type {function}\n     * @description Fired by the stepper before a step change occurs. Keeping track of the value of\n     *   the paymentAmount. When the currency input field is rendered it triggers the change event,\n     *   so we want to know if it has actually changed\n     * @param {object} $ctrl\n     * @param {object} $ctrl.newPayment\n     * @param {object} $ctrl.newPayment.paymentAmount\n     * @param {string} $ctrl.newPayment.paymentAmount.value\n     */\n    onBeforeStepChange: ({ newPayment: { payee, account, paymentAmount: { value } } }) => {\n      stateContainer.setState({\n        ...stateContainer.getState(),\n        tmpPaymentAmount: value,\n        tmpPayee: payee,\n        tmpAccount: account,\n      });\n      // Always allow the step change to happen\n      return true;\n    },\n\n    /**\n     * @name Helpers#stepperLabels\n     * @type {object}\n     * @description Internationalised strings for the stepper buttons\n     */\n    stepperLabels: {\n      previous: $filter('i18n')('buttons.previous'),\n      next: $filter('i18n')('buttons.next'),\n      cancel: $filter('i18n')('buttons.cancel'),\n      finish: $filter('i18n')('buttons.finish'),\n    },\n\n    /**\n     * @name Helpers#alertOptions\n     * @type {array}\n     * @description Internationalised strings and model keys for alert options\n     */\n    alertOptions: [\n      {\n        modelKey: 'paymentScheduledAlert',\n        i18nKey: 'alerts.option.payment-pending',\n      }, {\n        modelKey: 'paymentSentAlert',\n        i18nKey: 'alerts.option.payment-sent',\n      }, {\n        modelKey: 'modelExpirationAlert',\n        i18nKey: 'alerts.option.last-payment-pending',\n      },\n    ],\n\n    /**\n     * @name Helpers#cancelModalLabels\n     * @type {object}\n     * @description Internationalised strings for the cancel modal\n     */\n    cancelModalLabels: {\n      heading: $filter('i18n')('cancel-modal.heading'),\n      bodyText: $filter('i18n')('cancel-modal.bodyText'),\n      confirm: $filter('i18n')('cancel-modal.confirm'),\n      cancel: $filter('i18n')('cancel-modal.cancel'),\n    },\n\n    /**\n     * @name Helpers#datepickerOptions\n     * @type {function}\n     * @description Set the datepicker options from the controller, and add any extra ones\n     * @param {object} defaultOptions\n     * @param {object} extraOptions\n     * @return {object}\n     */\n    datepickerOptions: (defaultOptions, extraOptions = {}) =>\n      Object.assign(defaultOptions, extraOptions),\n\n    /**\n     * @name Helpers#disableEndDateInput\n     * @type {function}\n     * @description Disable the end date form field if the paymentDate isn't set or the way to\n     *   determine when to stop payments isn't by end date\n     * @param {object} newPayment\n     * @param {date} newPayment.paymentDate\n     * @param {string} newPayment.frequencyEnd\n     * @return {boolean}\n     */\n    disableEndDateInput: ({ paymentDate, frequencyEnd }) =>\n      !paymentDate || dateService.isBadFirstPaymentDate(paymentDate) || frequencyEnd !== 'date',\n\n    /**\n     * @name Helpers#disableNumInstancesInput\n     * @type {function}\n     * @description Disable the number of instances input if the way to determine when to stop\n     *   payments isn't by end number\n     * @param {object} newPayment\n     * @param {string} newPayment.frequencyEnd\n     * @return {boolean}\n     */\n    disableNumInstancesInput: ({ frequencyEnd }) => frequencyEnd !== 'number',\n\n    /**\n     * @name Helpers#calculateNumberOfInstances\n     * @type {function}\n     * @description return the number of instances (payments) that will be made\n     *   between two dates with a frequency set, until BUT NOT after the date\n     *   Calls the date service function of the same name.\n     * @param {object} newPayment\n     * @param {date} newPayment.paymentDate the first payment date\n     * @param {date} newPayment.finalPaymentDate the date which payments are made up to but not\n     *   after\n     * @param {string} newPayment.frequency the name of the frequency of payments to be made\n     * @return {number}\n     */\n    calculateNumberOfInstances: dateService.calculateNumberOfInstances,\n\n    /**\n     * @name Helpers#onPaymentDateChange\n     * @type {function}\n     * @description On change of payment date, clear any backend error and reset the final payment\n     *   date\n     * @param {object} newPayment\n     */\n    onPaymentDateChange: (newPayment) => {\n      clearBackendError('billpay_payment_date');\n      resetFinalPaymentDate(newPayment);\n    },\n\n    /**\n     * @name Helpers#onPayeeChange\n     * @type {function}\n     * @description On change of payee, clear any backend error and recalculate the first payment\n     *   date\n     * @param {object} $ctrl - Control state\n     * @param {object} $ctrl.newPayment - newPayment object\n     * @param {function} $ctrl.updatePaymentDateForNewPayee\n     */\n    onPayeeChange: ({ newPayment, updatePaymentDateForNewPayee }) => {\n      const currentState = stateContainer.getState();\n      if (newPayment.payee !== currentState.tmpPayee) {\n        clearBackendError('billpay_payment_payee');\n        updatePaymentDateForNewPayee(newPayment);\n      }\n    },\n\n    /**\n     * @name Helpers#onAmountChange\n     * @type {function}\n     * @description Clear backend field and page error.\n     *   Special case for the amount field as the change event fires on when it loads\n     * @param {object} $ctrl - Control state\n     */\n    onAmountChange: ($ctrl) => {\n      const currentState = stateContainer.getState();\n      if ($ctrl.newPayment.paymentAmount.value !== currentState.tmpPaymentAmount) {\n        clearBackendError('billpay_payment_amount');\n      }\n    },\n\n    /**\n     * @name Helpers#getLoadingErrorMessageKey\n     * @type {function}\n     * @description get any error message\n     * @return {string} message from error\n     */\n    getLoadingErrorMessageKey: () => {\n      const { error } = stateContainer.getState();\n      return error && !error.fromFormSubmission ? error.message : '';\n    },\n\n    /**\n     * @name Helpers#hasError\n     * @type {function}\n     * @description Check if the field has form or backend error\n     * @param {string} inputName - field name\n     * @param {object} [form] - angular form\n     * @return {boolean}\n     */\n    hasError: (inputName, form) => {\n      const { errorMap } = stateContainer.getState();\n      return errorHelperUtilities.hasError(inputName, errorMap, form, $filter, false);\n    },\n\n    /**\n     * @name Helpers#hasErrorClass\n     * @type {function}\n     * @description return class to indicate if field has error\n     * @param {string} inputName - field name\n     * @param {object} [form] - angular form\n     * @return {object}\n     */\n    hasErrorClass: (inputName, form) => {\n      const { errorMap } = stateContainer.getState();\n      return errorHelperUtilities.hasErrorClass(inputName, errorMap, form, $filter, false);\n    },\n\n    /**\n     * @name Helpers#getError\n     * @type {function}\n     * @description get form or backend error\n     * @param {string} inputName - field name\n     * @param {object} [form] - angular form\n     * @return {string}\n     */\n    getError: (inputName, form) => {\n      const { errorMap } = stateContainer.getState();\n      return errorHelperUtilities.getError(inputName, errorMap, form, $filter, false);\n    },\n\n    /**\n     * @name Helpers#onPaymentAccountChange\n     * @type {function}\n     * @description On change of payment account, clear any backend error\n     * @param {object} $ctrl - Control state\n     * @param {object} $ctrl.newPayment - newPayment object\n     */\n    onPaymentAccountChange: ({ newPayment }) => {\n      const currentState = stateContainer.getState();\n      if (newPayment.account !== currentState.tmpAccount) {\n        clearBackendError('billpay_payment_account');\n      }\n    },\n\n    /**\n     * @name Helpers#generalErrorMessages\n     * @type {object}\n     * @description keys for general error messages for payments, not related to specific fields\n     */\n    generalErrorMessages: [\n      'billpay_page_error',\n      'billpay_payment_already_exists',\n      'billpay_payment_missing_information',\n      'billpay_payment_invalid_ebill',\n      'billpay_payment_daily_limit_exceeded',\n      'billpay_payment_final_date',\n      'billpay_payment_quantity',\n    ],\n\n    /**\n     * @name Helpers#unrecoverableErrorMessages\n     * @type {object}\n     * @description keys for unrecoverable error messages for payments, not related to specific\n     *   fields\n     */\n    unrecoverableErrorMessages: [\n      'billpay_payment_risk_failed',\n      'billpay_payment_fraud_failed',\n      'billpay_payment_change_failed',\n    ],\n\n    /**\n     * @name Helpers#unrecoverablePageErrorExists\n     * @type {function}\n     * @description return true if there is a page error and it has unrecoverable\n     *   set to true\n     * @return {boolean}\n     */\n    unrecoverablePageErrorExists: () => {\n      const { errorMap = {} } = stateContainer.getState();\n      return !!(errorMap.billpay_page_error && errorMap.billpay_page_error.unrecoverable);\n    },\n\n    /**\n     * @name Helpers#unrecoverableErrorsExist\n     * @type {function}\n     * @description return true if there are unrecoverable errors in the error map\n     * @return {boolean}\n     */\n    unrecoverableErrorsExist,\n\n    /**\n     * @name Helpers#errorsExist\n     * @type {function}\n     * @description return true if there are any errors in the error map\n     * @return {boolean}\n     */\n    errorsExist: () => {\n      const { errorMap = {} } = stateContainer.getState();\n      return !!Object.keys(errorMap).length;\n    },\n\n    /**\n     * @name Helpers#currencyInputLabels\n     * @type {object}\n     * @description Internationalised strings for the currency input control\n     */\n    currencyInputLabels: {\n      'label.currency': $filter('i18n')('currency.aria-label.input.currency'),\n      'label.amount': $filter('i18n')('currency.aria-label.input.amount'),\n      'label.decimals': $filter('i18n')('currency.aria-label.input.decimals'),\n    },\n  };\n}\n\n/**\n * Cancel Handler type definition\n * @typedef {object} CancelHandler\n * @property {function} onCancel - Trigger an action for the user to confirm their decision\n * @property {function} onConfirmCancel - Process the confirmed cancel\n */\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-billpay-pay-recurring-bill-ng/scripts/helpers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_32__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-indicator-ng\"\n// module id = 32\n// module chunks = 3"],"sourceRoot":""}