{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f2bcf63b501845cde614","webpack:///./ext-bb-saving-goals-ng/model.xml","webpack:///./ext-bb-saving-goals-ng/scripts/index.js","webpack:///./ext-bb-saving-goals-ng/scripts/intents.js","webpack:///./ext-bb-saving-goals-ng/scripts/helpers.js","webpack:///./ext-bb-saving-goals-ng/scripts/constants.js","webpack:///./ext-bb-saving-goals-ng/scripts/events.js","webpack:///external \"ui-bb-i18n-ng\"","webpack:///external \"vendor-bb-angular-ng-aria\"","webpack:///external \"ui-bb-substitute-error-ng\"","webpack:///external \"ui-bb-loading-indicator-ng\"","webpack:///external \"ui-bb-format-amount-ng\"","webpack:///external \"ui-bb-currency-input-ng\"","webpack:///external \"vendor-bb-uib-progressbar\"","webpack:///external \"ui-bb-modal-ng\"","webpack:///external \"ui-bb-notification-stripe-ng\""],"names":["default","dependencyKeys","i18nModuleKey","ngAriaModuleKey","uiSubstituteErrorKey","uiBbLoadingIndicatorKey","uiBbFormatAmountKey","uiBbCurrencyInputKey","uibProgressbarKey","uiBbModalKey","uiBbNotificationStripeKey","isDefined","value","undefined","hasCurrencyCode","item","currencyCode","shouldHaveCurrencyCode","schema","preferenceName","properties","widget","stateContainer","router","getRule","isSavingGoalsFormActive","getRoute","isCancelConfirmationActive","isDeleteConfirmationActive","isFormDirty","deleteMethod","selectedGoal","preferences","notificationDismissTime","getLongPreference","Preferences","NOTIFICATION_DISMISS_TIME","key","defaultValue","savingGoalProductKinds","getStringPreference","PRODUCT_KINDS_WITH_SAVING_GOALS","getNotifications","createSelector","state","notifications","updateNotifications","createAction","current","savingGoalsSchema","pushNotification","notification","push","handleExtensionError","err","message","level","createModelHandlers","id","formObj","goalName","length","Error","ErrorCodes","NAME_EMPTY","goalAmount","product","getState","targetAmount","Object","assign","amount","currency","parseFloat","INSUFFICIENT_AMOUNT","isStateValid","handlers","_","initEditingForm","cancelConfirmation","isFormActive","handleChanging","changeMethod","handleSaving","saveMethod","formToModelFields","startDelete","method","handleDelete","form","modelHandlers","keys","reduce","acc","prop","transformedValue","isConfirmationActive","shiftNotification","shift","cancelEdit","force","allowSave","originalAmount","originalName","getSymbol","code","symbol","savingGoalsEnabledForKind","kind","split","indexOf"],"mappings":"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","file":"ext-bb-saving-goals-ng/scripts/ext-bb-saving-goals-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ui-bb-i18n-ng\"), require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-substitute-error-ng\"), require(\"ui-bb-loading-indicator-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"vendor-bb-uib-progressbar\"), require(\"ui-bb-modal-ng\"), require(\"ui-bb-notification-stripe-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-bb-saving-goals-ng\", [\"ui-bb-i18n-ng\", \"vendor-bb-angular-ng-aria\", \"ui-bb-substitute-error-ng\", \"ui-bb-loading-indicator-ng\", \"ui-bb-format-amount-ng\", \"ui-bb-currency-input-ng\", \"vendor-bb-uib-progressbar\", \"ui-bb-modal-ng\", \"ui-bb-notification-stripe-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-bb-saving-goals-ng\"] = factory(require(\"ui-bb-i18n-ng\"), require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-substitute-error-ng\"), require(\"ui-bb-loading-indicator-ng\"), require(\"ui-bb-format-amount-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"vendor-bb-uib-progressbar\"), require(\"ui-bb-modal-ng\"), require(\"ui-bb-notification-stripe-ng\"));\n\telse\n\t\troot[\"ext-bb-saving-goals-ng\"] = factory(root[\"ui-bb-i18n-ng\"], root[\"vendor-bb-angular-ng-aria\"], root[\"ui-bb-substitute-error-ng\"], root[\"ui-bb-loading-indicator-ng\"], root[\"ui-bb-format-amount-ng\"], root[\"ui-bb-currency-input-ng\"], root[\"vendor-bb-uib-progressbar\"], root[\"ui-bb-modal-ng\"], root[\"ui-bb-notification-stripe-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f2bcf63b501845cde614","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-bb-saving-goals-ng/model.xml\n// module id = 0\n// module chunks = 0","/**\n * @module ext-bb-saving-goals-ng\n * @extends module:widget-bb-saving-goals-ng.Extension\n */\n\nimport i18nModuleKey from 'ui-bb-i18n-ng';\nimport ngAriaModuleKey from 'vendor-bb-angular-ng-aria';\nimport uiSubstituteErrorKey from 'ui-bb-substitute-error-ng';\nimport uiBbLoadingIndicatorKey from 'ui-bb-loading-indicator-ng';\nimport uiBbFormatAmountKey from 'ui-bb-format-amount-ng';\nimport uiBbCurrencyInputKey from 'ui-bb-currency-input-ng';\nimport uibProgressbarKey from 'vendor-bb-uib-progressbar';\nimport uiBbModalKey from 'ui-bb-modal-ng';\nimport uiBbNotificationStripeKey from 'ui-bb-notification-stripe-ng';\n\nexport const dependencyKeys = [\n  i18nModuleKey,\n  ngAriaModuleKey,\n  uiSubstituteErrorKey,\n  uiBbLoadingIndicatorKey,\n  uiBbFormatAmountKey,\n  uiBbCurrencyInputKey,\n  uibProgressbarKey,\n  uiBbModalKey,\n  uiBbNotificationStripeKey,\n];\n\n/**\n * @name intents\n * @type {module:lib-bb-extension-intents-ng.ExtensionIntents}\n */\nexport { default as intents } from './intents';\n\n/**\n * @name helpers\n * @type {module:lib-bb-extension-helpers-ng.ExtensionHelpers}\n */\nexport { default as helpers } from './helpers';\n\n/**\n * @name events\n * @type {module:lib-bb-extension-events-ng.ExtensionEvents}\n */\nexport { default as events } from './events';\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-saving-goals-ng/scripts/index.js","export default () => ({});\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-saving-goals-ng/scripts/intents.js","/**\n * @name Helpers\n * @type {object}\n *\n * @description\n * Helpers for the extension\n */\n\nimport { Preferences, ErrorCodes } from './constants';\n\n/**\n * @name isDefined\n *\n * @type {function}\n * @inner\n * @description A helper to check if item is NOT undefined and is NOT a null\n *\n * @param {any} value - an item to be assessed\n * @returns {boolean} true in case an item is not undefined and is not null\n */\nconst isDefined = value => value !== undefined && value !== null;\n\n/**\n * @name hasCurrencyCode\n *\n * @type {function}\n * @description A helper to check if item has currency code property\n * @inner\n * @param {object} value - an item to be assessed\n * @returns {boolean} true in case an item has currency code property\n */\nconst hasCurrencyCode = (item = {}) => isDefined(item.currencyCode);\n\n/**\n * @name shouldHaveCurrencyCode\n *\n * @type {function}\n * @description A helper to check if according to schema property should\n * have a currency code defined\n * @inner\n * @param {object} schema - a schema item to be used\n * @param {any} preferenceName - a preference name to be verified\n * @returns {boolean} true in case an item should have currency code property\n */\nconst shouldHaveCurrencyCode = (schema = {}, preferenceName = '') =>\n  isDefined(schema[preferenceName])\n  && isDefined(schema[preferenceName].properties)\n  && isDefined(schema[preferenceName].properties.currencyCode);\n\nexport default ({ widget, stateContainer, router, getRule }) => {\n  let isSavingGoalsFormActive = router.getRoute() === 'form';\n  let isCancelConfirmationActive = false;\n  let isDeleteConfirmationActive = false;\n  let isFormDirty = false;\n  let deleteMethod = null;\n  let selectedGoal = {};\n\n  /**\n   * @name preferences\n   *\n   * @inner\n   * @type {object}\n   * @description Set of preferences relevant for extensions (including default values)\n   */\n  const preferences = (() => {\n    let notificationDismissTime = widget.getLongPreference(\n      Preferences.NOTIFICATION_DISMISS_TIME.key\n    );\n    notificationDismissTime = !isDefined(notificationDismissTime)\n      ? Preferences.NOTIFICATION_DISMISS_TIME.defaultValue\n      : notificationDismissTime;\n\n    let savingGoalProductKinds = widget.getStringPreference(\n      Preferences.PRODUCT_KINDS_WITH_SAVING_GOALS.key\n    );\n    savingGoalProductKinds = !isDefined(savingGoalProductKinds)\n      ? Preferences.PRODUCT_KINDS_WITH_SAVING_GOALS.defaultValue\n      : savingGoalProductKinds;\n\n    return {\n      notificationDismissTime,\n      savingGoalProductKinds,\n    };\n  })();\n\n  /**\n   * @name getNotifications\n   *\n   * @type {function}\n   * @description Selector for notifications from the widget state\n   */\n  const getNotifications = stateContainer.createSelector(\n    state => state.notifications || []\n  );\n\n  /**\n   * @name updateNotifications\n   *\n   * @type {function}\n   * @description Function to set notifications in the state\n   * @param {object} notifications notifications object\n   */\n  const updateNotifications = stateContainer.createAction((current, notifications) => ({\n    ...current,\n    notifications,\n  }));\n\n  /**\n   * @name savingGoalsSchema\n   *\n   * @type {function}\n   * @description State selector for saving goals schema\n   */\n  const savingGoalsSchema = stateContainer.createSelector(\n    state => state.schema\n  );\n\n  /**\n   * @name pushNotification\n   * @type {function}\n   * @description Helper to push new notification into the list\n   * @inner\n   * @param {object} notification notification to be displayed\n   */\n  const pushNotification = (notification) => {\n    if (!isDefined(notification)) {\n      return;\n    }\n    const notifications = getNotifications();\n    notifications.push(notification);\n    updateNotifications(notifications);\n  };\n\n  /**\n   * @name handleExtensionError\n   *\n   * @type {function}\n   * @description Internal for extension UI errors handler\n   * @param {Error} err error code to be transformed to the message\n   */\n  const handleExtensionError = (err) => {\n    pushNotification({ message: err.message, level: 'danger' });\n    throw err;\n  };\n\n  /**\n   * @name createModelHandlers\n   *\n   * @type {function}\n   * @description Method to create a set of handlers for saving function\n   * This method can be used to add extra fields\n   * @param {object} schema savingGoalsSchema to be used for validation if necessary\n   * @returns {object} set of handlers for form fields\n   * to be transformed and passed to the model\n   */\n  const createModelHandlers = (schema = {}) => ({\n    /**\n     * @name id\n     *\n     * @type {function}\n     * @description Handler for id property of the model\n     * @param {object} formObj form state object\n     * @return {string} id if it's defined\n     */\n    id: formObj => formObj.id,\n\n    /**\n     * @name goalName\n     *\n     * @type {function}\n     * @description Handler for goalName property of the model\n     * @param {object} formObj form state object\n     * @return {string} goal name\n     */\n    goalName: formObj => {\n      if (!formObj.goalName || formObj.goalName.length === 0) {\n        throw new Error(ErrorCodes.NAME_EMPTY);\n      }\n\n      return formObj.goalName;\n    },\n\n    /**\n     * @name goalAmount\n     *\n     * @type {function}\n     * @description Handler for goal amount\n     * @throws {Error} if goal amount is not an integer greater then 0\n     * @param {object} formObj form state object\n     * @returns {object} goalAmount object with an amount and currency\n     * if currecy is not defined default one is used.\n     */\n    goalAmount: formObj => {\n      const product = stateContainer.getState().product;\n      const targetAmount = formObj.goalAmount || {};\n      // map form properties into properties expected by currency input\n      Object.assign(targetAmount, {\n        value: targetAmount.amount || targetAmount.value,\n        currency: targetAmount.currencyCode || targetAmount.currency,\n      });\n\n      if (shouldHaveCurrencyCode(schema, 'goalAmount') && !hasCurrencyCode(targetAmount)) {\n        Object.assign(targetAmount, { currencyCode: product.currency });\n      }\n\n      // get amount from currency input component object\n      const amount = parseFloat(targetAmount.value, 10);\n      if (!amount || amount <= 0) {\n        throw new Error(ErrorCodes.INSUFFICIENT_AMOUNT);\n      }\n\n      Object.assign(targetAmount, { amount });\n      return {\n        currencyCode: targetAmount.currencyCode,\n        amount,\n      };\n    },\n  });\n\n  /**\n   * @name isStateValid\n   *\n   * @type {function}\n   * @inner\n   * @description Checks validity of the state object\n   * @param {object} formObj form state object\n   * @returns {boolean}\n   */\n  const isStateValid = formObj => {\n    try {\n      const handlers = createModelHandlers(savingGoalsSchema());\n      handlers.goalAmount(formObj);\n      handlers.goalName(formObj);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  return {\n    /**\n     * @name initEditingForm\n     *\n     * @type {function}\n     * @description Sets initial step on form init\n     */\n    initEditingForm: () => {\n      isFormDirty = false;\n    },\n\n    /**\n     * @name cancelConfirmation\n     *\n     * @type {function}\n     * @description Cancels confirmation dialog\n     */\n    cancelConfirmation: () => {\n      isCancelConfirmationActive = false;\n      isDeleteConfirmationActive = false;\n    },\n\n    /**\n     * @name isFormActive\n     *\n     * @type {function}\n     * @description A getter of the modal window state\n     * @returns {boolean} true if form is active\n     */\n    get isFormActive() {\n      return isSavingGoalsFormActive;\n    },\n\n    /**\n     * @name isFormActive\n     *\n     * @type {function}\n     * @description A setter for isFormActive, which is using router\n     * to close the form\n     * @param {boolean} value - new value of the state,\n     * being used to define if we shall navigate to list\n     */\n    set isFormActive(value) {\n      isSavingGoalsFormActive = !!value;\n    },\n\n    /**\n     * @name handleChanging\n     *\n     * @type {function}\n     * @description Function to initiate create/edit action\n     * @param {function} changeMethod function to be called\n     * @param {any} item to be passed to the saving function\n     * @returns {any} changing method result\n     */\n    handleChanging: function handleChanging(changeMethod, item) {\n      isSavingGoalsFormActive = true;\n      return changeMethod(item);\n    },\n\n    /**\n     * @name handleSaving\n     *\n     * @type {function}\n     * @description Handler for saving an item\n     * @param {function} saveMethod save method to be called\n     * @param {object} formObj an item to be transformed and saved\n     * @returns {any} saving method result\n     */\n    handleSaving: function handleSaving(saveMethod, formObj) {\n      isSavingGoalsFormActive = false;\n      return saveMethod(this.formToModelFields(formObj));\n    },\n\n    /**\n     * @name startDelete\n     *\n     * @type {function}\n     * @description Function that prepares everything for saving goal deletion\n     * and triggers confirmation dialog\n     * @param {function} method function to be called if delete is confirmed\n     * @param {any} item to be passed to the delete function\n     */\n    startDelete: function startDelete(method, item) {\n      isDeleteConfirmationActive = true;\n      selectedGoal = item;\n      deleteMethod = method;\n    },\n\n    /**\n     * @name handleDelete\n     *\n     * @type {function}\n     * @description Function to initiate delete action\n     * @returns {any} delete method result\n     */\n    handleDelete: function handleDelete() {\n      isDeleteConfirmationActive = false;\n      return deleteMethod(selectedGoal);\n    },\n\n    /**\n     * @name formToModelFields\n     *\n     * @type {function}\n     * @description A function to process form object before it gets passed to the model.\n     * @param {object} form - item to be transformed\n     * @returns {object} modelItem\n     */\n    formToModelFields: (form = {}) => {\n      const modelHandlers = createModelHandlers(savingGoalsSchema());\n      try {\n        return Object.keys(modelHandlers)\n          .reduce((acc, prop) => {\n            const transformedValue = modelHandlers[prop](form);\n            return isDefined(transformedValue)\n              ? Object.assign(acc, { [prop]: transformedValue })\n              : acc;\n          }, {});\n      } catch (err) {\n        handleExtensionError(err);\n        return null;\n      }\n    },\n\n    /**\n     * @name isConfirmationActive\n     *\n     * @type {function}\n     * @description A getter of the confirmation modal window state\n     * @returns {boolean} true if confirmation modal is active\n     */\n    get isConfirmationActive() {\n      return isCancelConfirmationActive;\n    },\n\n    /**\n     * @name isConfirmationActive\n     *\n     * @type {function}\n     * @description A setter for the confirmation modal window state\n     * @param {boolean} value new value of the state,\n     * which will change confirmation modal apperance\n     */\n    set isConfirmationActive(value) {\n      isCancelConfirmationActive = !!value;\n    },\n\n    /**\n     * @name selectedGoal\n     *\n     * @type {function}\n     * @description A getter of the saving goal item selected to be deleted\n     * @returns {object}\n     */\n    get selectedGoal() {\n      return selectedGoal;\n    },\n\n    /**\n     * @name isDeleteConfirmationActive\n     *\n     * @type {function}\n     * @description A getter of the delete confirmation modal window state\n     * @returns {boolean} true if delete confirmation modal is active\n     */\n    get isDeleteConfirmationActive() {\n      return isDeleteConfirmationActive;\n    },\n\n    /**\n     * @name isDeleteConfirmationActive\n     *\n     * @type {function}\n     * @description A setter for the delete confirmation modal window state\n     * @param {boolean} value new value of the state,\n     * which will change delete confirmation modal apperance\n     */\n    set isDeleteConfirmationActive(value) {\n      isDeleteConfirmationActive = !!value;\n    },\n\n    /**\n     * @name isFormDirty\n     *\n     * @type {function}\n     * @description A getter of the state of the form\n     * @returns {boolean} true if form is changed\n     */\n    get isFormDirty() {\n      return isFormDirty;\n    },\n\n    /**\n     * @name isFormDirty\n     *\n     * @type {function}\n     * @description A setter for form state\n     * @param {boolean} value new value of the state,\n     * being used to define if the form data has been changed\n     */\n    set isFormDirty(value) {\n      isFormDirty = !!value;\n    },\n\n    /**\n     * @name notificationDismissTime\n     *\n     * @type {function}\n     * @description Returns notifications dismissing time preference value\n     * @returns {number} time to dismiss notification\n     */\n    get notificationDismissTime() {\n      return preferences.notificationDismissTime;\n    },\n\n    /**\n     * @name shiftNotification\n     *\n     * @type {function}\n     * @description Helper to remove notification from the list\n     * @param {object} notification\n     * @param {array} notificationsList\n     */\n    shiftNotification: () => {\n      const notifications = getNotifications();\n      notifications.shift();\n      updateNotifications(notifications);\n    },\n\n    /**\n     * @name cancelEdit\n     *\n     * @type {function}\n     * @description Cancels editing form\n     * @param {?Boolean} force If set to true, check if there were some changes will be skipped.\n     * Default false, which means that, in case there were some changes, another dialog with\n     * cancel confirmation will appear\n     */\n    cancelEdit: (force = false) => {\n      // check if additional confirmation is needed\n      if (!force && isFormDirty) {\n        isCancelConfirmationActive = true;\n        return;\n      }\n\n      isCancelConfirmationActive = false;\n      isSavingGoalsFormActive = false;\n    },\n\n    /**\n     * @name allowSave\n     *\n     * @type {function}\n     * @description Checks if the form is ready (valid) for save\n     * @param {object} formObj form state object\n     * @returns {boolean}\n     */\n    allowSave: formObj => {\n      if (!formObj) {\n        return false;\n      }\n      // check if we are creating or updating\n      if (formObj.id) {\n        // preserve original state\n        const originalAmount = parseFloat(formObj.goalAmount.value, 10);\n        const originalName = formObj.goalName;\n        if (!formObj.originalAmount) {\n          Object.assign(formObj, { originalAmount, originalName });\n        }\n\n        isFormDirty = originalAmount !== formObj.originalAmount\n          || originalName !== formObj.originalName;\n      } else {\n        isFormDirty = !!((formObj.goalAmount && formObj.goalAmount.value) || formObj.goalName);\n      }\n\n      return isFormDirty && isStateValid(formObj);\n    },\n\n    /**\n     * @name getSymbol\n     *\n     * @type {function}\n     * @description Converts currency code into currency symbol\n     * @param {string} code\n     * @returns {string}\n     */\n    getSymbol: (code) => (getRule(code) || {}).symbol || code,\n\n    /**\n     * @name savingGoalsEnabledForKind\n     *\n     * @type {function}\n     * @description Checks if saving goals are enabled for a specific product kind\n     * @param {string} kind\n     * @returns {boolean}\n     */\n    savingGoalsEnabledForKind: (kind) =>\n      preferences.savingGoalProductKinds.split(',').indexOf(kind) >= 0,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-saving-goals-ng/scripts/helpers.js","/**\n * @name Preferences\n *\n * @type {object}\n * @description\n * Set of extension specific properties constants which contains\n * pairs of key and default values where key is the property\n * name and the defaultValue is it's value by default\n */\nexport const Preferences = {\n  /**\n   * @name NOTIFICATION_DISMISS_TIME\n   *\n   * @type {object}\n   * @description notifications timeout in seconds\n   */\n  NOTIFICATION_DISMISS_TIME: {\n    key: 'dismissNotificationsTime',\n    defaultValue: 3,\n  },\n\n  /**\n   * @name PRODUCT_KINDS_WITH_SAVING_GOALS\n   *\n   * @type {object}\n   * @deprecated\n   * @description Which product kinds are allowed to have saving goals\n   */\n  PRODUCT_KINDS_WITH_SAVING_GOALS: {\n    key: 'productKinds',\n    defaultValue: 'savingsAccounts',\n  },\n};\n\n/**\n * @name ErrorCodes\n *\n * @type {object}\n * @description A set of constants which defines ui error codes\n * of the extension\n */\nexport const ErrorCodes = {\n  NAME_EMPTY: 'saving.goals.errors.name.empty',\n  INSUFFICIENT_AMOUNT: 'saving.goals.errors.amount.insufficient',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-saving-goals-ng/scripts/constants.js","/**\n * @name Events\n * @type {object}\n *\n * @description\n * Event subscribtions object for the extension\n */\nexport default () => ({});\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-saving-goals-ng/scripts/events.js","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-aria\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-substitute-error-ng\"\n// module id = 8\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-indicator-ng\"\n// module id = 9\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-format-amount-ng\"\n// module id = 10\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-currency-input-ng\"\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-uib-progressbar\"\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-modal-ng\"\n// module id = 13\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-notification-stripe-ng\"\n// module id = 14\n// module chunks = 0"],"sourceRoot":""}