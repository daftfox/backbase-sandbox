{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***************","webpack:///webpack/bootstrap ae100f90e7d971b83ff6?df48***************","webpack:///./lib-bb-start-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*******","webpack:///external \"lib-bb-event-bus\"?3acf","webpack:///external \"lib-bb-widget-ng\"?84ad***","webpack:///external \"lib-bb-event-bus-ng\"?8215***","webpack:///external \"lib-bb-widget-extension-ng\"?b547**","webpack:///external \"lib-bb-state-container-ng\"?8d56**","webpack:///./lib-bb-start-ng/scripts/index.js","webpack:///external \"lib-bb-widget\"","webpack:///external \"lib-bb-i18n-ng\"","webpack:///external \"config-bb-locale\"","webpack:///external \"lib-bb-extension-helpers-ng\"","webpack:///external \"lib-bb-extension-events-ng\""],"names":["start","widgetKeyProvider","eventBusKeyProvider","translateProvider","stateContainerProvider","createAppModule","widgetName","widgetInstance","dependencyKeys","configs","messages","locale","storedState","moduleKey","id","module","config","translate","console","warn","setMessages","widgetProvider","eventBusProvider","setWidget","container","setInitialState","$injector","forEach","c","providers","annotate","every","has","invoke","name","extractWidgetName","instanceName","separatorIndex","lastIndexOf","replace","slice","getLocale","getMessageBundleModule","widget","require","widgetInstanceName","model","extendedItemName","Promise","widgetModuleName","getStringPreference","extensionModuleName","requiredModules","widgetModule","encodeURI","configProvidersModule","extensionModule","messageBundleModule","localeModule","Object","keys","filter","key","reduce","ks","vs","concat","dependencyNames","jsModuleNames","args","modules","acc","index","storedStatePromise","widgetModulePromise","default","eventBus","all","then","widgetModuleKey","push","appModuleKey","initWidgetFn","bootstrap","body","strictDi","INIT_WIDGET_ON_EVENT_PREFERENCE","eventInitWidgetOn","unsubscribe","subscribe"],"mappings":"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","file":"lib-bb-start-ng/scripts/lib-bb-start-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-widget\"), require(\"lib-bb-i18n-ng\"), require(\"config-bb-locale\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-start-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-state-container-ng\", \"lib-bb-widget\", \"lib-bb-i18n-ng\", \"config-bb-locale\", \"lib-bb-extension-helpers-ng\", \"lib-bb-extension-events-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-start-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-widget\"), require(\"lib-bb-i18n-ng\"), require(\"config-bb-locale\"), require(\"lib-bb-extension-helpers-ng\"), require(\"lib-bb-extension-events-ng\"));\n\telse\n\t\troot[\"lib-bb-start-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-widget\"], root[\"lib-bb-i18n-ng\"], root[\"config-bb-locale\"], root[\"lib-bb-extension-helpers-ng\"], root[\"lib-bb-extension-events-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_62__, __WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_65__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae100f90e7d971b83ff6","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-start-ng/model.xml\n// module id = 0\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 5 6 7 8 9 10 12 16 19 22 24 26 27","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus\"\n// module id = 15\n// module chunks = 5 16 17","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 17\n// module chunks = 6 7 8 10 16 19 26","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 18\n// module chunks = 6 7 10 12 16","module.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 20\n// module chunks = 6 7 8 16","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 23\n// module chunks = 6 7 8 16","/**\n * @module lib-bb-start-ng\n *\n * @description Start module for angular apps. Initialises the widget instance, extensions,\n * locales, and translation messages.\n *\n * Usually this module shouldn't be called directly. It will be called by\n * {@link module:lib-bb-start.lib-bb-start}.\n *\n * Bootstrapping involves the following features:\n *  - Initialises {@link module:lib-bb-widget.BBWidget} instance from CXP\n *  {@link module:lib-bb-start.WidgetInstance}\n *  - Loads the locale settings from {@link module:config-bb-locale.config-bb-locale}\n *  - Loads messages file (set from config-bb-locale's\n *  {@link module:config-bb-locale.messageBundleModule} function\n *  - Provides messages to lib-bb-i18n-ng\n *  {@link module:lib-bb-i18n-ng.bbTranslateProvider#setMessages}\n *  - Restores the widget state into\n *  {@link module:lib-bb-state-container-ng.bbStateContainerProvider#setInitialState}\n *  - Provides context to widget extensions (helpers, events, intents) with:\n *    - {@link module:lib-bb-extension-events-ng.lib-bb-extension-events-ng}\n *    - {@link module:lib-bb-extension-helpers-ng.lib-bb-extension-helpers-ng}\n *    - {@link module:lib-bb-extension-intents-ng.lib-bb-extension-intents-ng}\n *  - Makes the extension hooks available to the widget instance via\n *  {@link module:lib-bb-widget-extension-ng.lib-bb-widget-extension-ng}\n *  - Loads the widget's JS with the modules looader (configured by\n *  {@link module:config-bb-module-loader.config-bb-module-loader})\n *  - In case widget contains property 'initWidgetOnEvent',\n *  - starts to listen to event from this property\n *  - and when event is fired, bootstraps the angular application\n *  - Otherwise bootstraps the angular application immediately\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport pubSub from 'lib-bb-event-bus';\nimport bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\n\nimport bbWidgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbWidget from 'lib-bb-widget';\n\nimport bbI18nNgModuleKey, { bbTranslateKey } from 'lib-bb-i18n-ng';\nimport bbStateContainerModuleKey, {\n  bbStateContainerKey,\n  getInitialState,\n} from 'lib-bb-state-container-ng';\n\nimport {\n  currentLocale as oldConfigLocale,\n  locale as configLocale,\n  localeModuleName as getLocaleModuleName,\n  messageBundleModuleName as oldConfigMessageBundleModule,\n  messageBundleModule as configMessageBundleModule,\n} from 'config-bb-locale';\n\nimport { bbWidgetExtensionModuleKey, createExtensionModule } from 'lib-bb-widget-extension-ng';\nimport bbExtensionHelpersModuleKey from 'lib-bb-extension-helpers-ng';\nimport bbExtensionEventsModuleKey from 'lib-bb-extension-events-ng';\n\n// Calculate \"Provider\" keys\nconst widgetKeyProvider = `${widgetKey}Provider`;\nconst eventBusKeyProvider = `${eventBusKey}Provider`;\nconst translateProvider = `${bbTranslateKey}Provider`;\nconst stateContainerProvider = `${bbStateContainerKey}Provider`;\n\n/**\n * Create an Angular Module to combine the Widget, Extension and \"common\" modules\n *\n * Angular modules don't provide proper namespacing. We use this to merge the injectables\n * of the widget, the extension, and any other angular modules. This module also allows\n * configuration of common services that are used by widgets (eg. anything that requires the\n * CXP \"__WIDGET__\" object).\n *\n * @inner\n * @param {string} widgetName The name of the widget\n * @param {WidgetInstance} widgetInstance An instance of the CXP Widget object (__WIDGET__)\n * @param {string[]} dependencyKeys Angular Module Keys this app depends on\n * @param {Array.<NgInjectedFunction>} configs Functions to configure angular providers\n * @param {object.<object.<string>>} messages A map of locale code and translation keys to messages\n * @returns {!string} The Angular Module Key for the App Module\n */\nfunction createAppModule(\n  widgetName,\n  widgetInstance,\n  dependencyKeys,\n  configs,\n  messages,\n  locale,\n  storedState\n) {\n  // Generate an NG Module key including the widget ID to avoid namespace collisions on a page\n  const moduleKey = `${widgetName}:${widgetInstance.id}`;\n\n  return angular\n    .module(moduleKey, [\n      bbWidgetModuleKey,\n      bbEventBusModuleKey,\n      bbI18nNgModuleKey,\n      bbStateContainerModuleKey,\n      ...dependencyKeys,\n    ])\n\n    // configure the translation service with the current language/locale\n    .config([translateProvider, (translate) => {\n      if (!messages) return;\n      if (!messages[locale]) {\n        // eslint-disable-next-line no-console\n        console.warn(`No translations found for locale: \"${locale}\"`);\n        if (messages['en-US']) {\n          // eslint-disable-next-line no-console\n          console.warn('DEPRECATED - Falling back to \"en-US\" translations.\\n'\n            + 'This fallback is deprecated and you should ensure you have translations '\n            + 'for the configured locale.');\n          translate.setMessages(messages['en-US']);\n        }\n        return;\n      }\n      translate.setMessages(messages[locale]);\n    }])\n\n    // Configure the `widget` with the current `widgetInstance`\n    .config([widgetKeyProvider, (widgetProvider) => {\n      widgetProvider.config(widgetInstance);\n    }])\n\n    // Configure the `eventBus` with the current `widgetInstance`\n    .config([eventBusKeyProvider, (eventBusProvider) => {\n      eventBusProvider.setWidget(widgetInstance);\n    }])\n\n    .config([stateContainerProvider, container => {\n      container.setInitialState(storedState);\n    }])\n\n    // Add a function to configure the angular providers\n    .config(['$injector', ($injector) => {\n      configs.forEach((c) => {\n        // extract the dependencies from the injectable declaration\n        const providers = $injector.annotate(c);\n        // only config the module if the provider exists\n        if (providers.every($injector.has)) {\n          $injector.invoke(c);\n        }\n      });\n    }])\n\n    .name;\n}\n\n/**\n * Extract the widget enterprise catalog name from the instance name\n *\n * This is used because there does not appear to be a consistent way to get the\n * widget name (as specified in the source model.xml/enterprise catalog) from the\n * wiget instance object.\n *\n * Assumes the format \"<name>_<hash>\" or \"<name>-<numbers>\"\n *\n * @inner\n * @param {string} instanceName The name of the widget instance object\n * @returns {string} The name of the widget in the enterprise catalog\n */\nfunction extractWidgetName(instanceName) {\n  // eslint-disable-next-line no-console\n  console.warn(\n    'DEPRECATED',\n    'Determining the widgets JS module path based on the widget name is deprecated.'\n    + ' You should specify the module to bootstrap via a `path` property in your model.xml.'\n  );\n  const separatorIndex = instanceName.lastIndexOf('_');\n  if (separatorIndex === -1) {\n    return instanceName.replace(/-\\d+$/, '');\n  }\n  return instanceName.slice(0, separatorIndex);\n}\n\nfunction getLocale(widgetInstance) {\n  if (oldConfigLocale) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'DEPRECATED',\n      '`config-bb-locale.currentLocale` is deprecated in favor of `config-bb-locale.locale'\n    );\n    return oldConfigLocale(widgetInstance);\n  }\n  return configLocale(widgetInstance.locale);\n}\n\nfunction getMessageBundleModule(widgetInstance, widget) {\n  if (oldConfigMessageBundleModule) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'DEPRECATED',\n      '`config-bb-locale.messageBundleModuleName` is deprecated'\n      + ' in favor of `config-bb-locale.messageBundleModule'\n    );\n    return oldConfigMessageBundleModule(widgetInstance);\n  }\n  return configMessageBundleModule(widget);\n}\n\n/**\n * @name start\n * @type {function}\n * @description Start an Angular Based Widget\n *\n * @param {function} require Used to dynamically load modules\n * @param {WidgetInstance} widgetInstance An instance of the CXP Widget Object (__WIDGET__)\n * @returns {void}\n */\nexport default function start(require, widgetInstance) {\n  const widgetInstanceName = widgetInstance.name || widgetInstance.model.extendedItemName;\n  const widget = bbWidget(widgetInstance, Promise);\n\n  const widgetModuleName = widget.getStringPreference('path')\n    || extractWidgetName(widgetInstanceName);\n  const extensionModuleName = widget.getStringPreference('extension');\n  const locale = getLocale(widgetInstance);\n\n  // Collect the names of the JS modules that are needed to start the widget\n  // { dependencyName: jsModuleName }\n  const requiredModules = {\n    widgetModule: encodeURI(widgetModuleName),\n    configProvidersModule: 'config-bb-providers-ng', // TODO: configurable name\n    extensionModule: extensionModuleName,\n    messageBundleModule: getMessageBundleModule(widgetInstance, widget),\n    localeModule: getLocaleModuleName(locale),\n  };\n\n  // Partition the dependencies map into keys/values (this is the inverse of `_.zipObject`)\n  // eg. { 'a': 1, 'b', 2 } -> [['a', 'b'], [1, 2]]\n  // This is so we can pass the array of jsModuleNames into `require` and build the\n  // { dependencyName: jsModule } mapping once the modules are loaded\n  const [dependencyNames, jsModuleNames] = Object.keys(requiredModules)\n    .filter(key => !!requiredModules[key])\n    .reduce(([ks, vs], key) => [\n      ks.concat([key]),\n      vs.concat([requiredModules[key]]),\n    ], [[], []]);\n\n  require(jsModuleNames, (...args) => {\n    // Build a { dependencyName: jsModule } mapping from the loaded modules (in the args array)\n    const modules = args.reduce((acc, module, index) => {\n      acc[dependencyNames[index]] = module; // eslint-disable-line no-param-reassign\n      return acc;\n    }, {});\n\n    // Collect the NG Module keys\n    // `extensionModule` may not be loaded if not in the model\n    const dependencyKeys = (!!modules.extensionModule) ? [\n      bbWidgetExtensionModuleKey,\n      bbExtensionHelpersModuleKey,\n      bbExtensionEventsModuleKey,\n      createExtensionModule(extensionModuleName, modules.extensionModule),\n    ] : [];\n\n    const storedStatePromise = getInitialState(widget);\n\n    const widgetModulePromise = (typeof modules.widgetModule.default === 'function')\n      ? modules.widgetModule.default(widget)\n      : modules.widgetModule.default;\n\n    const eventBus = pubSub(widgetInstance);\n\n    Promise.all([widgetModulePromise, storedStatePromise])\n      .then(([widgetModuleKey, storedState]) => {\n        // add widget last to allow overriding injectables\n        dependencyKeys.push(widgetModuleKey);\n\n        const appModuleKey = createAppModule(\n          widgetInstanceName,\n          widgetInstance,\n          dependencyKeys,\n          modules.configProvidersModule.default,\n          modules.messageBundleModule,\n          locale,\n          storedState\n        );\n\n        const initWidgetFn = () => {\n          // Bootstrap Angular with the Angular App\n          angular.bootstrap(widgetInstance.body, [appModuleKey], { strictDi: true });\n        };\n\n        const INIT_WIDGET_ON_EVENT_PREFERENCE = 'initWidgetOnEvent';\n\n        const eventInitWidgetOn = widget.getStringPreference(INIT_WIDGET_ON_EVENT_PREFERENCE);\n\n        if (eventInitWidgetOn) {\n          const unsubscribe = eventBus.subscribe(eventInitWidgetOn, () => {\n            initWidgetFn();\n            unsubscribe();\n          });\n        } else {\n          initWidgetFn();\n        }\n      });\n  });\n}\n\n/**\n * An AngularJS compatible injectable. Annotated with one of the three available\n * methods described in https://docs.angularjs.org/api/auto/service/$injector.\n * NB. \"inline\" annotation is preferred.\n *\n * @private\n * @typedef NgInjectedFunction\n * @type {array}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-start-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_61__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget\"\n// module id = 61\n// module chunks = 16 17 27","module.exports = __WEBPACK_EXTERNAL_MODULE_62__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-i18n-ng\"\n// module id = 62\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"config-bb-locale\"\n// module id = 63\n// module chunks = 16 17","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-helpers-ng\"\n// module id = 64\n// module chunks = 16","module.exports = __WEBPACK_EXTERNAL_MODULE_65__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-events-ng\"\n// module id = 65\n// module chunks = 16"],"sourceRoot":""}