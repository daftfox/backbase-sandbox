{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap bf93fb8417438f83ccee","webpack:///./fe-dist/http-ng/data-bb-message-center-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-message-center-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-message-center-http-ng/scripts/data-bb-message-center-http.js"],"names":["messageCenterDataModuleKey","messageCenterDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getMessageCenterTopics","params","url","method","then","catch","err","postMessageCenterTopicsRecord","getMessageCenterUnreadConversationCount","getMessageCenterDrafts","postMessageCenterDraftsRecord","getMessageCenterConversations","deleteMessageCenterTopicsRecord","topicId","getMessageCenterTopicsSubscriptions","postMessageCenterTopicsSubscriptionsRecord","deleteMessageCenterTopicsSubscriptionsRecord","subscriptionId","putMessageCenterDraftsRecord","draftId","deleteMessageCenterDraftsRecord","postMessageCenterDraftsSendDraftRequestRecord","deleteMessageCenterConversationsRecord","conversationId","postMessageCenterConversationsArchiveConversationRequestRecord","getMessageCenterConversationsDrafts","postMessageCenterConversationsDraftsRecord","getMessageCenterConversationsMessages","putMessageCenterConversationsDraftsRecord","postMessageCenterConversationsMessagesReadMessageRequestRecord","messageId","schemas"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA,yC;;;;;;;;;;;;;ACaA;;;;AAEA;;;;;;AAfA;AACA;;;;;;;;;;;;AAgBA,KAAMA,6BAA6B,gCAAnC;AACA;;;;;AAKO,KAAMC,sDAAuB,kDAA7B;AACP;;;;;mBAKe,0BACZC,MADY,CACLF,0BADK,EACuB,EADvB;;AAGb;;;;;;;AAHa,EAUZG,QAVY,CAUHF,oBAVG,EAUmB,CAAC,YAAM;AACrC,OAAMG,SAAS;AACbC,cAAS;AADI,IAAf;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA,UAAO;AACL;;;;;AAKAC,iBAAY,oBAACD,OAAD,EAAa;AACvBD,cAAOC,OAAP,GAAiBA,OAAjB;AACD,MARI;;AAUL;;;;;AAKAE,WAAM,CACJ,OADI,EAEJ,sBAFI;AAGJ;AACD,4CAAkBH,MAAlB,CAJK;AAfD,IAAP;AAsBD,EAjD+B,CAVnB,EA6DZI,I;;;;;;AC1FH,gD;;;;;;;;;;;;ACAA;mBACe,UAACC,IAAD;AAAA,UAAU,UAACC,UAAD,EAAaC,eAAb,EAAiC;AACxD;AACA,SAAMN,UAAUI,KAAKJ,OAAL,IAAgB,EAAhC;;AAEA,SAAMO,UAAU,IAAhB;;AAGA;;;;AAIA,SAAMC,eAAe,EAArB;;AAMA;;;;;;AAMA,cAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,cAAO;AACLC,eAAMD,IAAIC,IADL;AAELC,kBAASF,IAAIE,OAFR;AAGLC,iBAAQH,IAAIG,MAHP;AAILC,qBAAYJ,IAAII;AAJX,QAAP;AAMD;;AAGD;;;;;;;;;;;;;;;;;;;;;;AAuBA,cAASC,sBAAT,CAAgCC,MAAhC,EAAwCJ,OAAxC,EAAiD;AAC/C,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,2BAAN;;AAEA,cAAOF,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBA,cAASC,6BAAT,CAAuCX,IAAvC,EAA6CC,OAA7C,EAAsD;AACpD,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,2BAAN;;AAEA,cAAOF,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBA,cAASE,uCAAT,CAAiDP,MAAjD,EAAyDJ,OAAzD,EAAkE;AAChE,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,8CAAN;;AAEA,cAAOF,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,cAASG,sBAAT,CAAgCR,MAAhC,EAAwCJ,OAAxC,EAAiD;AAC/C,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,2BAAN;;AAEA,cAAOF,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,cAASI,6BAAT,CAAuCd,IAAvC,EAA6CC,OAA7C,EAAsD;AACpD,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,2BAAN;;AAEA,cAAOF,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,cAASK,6BAAT,CAAuCV,MAAvC,EAA+CJ,OAA/C,EAAwD;AACtD,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,kCAAN;;AAEA,cAAOF,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,cAASM,+BAAT,CAAyCC,OAAzC,EAAkDZ,MAAlD,EAA0DJ,OAA1D,EAAmE;AACjE,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoDqB,OAA1D;;AAEA,cAAOvB,WAAW;AAChBa,iBAAQ,QADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,cAASQ,mCAAT,CAA6CD,OAA7C,EAAsDZ,MAAtD,EAA8DJ,OAA9D,EAAuE;AACrE,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoDqB,OAApD,mBAAN;;AAEA,cAAOvB,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,cAASS,0CAAT,CAAoDF,OAApD,EAA6DjB,IAA7D,EAAmEC,OAAnE,EAA4E;AAC1E,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoDqB,OAApD,mBAAN;;AAEA,cAAOvB,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,cAASU,4CAAT,CAAsDH,OAAtD,EAA+DI,cAA/D,EAA+EhB,MAA/E,EAAuFJ,OAAvF,EAAgG;AAC9F,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoDqB,OAApD,uBAA6EI,cAAnF;;AAEA,cAAO3B,WAAW;AAChBa,iBAAQ,QADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,cAASY,4BAAT,CAAsCC,OAAtC,EAA+CvB,IAA/C,EAAqDC,OAArD,EAA8D;AAC5D,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoD2B,OAA1D;;AAEA,cAAO7B,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,cAASc,+BAAT,CAAyCD,OAAzC,EAAkDlB,MAAlD,EAA0DJ,OAA1D,EAAmE;AACjE,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoD2B,OAA1D;;AAEA,cAAO7B,WAAW;AAChBa,iBAAQ,QADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,cAASe,6CAAT,CAAuDF,OAAvD,EAAgEvB,IAAhE,EAAsEC,OAAtE,EAA+E;AAC7E,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,+BAAoD2B,OAApD,wBAAN;;AAEA,cAAO7B,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,cAASgB,sCAAT,CAAgDC,cAAhD,EAAgEtB,MAAhE,EAAwEJ,OAAxE,EAAiF;AAC/E,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAAjE;;AAEA,cAAOjC,WAAW;AAChBa,iBAAQ,QADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,cAASkB,8DAAT,CAAwED,cAAxE,EAAwF3B,IAAxF,EAA8FC,OAA9F,EAAuG;AACrG,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAA3D,kCAAN;;AAEA,cAAOjC,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,cAASmB,mCAAT,CAA6CF,cAA7C,EAA6DtB,MAA7D,EAAqEJ,OAArE,EAA8E;AAC5E,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAA3D,YAAN;;AAEA,cAAOjC,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,cAASoB,0CAAT,CAAoDH,cAApD,EAAoE3B,IAApE,EAA0EC,OAA1E,EAAmF;AACjF,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAA3D,YAAN;;AAEA,cAAOjC,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,cAASqB,qCAAT,CAA+CJ,cAA/C,EAA+DtB,MAA/D,EAAuEJ,OAAvE,EAAgF;AAC9E,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAA3D,cAAN;;AAEA,cAAOjC,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD,iBAAQA,UAAU,EAJF;;AAMhBJ,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,cAASsB,yCAAT,CAAmDL,cAAnD,EAAmEJ,OAAnE,EAA4EvB,IAA5E,EAAkFC,OAAlF,EAA2F;AACzF,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAA3D,gBAAoFJ,OAA1F;;AAEA,cAAO7B,WAAW;AAChBa,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,cAASuB,8DAAT,CAAwEN,cAAxE,EAAwFO,SAAxF,EAAmGlC,IAAnG,EAAyGC,OAAzG,EAAkH;AAChH,WAAMK,WAASjB,OAAT,GAAmBO,OAAnB,sCAA2D+B,cAA3D,kBAAsFO,SAAtF,0BAAN;;AAEA,cAAOxC,WAAW;AAChBa,iBAAQ,MADQ;AAEhBD,iBAFgB;;AAIhBN,eAAMA,QAAQ,EAJE;;AAMhBC,kBAASA,WAAW;AANJ,QAAX,EAOJO,IAPI,CAOCV,KAPD,EAQNW,KARM,CAQA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAR5B,CAAP;AASD;;AAMD;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAMyB,UAAU,EAAhB;;AAGA;;;;;;;;;;;;AAYAA,aAAQxB,6BAAR,GAAwC,EAAC,cAAa,EAAd,EAAxC;;AAEA;;;;;;;;;;;;AAYAwB,aAAQrB,6BAAR,GAAwC,EAAC,cAAa,EAAd,EAAxC;;AAEA;;;;;;;;;;;;;;;;;AAiBAqB,aAAQhB,0CAAR,GAAqD,EAAC,cAAa,EAAC,kBAAiB,EAAC,QAAO,QAAR,EAAiB,YAAW,IAA5B,EAAlB,EAAd,EAArD;;AAEA;;;;;;;;;;;;AAYAgB,aAAQb,4BAAR,GAAuC,EAAC,cAAa,EAAd,EAAvC;;AAEA;;;;;;;;;;;;AAYAa,aAAQV,6CAAR,GAAwD,EAAC,cAAa,EAAd,EAAxD;;AAEA;;;;;;;;;;;;AAYAU,aAAQL,0CAAR,GAAqD,EAAC,cAAa,EAAd,EAArD;;AAEA;;;;;;;;;;;;AAYAK,aAAQH,yCAAR,GAAoD,EAAC,cAAa,EAAd,EAApD;;AAGA;;;;;;;;;AASA,YAAQ;;AAEN5B,qDAFM;;AAINO,mEAJM;;AAMNC,uFANM;;AAQNC,qDARM;;AAUNC,mEAVM;;AAYNC,mEAZM;;AAcNC,uEAdM;;AAgBNE,+EAhBM;;AAkBNC,6FAlBM;;AAoBNC,iGApBM;;AAsBNE,iEAtBM;;AAwBNE,uEAxBM;;AA0BNC,mGA1BM;;AA4BNC,qFA5BM;;AA8BNE,qIA9BM;;AAgCNC,+EAhCM;;AAkCNC,6FAlCM;;AAoCNC,mFApCM;;AAsCNC,2FAtCM;;AAwCNC,qIAxCM;;AA2CNE;AA3CM,MAAR;AA6CD,IApjCc;AAAA,E","file":"data-bb-message-center-http-ng/scripts/data-bb-message-center-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-message-center-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-message-center-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-message-center-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bf93fb8417438f83ccee","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-message-center-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-message-center-http-ng\n *\n * @description A data module for accessing the Message Center REST API.\n *\n * @returns {String} `data-bb-message-center-http-ng`\n * @example\n * import messageCenterDataModuleKey, {\n *   messageCenterDataKey,\n * } from 'data-bb-message-center-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport messageCenterData from './data-bb-message-center-http';\n\nconst messageCenterDataModuleKey = 'data-bb-message-center-http-ng';\n/**\n * @name messageCenterDataKey\n * @type {string}\n * @description Angular dependency injection key for the MessageCenterData service\n */\nexport const messageCenterDataKey = 'data-bb-message-center-http-ng:messageCenterData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(messageCenterDataModuleKey, [])\n  \n  /**\n   * @constructor MessageCenterData\n   * @type {object}\n   *\n   * @description Public api for data-bb-message-center-http-ng service\n   *\n   */\n  .provider(messageCenterDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name MessageCenterDataProvider\n     * @type {object}\n     * @ngkey data-bb-message-center-http-ng:messageCenterDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-message-center-http-ng:messageCenterDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-message-center-http-ng:messageCenterDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name MessageCenterDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name MessageCenterDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       messageCenterData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-message-center-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v4';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name MessageCenterData#getMessageCenterTopics\n   * @type {Function}\n   * @description Returns a list of available topics. Each topic is associated with a list of subscribers. Selection of a topic\ndetermines a target destination of a message as well.\n\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterTopics(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterTopics(params, headers) {\n    const url = `${baseUri}${version}/message-center/topics`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterTopicsRecord\n   * @type {Function}\n   * @description Creates a new topic\n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterTopicsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterTopicsRecord(data, headers) {\n    const url = `${baseUri}${version}/message-center/topics`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#getMessageCenterUnreadConversationCount\n   * @type {Function}\n   * @description Returns a total number of unread conversations for the given user\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterUnreadConversationCount(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUnreadConversationCount(params, headers) {\n    const url = `${baseUri}${version}/message-center/unread-conversation-count`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#getMessageCenterDrafts\n   * @type {Function}\n   * @description Returns a list of draft messages that has been created by the given user\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.recipients It is a filtering parameter. It represents a list of recipients that a resulting draft is to be addressed\nto. Recipients are identified by an external user ID. A semicolon character (i.e., \";\") is used as a\ndelimiter. Eg: sarah;john.\n     \n   * @param {?string} params.sort Represents a comma separated list of field names. Each name is to be used for sorting. The order of the\nnames is important as it determines the order in which the fields are utilized. That is, Nth field name\nis used if and only if a value of (N-1)th field is found more than once. The sorting may be either\nascending or descending. This can be controlled by utilizing a special prefix. The prefix is a dash symbol\n(i.e., \"-\"). If the prefix is provided, a result list will be ordered in a descending fashion, otherwise\nit is going to be sorted in an ascending fashion. Eg: subject,-sentDateTime.\n     \n   * @param {?string} params.category Represents a type of a conversation/draft/message. A category is also referred to as 'topic'. It is used\nas a filtering parameter. Eg: Loans.\n     \n   * @param {?string} params.subject Represents a short explanation of the purpose that a conversation/draft/message was created for. It is used\nas a filtering parameter. Eg: Inquiry About the Loans.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterDrafts(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterDrafts(params, headers) {\n    const url = `${baseUri}${version}/message-center/drafts`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterDraftsRecord\n   * @type {Function}\n   * @description Creates a draft with the specified user as an author\n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterDraftsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterDraftsRecord(data, headers) {\n    const url = `${baseUri}${version}/message-center/drafts`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#getMessageCenterConversations\n   * @type {Function}\n   * @description Returns a list of conversations available for a user\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.status Represents a type of a conversation. It is used as a filtering parameter. Essentially it defines a\nmailbox. Currently supported types: received (i.e., inbox), sent (i.e., outbox), archived (i.e., archive).\nIf the parameter is not specified, received (non archived, non deleted) conversations are returned by\ndefault.\n     \n   * @param {?string} params.sender Represents a user that takes part in a conversation. It is used as a filtering parameter. It is an\nexternal user ID. The resulting list will include only those conversatons where the specified user takes\npart in it. Eg: lisa.\n     \n   * @param {?number} params.from Represents an offset of the first result that is to be included into a response. It should be utilized in\norder to control pagination. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.size Represents a maximum number of elements that are to be included into a response. It should be utilized in\norder to control pagination. Eg: 20. (defaults to 10)\n     \n   * @param {?string} params.sort Represents a comma separated list of field names. Each name is to be used for sorting. The order of the\nnames is important as it determines the order in which the fields are utilized. That is, Nth field name\nis used if and only if a value of (N-1)th field is found more than once. The sorting may be either\nascending or descending. This can be controlled by utilizing a special prefix. The prefix is a dash symbol\n(i.e., \"-\"). If the prefix is provided, a result list will be ordered in a descending fashion, otherwise\nit is going to be sorted in an ascending fashion. Eg: subject,-sentDateTime.\n     \n   * @param {?string} params.category Represents a type of a conversation/draft/message. A category is also referred to as 'topic'. It is used\nas a filtering parameter. Eg: Loans.\n     \n   * @param {?string} params.subject Represents a short explanation of the purpose that a conversation/draft/message was created for. It is used\nas a filtering parameter. Eg: Inquiry About the Loans.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {number} headers.X-Total-Count Contains total number of all conversations.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterConversations(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterConversations(params, headers) {\n    const url = `${baseUri}${version}/message-center/conversations`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#deleteMessageCenterTopicsRecord\n   * @type {Function}\n   * @description Deletes a topic of the given ID\n   \n   * @param {string} topicId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .deleteMessageCenterTopicsRecord(topicId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterTopicsRecord(topicId, params, headers) {\n    const url = `${baseUri}${version}/message-center/topics/${topicId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#getMessageCenterTopicsSubscriptions\n   * @type {Function}\n   * @description Returns a list of subscriptions that are associated with the specified topic\n   \n   * @param {string} topicId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.from Represents an offset of the first result that is to be included into a response. It should be utilized in\norder to control pagination. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.size Represents a maximum number of elements that are to be included into a response. It should be utilized in\norder to control pagination. Eg: 20. (defaults to 10)\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {number} headers.X-Total-Count Contains total number of all subscriptions.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterTopicsSubscriptions(topicId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterTopicsSubscriptions(topicId, params, headers) {\n    const url = `${baseUri}${version}/message-center/topics/${topicId}/subscriptions`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterTopicsSubscriptionsRecord\n   * @type {Function}\n   * @description Adds a new subscription to the given topic\n   \n   * @param {string} topicId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterTopicsSubscriptionsRecord(topicId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterTopicsSubscriptionsRecord(topicId, data, headers) {\n    const url = `${baseUri}${version}/message-center/topics/${topicId}/subscriptions`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#deleteMessageCenterTopicsSubscriptionsRecord\n   * @type {Function}\n   * @description Remove a subscription for a topic\n   \n   * @param {string} topicId \n     \n   \n   * @param {string} subscriptionId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .deleteMessageCenterTopicsSubscriptionsRecord(topicId, subscriptionId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterTopicsSubscriptionsRecord(topicId, subscriptionId, params, headers) {\n    const url = `${baseUri}${version}/message-center/topics/${topicId}/subscriptions/${subscriptionId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#putMessageCenterDraftsRecord\n   * @type {Function}\n   * @description Updates a draft with provided details\n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .putMessageCenterDraftsRecord(draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putMessageCenterDraftsRecord(draftId, data, headers) {\n    const url = `${baseUri}${version}/message-center/drafts/${draftId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#deleteMessageCenterDraftsRecord\n   * @type {Function}\n   * @description Deletes a draft\n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .deleteMessageCenterDraftsRecord(draftId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterDraftsRecord(draftId, params, headers) {\n    const url = `${baseUri}${version}/message-center/drafts/${draftId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterDraftsSendDraftRequestRecord\n   * @type {Function}\n   * @description Sends a draft. If a body part is added to the request, then a draft will be updated with the provided\ndata before being sent.\n\n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterDraftsSendDraftRequestRecord(draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterDraftsSendDraftRequestRecord(draftId, data, headers) {\n    const url = `${baseUri}${version}/message-center/drafts/${draftId}/send-draft-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#deleteMessageCenterConversationsRecord\n   * @type {Function}\n   * @description Removes the user from the given conversation. After the reques is handled, the conversation is not\navailable for the given user only. If, however, any other participant of the conversation decides to send\na new message, then the conversation gets reinstated as well.\n\n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .deleteMessageCenterConversationsRecord(conversationId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterConversationsRecord(conversationId, params, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterConversationsArchiveConversationRequestRecord\n   * @type {Function}\n   * @description Moves the given conversation from an inbox to an archive\n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterConversationsArchiveConversationRequestRecord(conversationId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterConversationsArchiveConversationRequestRecord(conversationId, data, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}/archive-conversation-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#getMessageCenterConversationsDrafts\n   * @type {Function}\n   * @description Returns a list of drafts that have been created by the given user in response to the given conversation\n\n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.limit Represents a maximum number of drafts that are to be included into a response.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterConversationsDrafts(conversationId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterConversationsDrafts(conversationId, params, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}/drafts`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterConversationsDraftsRecord\n   * @type {Function}\n   * @description Creates a draft in response to the given conversation\n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterConversationsDraftsRecord(conversationId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterConversationsDraftsRecord(conversationId, data, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}/drafts`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#getMessageCenterConversationsMessages\n   * @type {Function}\n   * @description Returns all messages that has been sent in relation to the given conversation\n\n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.from Represents an offset of the first result that is to be included into a response. It should be utilized in\norder to control pagination. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.size Represents a maximum number of elements that are to be included into a response. It should be utilized in\norder to control pagination. Eg: 20. (defaults to 10)\n     \n   * @param {?string} params.sort Represents a comma separated list of field names. Each name is to be used for sorting. The order of the\nnames is important as it determines the order in which the fields are utilized. That is, Nth field name\nis used if and only if a value of (N-1)th field is found more than once. The sorting may be either\nascending or descending. This can be controlled by utilizing a special prefix. The prefix is a dash symbol\n(i.e., \"-\"). If the prefix is provided, a result list will be ordered in a descending fashion, otherwise\nit is going to be sorted in an ascending fashion. Eg: subject,-sentDateTime.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {number} headers.X-Total-Count Contains total number of messages in conversation.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .getMessageCenterConversationsMessages(conversationId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterConversationsMessages(conversationId, params, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}/messages`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#putMessageCenterConversationsDraftsRecord\n   * @type {Function}\n   * @description Updates content of the specified draft that was created in response to the given conversation\n\n   \n   * @param {string} conversationId \n     \n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .putMessageCenterConversationsDraftsRecord(conversationId, draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putMessageCenterConversationsDraftsRecord(conversationId, draftId, data, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}/drafts/${draftId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name MessageCenterData#postMessageCenterConversationsMessagesReadMessageRequestRecord\n   * @type {Function}\n   * @description Marks the given message as read\n   \n   * @param {string} conversationId \n     \n   \n   * @param {string} messageId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Uniquely identifies a request. It is utilized in order to support idempotency. In case of an uncertain state\nof a response, a client is expected to be able to retry the request by providing the same request identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messageCenterData\n   *  .postMessageCenterConversationsMessagesReadMessageRequestRecord(conversationId, messageId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterConversationsMessagesReadMessageRequestRecord(conversationId, messageId, data, headers) {\n    const url = `${baseUri}${version}/message-center/conversations/${conversationId}/messages/${messageId}/read-message-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name MessageCenterData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterTopicsRecord method\n   *\n   * @name MessageCenterData#schemas.postMessageCenterTopicsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterTopicsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterDraftsRecord method\n   *\n   * @name MessageCenterData#schemas.postMessageCenterDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterDraftsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterTopicsSubscriptionsRecord method\n   *\n   * @name MessageCenterData#schemas.postMessageCenterTopicsSubscriptionsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalUserId\": {\n      \"type\": \"string\",\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postMessageCenterTopicsSubscriptionsRecord = {\"properties\":{\"externalUserId\":{\"type\":\"string\",\"required\":true}}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putMessageCenterDraftsRecord method\n   *\n   * @name MessageCenterData#schemas.putMessageCenterDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.putMessageCenterDraftsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterDraftsSendDraftRequestRecord method\n   *\n   * @name MessageCenterData#schemas.postMessageCenterDraftsSendDraftRequestRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterDraftsSendDraftRequestRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterConversationsDraftsRecord method\n   *\n   * @name MessageCenterData#schemas.postMessageCenterConversationsDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterConversationsDraftsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putMessageCenterConversationsDraftsRecord method\n   *\n   * @name MessageCenterData#schemas.putMessageCenterConversationsDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.putMessageCenterConversationsDraftsRecord = {\"properties\":{}};\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getMessageCenterTopics,\n    \n    postMessageCenterTopicsRecord,\n    \n    getMessageCenterUnreadConversationCount,\n    \n    getMessageCenterDrafts,\n    \n    postMessageCenterDraftsRecord,\n    \n    getMessageCenterConversations,\n    \n    deleteMessageCenterTopicsRecord,\n    \n    getMessageCenterTopicsSubscriptions,\n    \n    postMessageCenterTopicsSubscriptionsRecord,\n    \n    deleteMessageCenterTopicsSubscriptionsRecord,\n    \n    putMessageCenterDraftsRecord,\n    \n    deleteMessageCenterDraftsRecord,\n    \n    postMessageCenterDraftsSendDraftRequestRecord,\n    \n    deleteMessageCenterConversationsRecord,\n    \n    postMessageCenterConversationsArchiveConversationRequestRecord,\n    \n    getMessageCenterConversationsDrafts,\n    \n    postMessageCenterConversationsDraftsRecord,\n    \n    getMessageCenterConversationsMessages,\n    \n    putMessageCenterConversationsDraftsRecord,\n    \n    postMessageCenterConversationsMessagesReadMessageRequestRecord,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-message-center-http-ng/scripts/data-bb-message-center-http.js"],"sourceRoot":""}