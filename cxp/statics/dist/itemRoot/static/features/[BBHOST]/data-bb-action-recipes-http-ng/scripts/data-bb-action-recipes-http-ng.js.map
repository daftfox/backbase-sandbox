{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 4e0f14ad4676a3b4eb31","webpack:///./fe-dist/http-ng/data-bb-action-recipes-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-action-recipes-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"lib-bb-challenge-ng\"","webpack:///./fe-dist/http-ng/data-bb-action-recipes-http-ng/scripts/data-bb-action-recipes-http.js"],"names":["actionRecipesDataModuleKey","actionRecipesDataKey","ng","module","bbChallengeModuleKey","config","$httpProvider","interceptors","push","bbChallengeKey","provider","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getActionRecipeSpecifications","params","url","method","then","catch","err","getActionRecipes","postActionRecipesRecord","getActionRecipesRecord","recipeId","putActionRecipesRecord","deleteActionRecipesRecord","getActionRecipesHistory","postActionRecipesActivationRequestRecord","postActionRecipesDeactivationRequestRecord","getActionRecipesHistoryRecord","userId","schemas"],"mappings":"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","file":"data-bb-action-recipes-http-ng/scripts/data-bb-action-recipes-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-challenge-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-action-recipes-http-ng\", [\"vendor-bb-angular\", \"lib-bb-challenge-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-action-recipes-http-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-challenge-ng\"));\n\telse\n\t\troot[\"data-bb-action-recipes-http-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-challenge-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4e0f14ad4676a3b4eb31","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-action-recipes-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-action-recipes-http-ng\n *\n * @description A data module for accessing the Action Recipes REST API.\n *\n * @returns {String} `data-bb-action-recipes-http-ng`\n * @example\n * import actionRecipesDataModuleKey, {\n *   actionRecipesDataKey,\n * } from 'data-bb-action-recipes-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport bbChallengeModuleKey, {\n  bbChallengeKey,\n} from 'lib-bb-challenge-ng';\n\nimport actionRecipesData from './data-bb-action-recipes-http';\n\nconst actionRecipesDataModuleKey = 'data-bb-action-recipes-http-ng';\n/**\n * @name actionRecipesDataKey\n * @type {string}\n * @description Angular dependency injection key for the ActionRecipesData service\n */\nexport const actionRecipesDataKey = 'data-bb-action-recipes-http-ng:actionRecipesData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(actionRecipesDataModuleKey, [bbChallengeModuleKey])\n  \n  .config(['$httpProvider', ($httpProvider) => {\n    $httpProvider.interceptors.push(bbChallengeKey);\n  }])\n  \n  /**\n   * @constructor ActionRecipesData\n   * @type {object}\n   *\n   * @description Public api for data-bb-action-recipes-http-ng service\n   *\n   */\n  .provider(actionRecipesDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name ActionRecipesDataProvider\n     * @type {object}\n     * @ngkey data-bb-action-recipes-http-ng:actionRecipesDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-action-recipes-http-ng:actionRecipesDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-action-recipes-http-ng:actionRecipesDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name ActionRecipesDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name ActionRecipesDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       actionRecipesData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-action-recipes-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-challenge-ng\"\n// module id = 3\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name ActionRecipesData#getActionRecipeSpecifications\n   * @type {Function}\n   * @description get request\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .getActionRecipeSpecifications(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getActionRecipeSpecifications(params, headers) {\n    const url = `${baseUri}${version}/action-recipe-specifications`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#getActionRecipes\n   * @type {Function}\n   * @description Returns a list of action recipes\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.specificationId specificationId.\n     \n   * @param {?string} params.active active.\n     \n   * @param {?number} params.offset Represents an offset for fetching results. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.limit Represents a maximum number of elements that need to be returned. Eg: 20. (defaults to 10)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .getActionRecipes(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getActionRecipes(params, headers) {\n    const url = `${baseUri}${version}/action-recipes`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#postActionRecipesRecord\n   * @type {Function}\n   * @description Creates a new action recipe\n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .postActionRecipesRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postActionRecipesRecord(data, headers) {\n    const url = `${baseUri}${version}/action-recipes`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#getActionRecipesRecord\n   * @type {Function}\n   * @description Retrieves a specified action recipe\n   \n   * @param {string} recipeId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .getActionRecipesRecord(recipeId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getActionRecipesRecord(recipeId, params, headers) {\n    const url = `${baseUri}${version}/action-recipes/${recipeId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#putActionRecipesRecord\n   * @type {Function}\n   * @description Updates a specified action recipe\n   \n   * @param {string} recipeId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .putActionRecipesRecord(recipeId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putActionRecipesRecord(recipeId, data, headers) {\n    const url = `${baseUri}${version}/action-recipes/${recipeId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#deleteActionRecipesRecord\n   * @type {Function}\n   * @description Removes a specified action recipe\n   \n   * @param {string} recipeId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .deleteActionRecipesRecord(recipeId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteActionRecipesRecord(recipeId, params, headers) {\n    const url = `${baseUri}${version}/action-recipes/${recipeId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#getActionRecipesHistory\n   * @type {Function}\n   * @description Retrieves all actions history for logged in user\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.offset Represents an offset for fetching results. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.limit Represents a maximum number of elements that need to be returned. Eg: 20. (defaults to 10)\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {number} headers.X-Total-Count Contains total number of all action event history items.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .getActionRecipesHistory(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getActionRecipesHistory(params, headers) {\n    const url = `${baseUri}${version}/action-recipes/history`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#postActionRecipesActivationRequestRecord\n   * @type {Function}\n   * @description post request\n   \n   * @param {string} recipeId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .postActionRecipesActivationRequestRecord(recipeId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postActionRecipesActivationRequestRecord(recipeId, data, headers) {\n    const url = `${baseUri}${version}/action-recipes/${recipeId}/activation-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#postActionRecipesDeactivationRequestRecord\n   * @type {Function}\n   * @description post request\n   \n   * @param {string} recipeId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .postActionRecipesDeactivationRequestRecord(recipeId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postActionRecipesDeactivationRequestRecord(recipeId, data, headers) {\n    const url = `${baseUri}${version}/action-recipes/${recipeId}/deactivation-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ActionRecipesData#getActionRecipesHistoryRecord\n   * @type {Function}\n   * @description Retrieves all actions history for CSR users by user id\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.offset Represents an offset for fetching results. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.limit Represents a maximum number of elements that need to be returned. Eg: 20. (defaults to 10)\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {number} headers.X-Total-Count Contains total number of all action event history items.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * actionRecipesData\n   *  .getActionRecipesHistoryRecord(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getActionRecipesHistoryRecord(userId, params, headers) {\n    const url = `${baseUri}${version}/action-recipes/history/${userId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name ActionRecipesData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postActionRecipesRecord method\n   *\n   * @name ActionRecipesData#schemas.postActionRecipesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postActionRecipesRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putActionRecipesRecord method\n   *\n   * @name ActionRecipesData#schemas.putActionRecipesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"actions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"notification\",\n              \"email\",\n              \"sms\"\n            ],\n            \"required\": true\n          },\n          \"destination\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": false\n          }\n        }\n      },\n      \"minItems\": 1,\n      \"maxItems\": 3,\n      \"required\": true\n    },\n    \"amount\": {\n      \"type\": \"string\",\n      \"maximum\": 1000000000000000000,\n      \"required\": false\n    },\n    \"arrangementId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 64,\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.putActionRecipesRecord = {\"properties\":{\"actions\":{\"type\":\"array\",\"items\":{\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"notification\",\"email\",\"sms\"],\"required\":true},\"destination\":{\"type\":\"object\",\"properties\":{},\"required\":false}}},\"minItems\":1,\"maxItems\":3,\"required\":true},\"amount\":{\"type\":\"string\",\"maximum\":1000000000000000000,\"required\":false},\"arrangementId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":64,\"required\":false}}};\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getActionRecipeSpecifications,\n    \n    getActionRecipes,\n    \n    postActionRecipesRecord,\n    \n    getActionRecipesRecord,\n    \n    putActionRecipesRecord,\n    \n    deleteActionRecipesRecord,\n    \n    getActionRecipesHistory,\n    \n    postActionRecipesActivationRequestRecord,\n    \n    postActionRecipesDeactivationRequestRecord,\n    \n    getActionRecipesHistoryRecord,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-action-recipes-http-ng/scripts/data-bb-action-recipes-http.js"],"sourceRoot":""}