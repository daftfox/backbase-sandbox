{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**************","webpack:///webpack/bootstrap a983de776e3686600b94?4bc9**************","webpack:///./model-bb-product-summary-ng/model.xml","webpack:///./model-bb-product-summary-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-arrangements-http-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///./model-bb-product-summary-ng/scripts/product-summary.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-product-summary-ng/scripts/constants.js"],"names":["BadRequestError","modelProductSummaryKey","angular","module","productSummaryDataModuleKey","arrangementsDataModuleKey","bbStorageModuleKey","widgetModuleKey","factory","productSummaryDataKey","arrangementsDataKey","bbStorageServiceKey","widgetKey","productSummaryModelKey","name","productSummaryModel","convertToArray","rawData","Object","keys","filter","kind","products","length","map","rawKind","assign","product","id","productSummaryData","arrangementsData","bbStorage","Promise","widget","processedSummaryData","disableSessionStorage","getBooleanPreference","Preference","PRODUCT_SUMMARY_DISABLE_SESSION_STORAGE","fromHttpOrBadRequestError","httpResponse","status","data","errors","codes","e","key","code","__httpResponse","patchArrangement","arrangement","patchArrangementsRecord","catch","loadProductSummary","getProductsummary","then","setItem","BbStorageKeys","PRODUCT_SUMMARY","load","forceLoad","getItem","aggregatedBalance","productKinds","total","getProductSelectedId","PRODUCT_SELECTED","findProductById","idx","foundProduct","find","getFirstVisibleProduct","firstKindWithVisibleProduct","kinds","visible","firstProduct","getAllVisibleProducts","reduce","allProducts","setProductSelected","removeItem","setProductsSelected","PRODUCTS_SELECTED","getProductFromList","getFirstInstead","resolve","defaultProduct","getProductsFromList","ids","getDefault","allVisibleProducts","getProductSelected","getProductsSelected","items","loadByLegalEntityId","params","getProductsummaryArrangements","raw","totalCount","parseInt","headers","loadContextArrangements","getProductsummaryContextArrangements","getProductDetails","productId","getArrangementsRecord","getAccountsOverviewPreferences","accountsOverviewPreferences","pageSize","getLongPreference","ACCOUNTS_PAGE_SIZE","maxNavPages","ACCOUNTS_MAX_NAV_PAGES","paginationType","getStringPreference","ACCOUNTS_PAGINATION_TYPE","dissmissMessageTime","ACCOUNTS_DISSMISS_MESSAGE_TIME","sortableColumn","ACCOUNTS_SORTABLE_COLUMN","productKindName","SupportedProductKinds","includes","PRODUCT_KIND_NAME","chartsEnabled","CHARTS_ENABLED","businessFunction","ACCOUNTS_BUSINESS_FUNCTION","resourceName","ACCOUNTS_RESOURCE_NAME","privilegeType","ACCOUNTS_PRIVILEGE_TYPE","sortableDirection","ACCOUNTS_SORTABLE_DIRECTION","accountsSelectorSelectAll","ACCOUNTS_SELECTOR_SELECT_ALL","getBalanceHistory","arrangementsId","getAccountsBalanceHistoryRecord","processSeries","dataSeries","series","labels","Date","item","dateTo","getTime","datasets","value","balance","transformToSeries","balanceHistory","memo","arrangementId","getSelectedAccount","console","warn","setSelectedAccount","account","ERR_ACCOUNT_ARRANGEMENT_NOT_EXIST","ERR_ACCOUNT_ARRANGEMENT_NO_PRIVILEGES","ERR_ACCOUNT_ARRANGEMENT_NOT_ENTITLED_TO_SEE","ERR_ACCOUNT_PRODUCT_NOT_EXIST","ERR_ACCOUNT_PRODUCT_UPDATE_SIZE","ERR_ARRANGEMENT_NOT_FOUND","ERR_ARRANGEMENT_NOT_EXIST_PRODUCT_KIND_NAME","ERR_PRODUCT_SUMMARY_LEGAL_ENTITY_NOT_ALLOWED","ERR_PRODUCT_SUMMARY_REQUEST_SIZE","ERR_PRODUCT_SUMMARY_REQUEST_FROM","ERR_PRODUCT_SUMMARY_REQUEST_ORDER_BY","ERR_PRODUCT_SUMMARY_REQUEST_DIRECTION","ERR_BALANCE_HISTORY_ARRANGEMENT_IDS_ARE_EMPTY","ERR_BALANCE_HISTORY_INVALID_COMBO_OF_RANGE_PERIOD","ERR_BALANCE_HISTORY_INVALID_DATE_FROM_TO_RANGE_PERIOD","ERR_BALANCE_HISTORY_INVALID_FROM_DATE"],"mappings":"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","file":"model-bb-product-summary-ng/scripts/model-bb-product-summary-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-storage-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-arrangements-http-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-product-summary-ng\", [\"vendor-bb-angular\", \"lib-bb-storage-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-arrangements-http-ng\", \"lib-bb-widget-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-product-summary-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-storage-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-arrangements-http-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-product-summary-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-storage-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-arrangements-http-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_99__, __WEBPACK_EXTERNAL_MODULE_100__, __WEBPACK_EXTERNAL_MODULE_101__, __WEBPACK_EXTERNAL_MODULE_102__, __WEBPACK_EXTERNAL_MODULE_103__, __WEBPACK_EXTERNAL_MODULE_105__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a983de776e3686600b94","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-product-summary-ng/model.xml\n// module id = 0\n// module chunks = 15","/**\n * @module model-bb-product-summary-ng\n *\n * @description\n * Product summary widget model.\n *\n * @usage\n * import modelProductSummaryModuleKey, {\n *   modelProductSummaryKey,\n * } from 'model-bb-product-summary-ng';\n *\n * angular.module('widget-bb-product-summary-ng', [\n *   modelProductSummaryModuleKey,\n * ])\n * .controller('ProductSummaryController', [\n *   modelProductSummaryKey,\n *   ...,\n * ])\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport arrangementsDataModuleKey, {\n  arrangementsDataKey,\n} from 'data-bb-arrangements-http-ng';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport productSummaryModelKey from './product-summary';\n/**\n * @name BadRequestError\n * @type {Object}\n * @description\n * Additional errors thrown from the model\n */\nimport { BadRequestError } from './constants';\nexport { BadRequestError };\n\n/**\n * Injector name of the model service\n * @name modelProductSummaryKey\n * @type {string}\n */\nexport const modelProductSummaryKey = 'model-bb-product-summary-ng:model';\n\nexport default angular\n  .module('model-bb-product-summary-ng', [\n    productSummaryDataModuleKey,\n    arrangementsDataModuleKey,\n    bbStorageModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(modelProductSummaryKey, [\n    productSummaryDataKey,\n    arrangementsDataKey,\n    bbStorageServiceKey,\n    '$q',\n    widgetKey,\n    /* into */\n    productSummaryModelKey,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-product-summary-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_99__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 99\n// module chunks = 15 16 17 18 19 20 21 22 23 24","module.exports = __WEBPACK_EXTERNAL_MODULE_100__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 100\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_101__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 101\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_102__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-arrangements-http-ng\"\n// module id = 102\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_103__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 103\n// module chunks = 15 21 22 23 24","import { fromHttpError } from 'lib-bb-model-errors';\n\nimport { Preference, BbStorageKeys, SupportedProductKinds } from './constants';\n\n/**\n * Method to normalize data\n * @private\n * @param rawData {Object} http data response\n * @returns {ProductKind[]}\n */\nfunction convertToArray(rawData) {\n  return Object.keys(rawData)\n    .filter(kind => rawData[kind].products && rawData[kind].products.length > 0)\n    .map(kind => {\n      const rawKind = rawData[kind];\n      const products = rawKind.products.map(product => Object.assign({ kind }, product));\n\n      return Object.assign({}, rawKind, { id: kind, products });\n    });\n}\n\n/**\n * Product summary model service\n * @name ProductSummaryModel\n * @param {ProductSummaryData} productSummaryData\n *   A Data module to allow access to product summary data.\n * @param {ArrangementsData} arrangementsData\n *   A Data module to allow access to arrangements data.\n * @param {Object} bbStorage storage instance\n * @param {object} Promise An ES2015 compatible `Promise` object.\n * @return {ProductSummaryModel}\n * @inner\n */\nexport default function productSummaryModel(\n  productSummaryData,\n  arrangementsData,\n  bbStorage,\n  Promise,\n  widget\n) {\n  /**\n   * @description\n   * Processed Product Summary data\n   * @type {ProductKinds}\n   */\n  let processedSummaryData;\n\n  /**\n   * @description\n   * CXP preference for disabling storing product summary data in session storage.\n   *\n   * @name bb.productSummary.disableSessionStorage\n   * @type {boolean}\n   * @inner\n   */\n  const disableSessionStorage =\n    widget.getBooleanPreference(Preference.PRODUCT_SUMMARY_DISABLE_SESSION_STORAGE) || false;\n\n  /**\n   * @name ProductSummaryModel#fromHttpOrBadRequestError\n   * @description\n   * The exception that is thrown when there is a error communication with backend.\n   * Returns default fromHttp response, or bad request with custom message from back-end\n   * if the response status is 400\n   * @inner\n   * @type {function}\n   * @param {object} httpResponse response error object\n   */\n  const fromHttpOrBadRequestError = (httpResponse) => {\n    if (httpResponse.status === 400\n        && httpResponse.data.errors\n        && httpResponse.data.errors.length) {\n      const codes = httpResponse.data.errors.map(e => e.key);\n      return {\n        code: codes[0],\n        codes,\n        __httpResponse: httpResponse,\n      };\n    }\n    return fromHttpError(httpResponse);\n  };\n\n  /**\n   * @name ProductSummaryModel#patchArrangement\n   * @type {function}\n   * @description Perform Patch request for arrangement\n   * @param {ArrangementsData.ArrangementPatch} arrangement\n   * Arrangement data to be sent as the request message data.\n   * @returns {Promise.<Response>}\n   */\n  const patchArrangement = (arrangement) => arrangementsData\n    .patchArrangementsRecord(arrangement)\n    .catch((e) => {\n      throw fromHttpOrBadRequestError(e);\n    });\n\n  const loadProductSummary = () => productSummaryData\n    .getProductsummary()\n    .then(({ data }) => {\n      if (!disableSessionStorage) {\n        bbStorage.setItem(BbStorageKeys.PRODUCT_SUMMARY, data);\n      }\n      return data;\n    })\n    .catch((e) => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#load\n   * @type {function}\n   *\n   * @description\n   * Load Product Summary data.\n   *\n   * @param {object} forceLoad True if should always load data from server\n   * @returns {Promise.<ProductKinds, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with ProductsKinds and TotalBalance.\n   */\n  const load = (forceLoad = true) => bbStorage.getItem(BbStorageKeys.PRODUCT_SUMMARY)\n    .then((data) => (!forceLoad && data) || loadProductSummary())\n    .then((data) => {\n      const { aggregatedBalance } = data;\n      processedSummaryData = {\n        productKinds: convertToArray(data),\n        total: aggregatedBalance,\n      };\n      return processedSummaryData;\n    });\n\n  /**\n   * @name ProductSummaryModel#getProductSelectedId\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Tries to read selected product id from storage.\n   *\n   * @returns {Promise<?string>} a Promise with ID\n   */\n  const getProductSelectedId = () => bbStorage.getItem(BbStorageKeys.PRODUCT_SELECTED);\n\n  /**\n   * @name ProductSummaryModel#findProductById\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product by ID.\n   *\n   * @param {object} id Product ID\n   * @param {ProductKind[]} data Products list\n   * @returns {Promise.<Product|null, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with default Product or null.\n   */\n  const findProductById = (id, data) => {\n    let idx = data.length;\n\n    while (idx--) {\n      const kind = data[idx];\n      const foundProduct = kind.products.find(product => (\n        product.id === id\n      ));\n\n      if (foundProduct) {\n        return foundProduct;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @name ProductSummaryModel#getFirstVisibleProduct\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get the first visible product.\n   *\n   * @param {object} kinds All Product kinds\n   * @returns {Product|null} firstProduct\n   * Returns first visible Product.\n   */\n  const getFirstVisibleProduct = kinds => {\n    const firstKindWithVisibleProduct = kinds.find(kind =>\n        kind.products.find(product => product.visible)\n    );\n    const [firstProduct = null] =\n        firstKindWithVisibleProduct.products.filter(product => product.visible);\n\n    return firstProduct;\n  };\n\n  /**\n   * @name ProductSummaryModel#getAllVisibleProducts\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get all visible products.\n   *\n   * @param {object} kinds All Product kinds\n   * @returns {Product[]} all visible products\n   * Returns all visible Products.\n   */\n  const getAllVisibleProducts = kinds => kinds\n    .map(kind => kind.products)\n    .reduce((allProducts, products) => [...allProducts, ...products], [])\n    .filter(product => product.visible);\n\n  /**\n   * @name ProductSummaryModel#setProductSelected\n   * @type {function}\n   *\n   * @description\n   * Set current selected product\n   *\n   * @param {Product} product A product to select\n   */\n  const setProductSelected = (product) => {\n    if (product) {\n      bbStorage.setItem(BbStorageKeys.PRODUCT_SELECTED, product.id);\n    } else {\n      bbStorage.removeItem(BbStorageKeys.PRODUCT_SELECTED);\n    }\n  };\n\n  /**\n   * @name ProductSummaryModel#setProductsSelected\n   * @type {function}\n   *\n   * @description\n   * Set currently selected products array\n   *\n   * @param {Product[]} products Array of products to select\n   */\n  const setProductsSelected = (products) => {\n    if (products && products.length) {\n      bbStorage.setItem(BbStorageKeys.PRODUCTS_SELECTED,\n        products.map(product => product.id).filter(id => id)\n      );\n    } else {\n      bbStorage.removeItem(BbStorageKeys.PRODUCTS_SELECTED);\n    }\n  };\n\n  /**\n   * @name ProductSummaryModel#getProductFromList\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product from list.\n   * If sessionStorage doesn't have selected id, set the default product id to it\n   *\n   * @param {object} id Product ID\n   * @param {boolean} getFirstInstead True if should return first product if does not have selected\n   * @returns {Promise.<?Product, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Product or null.\n   */\n  const getProductFromList = (id, getFirstInstead) =>\n    Promise.resolve(processedSummaryData || load(false))\n      .then(({ productKinds }) => {\n        let defaultProduct = null;\n        if (getFirstInstead) {\n          defaultProduct = getFirstVisibleProduct(productKinds);\n        }\n\n        if (!id) {\n          setProductSelected(defaultProduct);\n          setProductsSelected(); // Remove PRODUCTS_SELECTED from sessionStorage\n          return defaultProduct;\n        }\n\n        return findProductById(id, productKinds) || defaultProduct;\n      });\n\n  /**\n   * @name ProductSummaryModel#getProductsFromList\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get products from list\n   *\n   * @param {string[]} ids array of Products IDs\n   * @param {boolean} getDefault True if should return all products if does not have selected\n   * @returns {Promise.<?Product[], module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to an array with Products or null\n   */\n  const getProductsFromList = (ids, getDefault) =>\n    Promise.resolve(processedSummaryData || load(false))\n      .then(({ productKinds }) => {\n        if (getDefault && (!ids || !ids.length)) {\n          const allVisibleProducts = getAllVisibleProducts(productKinds);\n          setProductsSelected(allVisibleProducts);\n          setProductSelected(); // Remove PRODUCT_SELECTED from sessionStorage\n          return allVisibleProducts;\n        }\n\n        // in case user unselect all products\n        if (!ids || !ids.length) {\n          return [];\n        }\n\n        return ids.map(id => findProductById(id, productKinds));\n      });\n\n  /**\n   * @name ProductSummaryModel#getProductSelected\n   * @type {function}\n   *\n   * @description\n   * Temporary. Get current selected product\n   *\n   * @param {?Boolean} getFirstInstead Get first product if there is no\n   * product selected in the storage (default true)\n   * @returns {Promise.<Product>} A Promise resolving to Product.\n   */\n  const getProductSelected = (getFirstInstead = true) => getProductSelectedId()\n    .then(id => getProductFromList(id, getFirstInstead));\n\n  /**\n   * @name ProductSummaryModel#getProductsSelected\n   * @type {function}\n   *\n   * @description\n   * Get currently selected products array\n   *\n   * @param {?Boolean} getDefault Get all products if there are no\n   * products selected in the storage (default true)\n   * @returns {Promise.<Product[]>} A Promise resolving to Product array\n   */\n  const getProductsSelected = (getDefault = true) =>\n    bbStorage.getItem(BbStorageKeys.PRODUCTS_SELECTED)\n      .then(items => getProductsFromList(items, getDefault));\n\n  /**\n   * @name ProductSummaryModel#loadByLegalEntityId\n   * @type {function}\n   *\n   * @description\n   * Load some data.\n   *\n   * @param {?object} params - optional configuration object\n   * @returns {Promise.<Products, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Accounts by legalEntityId.\n   */\n  const loadByLegalEntityId = (params) => productSummaryData\n    .getProductsummaryArrangements(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10),\n    }))\n    .catch(e => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#loadContextArrangements\n   * @type {function}\n   *\n   * @description\n   * Load arrangements collection for a given context\n   *\n   * @param {?object} params - optional configuration object\n   * @returns {Promise.<Products, module:lib-bb-model-errors.ModelError>} A Promise resolving to\n   *   a collection containing products.\n   */\n  const loadContextArrangements = (params) => productSummaryData\n    .getProductsummaryContextArrangements(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10),\n    }))\n    .catch(e => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#getProductDetails\n   * @type {function}\n   *\n   * @description\n   * Get all the details of a product.\n   *\n   * @param {string} productId Id of the requested product\n   * @returns {Promise.<ProductDetails, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Account details.\n   */\n  const getProductDetails = (productId) => arrangementsData\n    .getArrangementsRecord(productId)\n    .then(raw => raw.data)\n    .catch(e => {\n      throw fromHttpOrBadRequestError(e);\n    });\n\n\n  /**\n   * @name ProductSummaryModel#getAccountsOverviewPreferences\n   * @type {function}\n   *\n   * @description\n   * Getting accounts preferences from widget\n   *\n   * @returns {Object} Preferences object\n   */\n  function getAccountsOverviewPreferences() {\n    const accountsOverviewPreferences = {};\n\n    accountsOverviewPreferences.pageSize = widget.getLongPreference(Preference.ACCOUNTS_PAGE_SIZE);\n    accountsOverviewPreferences.maxNavPages =\n      widget.getLongPreference(Preference.ACCOUNTS_MAX_NAV_PAGES);\n    accountsOverviewPreferences.paginationType =\n      widget.getStringPreference(Preference.ACCOUNTS_PAGINATION_TYPE);\n    accountsOverviewPreferences.dissmissMessageTime =\n      widget.getLongPreference(Preference.ACCOUNTS_DISSMISS_MESSAGE_TIME) || 5;\n    accountsOverviewPreferences.sortableColumn =\n      widget.getStringPreference(Preference.ACCOUNTS_SORTABLE_COLUMN);\n    accountsOverviewPreferences.productKindName =\n      SupportedProductKinds.includes(widget.getStringPreference(Preference.PRODUCT_KIND_NAME)) ?\n        widget.getStringPreference(Preference.PRODUCT_KIND_NAME) : '';\n    accountsOverviewPreferences.chartsEnabled =\n      widget.getBooleanPreference(Preference.CHARTS_ENABLED) || false;\n    accountsOverviewPreferences.businessFunction =\n      widget.getStringPreference(Preference.ACCOUNTS_BUSINESS_FUNCTION);\n    accountsOverviewPreferences.resourceName =\n      widget.getStringPreference(Preference.ACCOUNTS_RESOURCE_NAME);\n    accountsOverviewPreferences.privilegeType =\n      widget.getStringPreference(Preference.ACCOUNTS_PRIVILEGE_TYPE);\n    accountsOverviewPreferences.sortableDirection =\n      widget.getStringPreference(Preference.ACCOUNTS_SORTABLE_DIRECTION);\n    accountsOverviewPreferences.accountsSelectorSelectAll =\n      widget.getBooleanPreference(Preference.ACCOUNTS_SELECTOR_SELECT_ALL) || false;\n\n    return accountsOverviewPreferences;\n  }\n  /**\n   * @name ProductSummaryModel#getBalanceHistory\n   * @type {function}\n   *\n   * @description\n   * Get Balance history for given arrangements\n   *\n   * @param {string[]} arrangementsId Ids of the requested arrangements\n   * @param {?object} params - optional configuration object\n   * @returns {Promise.<BalanceHistory, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Balance history.\n   */\n  const getBalanceHistory = (arrangementsId, params) => arrangementsData\n    .getAccountsBalanceHistoryRecord(arrangementsId, params)\n    .then(raw => raw.data)\n    .catch(e => {\n      throw fromHttpOrBadRequestError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#processSeries\n   * @type {function}\n   * @inner\n   *\n   * @description\n   * process series to be sutable for chart UI component\n   *\n   * @param {BalanceHistoryItem} dataSeries Balance History series\n   * @returns Data in format suitable for chart UI components\n   */\n  const processSeries = (dataSeries) => {\n    const series = {\n      labels: dataSeries.map(item =>\n        new Date(item.dateTo).getTime()\n      ),\n    };\n    Object.assign(series, {\n      datasets: [{\n        data: dataSeries.map(item => item.value.balance),\n      }],\n    });\n    return series;\n  };\n\n  /**\n   * @name ProductSummaryModel#transformToSeries\n   * @type {function}\n   *\n   * @description\n   * Transforms data per arrangement into format suitable for chart UI components\n   *\n   * @param {BalanceHistory} data Balance History data\n   * @returns {BalanceHistorySeries} Data in format suitable for chart UI components\n   */\n  const transformToSeries = (data) => {\n    const balanceHistory = (data && data.items) ? data.items : [];\n\n    return balanceHistory.reduce((memo, item) =>\n      Object.assign(memo, {\n        [item.arrangementId]: processSeries(item.balanceHistory),\n      }), {}\n    );\n  };\n\n  /**\n   * @name ProductSummaryModel\n   * @type {Object}\n   *\n   * @description\n   * Product Summary model service\n   */\n  return {\n    load,\n    getProductSelected,\n    setProductSelected,\n    getProductsSelected,\n    setProductsSelected,\n\n    // TODO: Remove this deprecated method when component version will be bumped to v2.0.0\n    getSelectedAccount: () => {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - This method will removed in next major update. Use getProductSelected instead.');\n      return getProductSelected();\n    },\n\n    // TODO: Remove this deprecated method when component version will be bumped to v2.0.0\n    setSelectedAccount: (account) => {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - This method will removed in next major update. Use setProductSelected instead.');\n      return setProductSelected(account);\n    },\n    //\n    loadByLegalEntityId,\n    getProductDetails,\n    getAccountsOverviewPreferences,\n    getBalanceHistory,\n    transformToSeries,\n    patchArrangement,\n\n    loadContextArrangements,\n  };\n}\n\n/**\n * ProductKind type definition\n * @typedef {Object} ProductKinds\n * @property {TotalBalance}   total               - total balance of products\n * @property {ProductKind[]}  productKinds        - array of Products Kinds\n */\n\n/**\n * ProductKind type definition\n * @typedef {Object} ProductKind\n * @property {!string}    id                      - id of the ProductKind\n * (currentAccounts, savingsAccounts, termDeposits, creditCards, debitCards, loans,\n *  investmentAccounts)\n * @property {!string}    name                    - name of the ProductKind\n * @property {string}     aggregatedBalance       - aggregated balance\n * @property {string}     currency                - currency code\n * @property {Product[]}  products                - array of Products\n */\n\n/**\n * ProductKind type definition\n * @typedef {Object} Products\n * @property {number}     totalCount              - total number of products\n * @property {Product[]}  products                - array of Products\n */\n\n/**\n * Product type definition\n * @typedef {Object} Product\n * @property {!string}    id                      - id of the Product\n * @property {!string}    name                    - name of the Product\n * @property {!string}    kind                    - id of the ProductKind\n * @property {string}     alias                   - alias of the Product\n * @property {string}     IBAN                    - International Bank Account Number\n * @property {string}     BBAN                    - Basic Bank Account Number\n * @property {string}     currency                - currency code\n * @property {string}     PANSuffix               - Primary Account Number Suffix\n * @property {string}     bookedBalance           - booked balance\n * @property {string}     availableBalance        - available balance\n * @property {string}     creditLimit             - credit limit\n * @property {string}     currentInvestmentValue  - current investment value\n * @property {string}     principalAmount         - principal amount\n * @property {string}     accruedInterest         - accrued interest\n */\n\n/**\n * @typedef {Object} TotalBalance\n * @property {string} aggregatedBalance - aggregated balance\n * @property {string} currency - currency code\n */\n\n/**\n * Product details definition\n * @typedef {Object} ProductDetails\n * @property {!string}     externalArrangementId      - id of the external arrangement\n * @property {!string}     externalLegalEntityId      - id of the external legal entity\n * @property {!string}     externalProductId          - id of the external product\n * @property {string}      name                       - name of the account\n * @property {string}      alias                      - alias of the account\n * @property {number}      bookedBalance              - booked balance\n * @property {number}      availableBalance           - available balance\n * @property {number}      creditLimit                - credit limit\n * @property {string}      IBAN                       - International Bank Account Number\n * @property {string}      BBAN                       - Basic Bank Account Number\n * @property {string}      currency                   - 3 characteres currency code\n * @property {boolean}     externalTransferAllowed    - is external transfer allowed\n * @property {boolean}     urgentTransferAllowed      - is urgent transfer allowed\n * @property {string}      accruedInterest            - accrued interest\n * @property {string}      number                     - number\n * @property {number}      principalAmount            - principal amount\n * @property {number}      currentInvestmentValue     - current investment value\n * @property {!string}     legalEntityId              - id of the legal entity\n * @property {!string}     productId                  - id of the product\n * @property {string}      productNumber              - number of the product\n * @property {string}      accountOpeningDate         - date when account was opened\n * @property {number}      accountInterestRate        - account interest rate\n * @property {number}      valueDateBalance           - value date balance\n * @property {number}      overdraftAmount            - overdraft amount\n * @property {number}      overdraftInterestRate      - overdraft interest rate\n * @property {number}      overdraftExpiryDate        - overdraft expiry date\n * @property {number}      overdraftLimit             - overdraft limit\n * @property {string}      bankBranchCode             - bank branch code\n * @property {date}        startDate                  - start date\n * @property {string}      term                       - term\n * @property {date}        maturityDate               - maturity date\n * @property {number}      maturityAmount             - maturity amount\n * @property {boolean}     autoRenevalIndicator       - is auto renewal enabled\n * @property {string}      interestPaymentFrequency   - interest payment frequency\n * @property {string}      interestSettlementAccount  - interest settlement account\n * @property {number}      outstandingPrincipal       - outstanding principal\n * @property {number}      monthlyInstalmentAmount    - monthly instalment amount\n * @property {number}      minimumRequiredBalance     - minimum required balance\n * @property {string}      creditCardAccountNumber    - credit card account number\n * @property {date}        validThru                  - credit card validity through date\n * @property {number}      applicableInterestRate     - applicable interest rate\n * @property {number}      remainingCredit            - remaining credit\n * @property {number}      outstandingPayment         - outstanding payment\n * @property {number}      minimunPayment             - minimum payment\n * @property {date}        minimunPaymentDueDate      - minimum payment due date\n * @property {number}      totalInvestmentValue       - total investment value\n * @property {DebitCard[]} debitCard                  - debit card collection\n */\n\n/**\n * @typedef {Object} DebitCard\n * @property {string} number      - debit card number\n * @property {date}   expiryDate  - debit card expiry date\n */\n\n/**\n * @typedef ArrangementsData.ArrangementPatch\n * @type {Object}\n * @property {string} id Internally used unique identification of arrangement\n * @property {?string} alias User specific naming for an arrangement\n * @property {?boolean} visible User specific visibility for an arrangement\n * @property {?Object} additions Container object for custom API extensions\n */\n\n/**\n * @typedef Response\n * @type {Object}\n * @property {Object} data See method descriptions for possible return types\n * @property {function} headers Getter headers function\n * @property {number} status HTTP status code of the response.\n * @property {string} statusText HTTP status text of the response.\n */\n\n/**\n * Error desctiption for bad request status 400\n * @typedef ErrorBadRequest\n * @type {Object}\n * @property {string} message Message description for bad request\n * @property {Errors[]} errors List of errors\n */\n\n/**\n * Errors type definition\n * @typedef {Object} Errors\n * @property {string} message error message discription\n * @property {string} key error key\n */\n\n/**\n * @typedef ErrorsResponseKeys\n * @type {Object}\n * @property {string} ERR_ACCOUNT_ARRANGEMENT_NOT_EXIST error key when\n *  arrangement does not exist\n * @property {string} ERR_ACCOUNT_ARRANGEMENT_NO_PRIVILEGES error key when\n *  no privileges were found for arrangement\n * @property {string} ERR_ACCOUNT_ARRANGEMENT_NOT_ENTITLED_TO_SEE error key when\n *  not entitled to see arrangement\n * @property {string} ERR_ACCOUNT_PRODUCT_NOT_EXIST error key when\n *  Product does not exist\n * @property {string} ERR_ACCOUNT_PRODUCT_UPDATE_SIZE error key when\n *  size must be in allowed range\n * @property {string} ERR_ARRANGEMENT_NOT_FOUND error key when\n *  arrangement not found\n * @property {string} ERR_ARRANGEMENT_NOT_EXIST_PRODUCT_KIND_NAME error key when\n *  given product kind name does not exist\n * @property {string} ERR_PRODUCT_SUMMARY_LEGAL_ENTITY_NOT_ALLOWED error key when\n *  not allowed to list arrangements for this legal entity id\n * @property {string} ERR_PRODUCT_SUMMARY_REQUEST_SIZE error key when\n *  invalid paging size velue must be greater than or equal to 1\n * @property {string} ERR_PRODUCT_SUMMARY_REQUEST_FROM error key when\n *  invalid paging from value must be greater than or equal to 0\n * @property {string} ERR_PRODUCT_SUMMARY_REQUEST_ORDER_BY error key when\n *  invalid sorting order by value must match name\n * @property {string} ERR_PRODUCT_SUMMARY_REQUEST_DIRECTION error key when\n *  invalid sorting direction by value must be in must match asc|desc\n * @property {string} ERR_BALANCE_HISTORY_ARRANGEMENT_IDS_ARE_EMPTY error key when\n *  request object arrangements ids are empty for balance history\n * @property {string} ERR_BALANCE_HISTORY_INVALID_COMBO_OF_RANGE_PERIOD error key when\n *  request object for balance history has invalid combination of range/period\n * @property {string} ERR_BALANCE_HISTORY_INVALID_DATE_FROM_TO_RANGE_PERIOD error key when\n *  request object has invalid combination of from and to date\n * @property {string} ERR_BALANCE_HISTORY_INVALID_FROM_DATE error key when\n *  request object date is less than allowed years from now\n */\n\n/**\n * Balance History object\n * Arrangements with balace history\n * @typedef {Object} BalanceHistory\n * @type {Object}\n * @property {BalanceHistoryItem[]} items List of balance history items for\n *  given Arrangement id's\n */\n\n/**\n * Arrangement balance history\n * balance history object for given Arrangement id's\n * @typedef BalanceHistoryItem\n * @type {Object}\n * @property {string} arrangementId - Arrangement Id\n * @property {balanceHistory[]} balanceHistory - balance history data for arrangement id\n */\n\n/**\n * Balance History\n * @typedef {Object} balanceHistory\n * @type {Object}\n * @property {string} dateFrom - date from\n * @property {string} dateTo - date to\n * @property {string} valuePtc - balance history value\n * @property {object} value - balance history values that holds currency and balance value\n * @property {string} currency - currency for balance history (yAxes)\n * @property {string} balance - balance value (xAxes)\n */\n\n/**\n * BalanceHistorySeries Data in format suitable for chart UI components\n * @typedef {Object} BalanceHistorySeries\n * @type {Object}\n * @property {string} arrangementId Arrangement Id for mapping balance history\n * @property {number[]} labels label data for x-axis\n * @property {Array.<DataSets>} datasets label data for x-axis\n */\n\n /**\n * @typedef {Object} DataSets\n * @type {Object}\n * @property {string[]} data Data that is shown on axis\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-product-summary-ng/scripts/product-summary.js","module.exports = __WEBPACK_EXTERNAL_MODULE_105__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 105\n// module chunks = 15 20 21 22 23 24","/**\n * Widget preferences enum\n * @type {object}\n */\nexport const Preference = {\n  ACCOUNTS_PAGE_SIZE: 'bb.accountsOverview.pageSize',\n  ACCOUNTS_MAX_NAV_PAGES: 'bb.accountsOverview.maxNavPages',\n  ACCOUNTS_PAGINATION_TYPE: 'bb.accountsOverview.paginationType',\n  ACCOUNTS_SORTABLE_COLUMN: 'bb.accountsOverview.defaultSortableColumn',\n  ACCOUNTS_DISSMISS_MESSAGE_TIME: 'bb.accountsOverview.dismissMessageTime',\n  PRODUCT_KIND_NAME: 'bb.accountsOverview.productKindName',\n  PRODUCT_SUMMARY_DISABLE_SESSION_STORAGE: 'bb.productSummary.disableSessionStorage',\n  CHARTS_ENABLED: 'bb.accountsOverview.chartsEnabled',\n  ACCOUNTS_BUSINESS_FUNCTION: 'bb.accountsOverview.businessFunction',\n  ACCOUNTS_RESOURCE_NAME: 'bb.accountsOverview.resourceName',\n  ACCOUNTS_PRIVILEGE_TYPE: 'bb.accountsOverview.privilegeType',\n  ACCOUNTS_SORTABLE_DIRECTION: 'bb.accountsOverview.defaultSortableDirection',\n  ACCOUNTS_SELECTOR_SELECT_ALL: 'bb.accountsOverview.accountsSelectorAll',\n};\n\n/**\n * bbStorage keys enum\n * @type {object}\n */\nexport const BbStorageKeys = {\n  PRODUCT_SELECTED: 'bb.product.selected',\n  PRODUCTS_SELECTED: 'bb.products.selected',\n  PRODUCT_SUMMARY: 'bb.product.summary.data',\n};\n\n/**\n * Supported account types\n * @type {array<string>}\n */\nexport const SupportedProductKinds = [\n  'Aggregated Balance',\n  'Current Account',\n  'Savings Account',\n  'Term Deposit',\n  'Loan',\n  'Credit Card',\n  'Debit Card',\n  'Investment Account',\n];\n\n/**\n * Bad request errors enum\n * @type {object}\n */\nexport const BadRequestError = {\n  ERR_ACCOUNT_ARRANGEMENT_NOT_EXIST:\n    'account.api.arrangement.notExist',\n  ERR_ACCOUNT_ARRANGEMENT_NO_PRIVILEGES:\n    'account.api.arrangementNoPrivilege',\n  ERR_ACCOUNT_ARRANGEMENT_NOT_ENTITLED_TO_SEE:\n    'account.api.arrangement.notEntitledToSee',\n\n  ERR_ACCOUNT_PRODUCT_NOT_EXIST:\n    'account.api.product.notExist',\n  ERR_ACCOUNT_PRODUCT_UPDATE_SIZE:\n    'api.Size.alias',\n\n  ERR_ARRANGEMENT_NOT_FOUND:\n    'arrangements.api.notFound.arrangement',\n  ERR_ARRANGEMENT_NOT_EXIST_PRODUCT_KIND_NAME:\n    'arrangements.api.notExist.productKindName',\n\n  ERR_PRODUCT_SUMMARY_LEGAL_ENTITY_NOT_ALLOWED:\n    'product.summary.api.legalEntity.notAllowed',\n  ERR_PRODUCT_SUMMARY_REQUEST_SIZE:\n    'product.summary.api.size',\n  ERR_PRODUCT_SUMMARY_REQUEST_FROM:\n    'product.summary.api.from',\n  ERR_PRODUCT_SUMMARY_REQUEST_ORDER_BY:\n    'product.summary.api.orderBy',\n  ERR_PRODUCT_SUMMARY_REQUEST_DIRECTION:\n    'product.summary.api.direction',\n\n  ERR_BALANCE_HISTORY_ARRANGEMENT_IDS_ARE_EMPTY:\n    'account.api.arrangement.emptyArrangementsIds',\n  ERR_BALANCE_HISTORY_INVALID_COMBO_OF_RANGE_PERIOD:\n    'account.api.arrangement.invalidComboOfPeriodRange',\n  ERR_BALANCE_HISTORY_INVALID_DATE_FROM_TO_RANGE_PERIOD:\n    'account.api.arrangement.fromToDateBadCombo',\n  ERR_BALANCE_HISTORY_INVALID_FROM_DATE:\n    'account.api.arrangement.invalidFromDate',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-product-summary-ng/scripts/constants.js"],"sourceRoot":""}