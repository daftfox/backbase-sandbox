{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********************","webpack:///webpack/bootstrap d0309a746b17cd403690?c295********************","webpack:///./model-wm-portfolio-summary-ng/model.xml","webpack:///external \"lib-bb-model-errors\"?7567**************","webpack:///./model-wm-portfolio-summary-ng/scripts/index.js","webpack:///external \"data-bb-portfolio-summary-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///external \"vendor-bb-angular\"?a114","webpack:///./model-wm-portfolio-summary-ng/scripts/portfolio-summary.js","webpack:///./model-wm-portfolio-summary-ng/scripts/constants.js"],"names":["moduleKey","modelPortfolioSummaryKey","angular","module","portfolioSummaryDataModuleKey","bbStorageModuleKey","factory","portfolioSummaryDataKey","bbStorageServiceKey","Model","name","portfolioSummaryModel","portfoliosData","bbStorage","load","params","getPortfoliosummary","then","response","totalCount","parseInt","headers","data","catch","e","loadPortfoliosOrder","getPortfoliosummaryOrder","savePortfoliosOrder","order","postPortfoliosummaryClientOrderRecord","portfolios","savePortfolioAlias","IBAN","alias","postPortfoliosummaryAliasRecord","loadPortfolioSummaryRecord","portfolioId","getPortfoliosummaryRecord","loadPortfolioPositions","getPortfoliosummaryPositions","getSelectedPortfolioId","getItem","BbStorageKeys","PORTFOLIO_ID_SELECTED","getCustomListSelected","CUSTOM_LIST_SELECTED","loadAllocationClasses","getPortfoliosummaryAllocationsAsset","loadAllocationCurrencies","getPortfoliosummaryAllocationsCurrency","loadTransactions","getPortfoliosummaryTransactions","loadTransactionDetails","transactionId","getPortfoliosummaryTransactionsRecord","loadTransactionsFilterOptions","getPortfoliosummaryTransactionFilterOptions","loadPerformanceValuation","granularity","fromDate","toDate","getPortfoliosummaryValuationChart","loadPerformanceChart","getPortfoliosummaryPerformanceChart","setPortfolioIdSelected","setItem","removeItem","setCustomListSelected","customList","loadCustomList","getPortfoliosummaryCustomList","createCustomList","requestData","postPortfoliosummaryCustomListRecord","setPortfoliosToCustomList","uuid","postPortfoliosummaryCustomListPortfolioRecord","deleteCustomList","deletePortfoliosummaryCustomListRecord","deletePortfoliosFromCustomList","deletePortfoliosummaryCustomListPortfolioRecord","join","renameCustomList","list","putPortfoliosummaryCustomListRecord","updateFavoriteStatusOfPortfolio","isFavorite","doChange","putPortfoliosummaryFavoritesRecord","deletePortfoliosummaryFavoritesRecord"],"mappings":"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","file":"model-wm-portfolio-summary-ng/scripts/model-wm-portfolio-summary-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lib-bb-model-errors\"), require(\"data-bb-portfolio-summary-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-wm-portfolio-summary-ng\", [\"lib-bb-model-errors\", \"data-bb-portfolio-summary-http-ng\", \"lib-bb-storage-ng\", \"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-wm-portfolio-summary-ng\"] = factory(require(\"lib-bb-model-errors\"), require(\"data-bb-portfolio-summary-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"model-wm-portfolio-summary-ng\"] = factory(root[\"lib-bb-model-errors\"], root[\"data-bb-portfolio-summary-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_91__, __WEBPACK_EXTERNAL_MODULE_92__, __WEBPACK_EXTERNAL_MODULE_93__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0309a746b17cd403690","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-wm-portfolio-summary-ng/model.xml\n// module id = 0\n// module chunks = 21","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 8\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 21","/**\n * @module model-wm-portfolio-summary-ng\n *\n * @description\n * Model-wm-portfolio-summary-ng\n *\n * @example\n * import modelPortfolioSummaryModuleKey, { modelPortfolioSummaryKey }\n * from 'model-wm-portfolio-summary-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     modelPortfolioSummaryModuleKey,\n *   ])\n *   .factory('someFactory', [\n *     modelPortfolioSummaryKey,\n *     // into\n *     function someFactory(portfolioSummaryModel) {\n *       // ...\n *     },\n *   ]);\n */\nimport portfolioSummaryDataModuleKey, {\n  portfolioSummaryDataKey,\n} from 'data-bb-portfolio-summary-http-ng';\n\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport angular from 'vendor-bb-angular';\n\nimport Model from './portfolio-summary';\n\nconst moduleKey = 'model-wm-portfolio-summary-ng';\nexport const modelPortfolioSummaryKey = `${moduleKey}:model`;\n\n\nexport default angular\n  .module(moduleKey, [\n    portfolioSummaryDataModuleKey,\n    bbStorageModuleKey,\n  ])\n\n  .factory(modelPortfolioSummaryKey, [\n    portfolioSummaryDataKey,\n    bbStorageServiceKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n /**\n * Portfolio type definition\n * @typedef {Object} Portfolio\n * @property {string}        IBAN               - International Bank Account Number\n * @property {string}        clientName         - Client name\n * @property {string}        alias              - A portfolio name manually set by the client\n * @property {assetClass[]}  assetClasses       - Asset classes list for portfolio\n * @property {object}        valuation          - Total cost of all assets in the portfolio\n * @property {object}        inCashTotal        - Incoming cash for the period of time\n * @property {object}        outCashTotal       - Outgoing cash for the period of time\n * @property {number}        performanceMTD     - Portfolio performance for month\n * @property {number}        performanceMTDpct  - Portfolio performance for month in percents\n * @property {number}        performanceYTD     - Portfolio performance amount for year\n * @property {number}        performanceYTDpct  - Portfolio performance amount for year in percents\n * @property {string}        riskClass          - Risk of portfolio investement strategy\n * @property {manager[]}     managers           - Managers of portfolio\n * @property {attorney[]}    attorneys          - Attorneys of portfolio\n * @property {BBSeries[]}    dataseries         - data in format suitable for chart UI components\n */\n\n /**\n * BBSeries data object used to draw charts\n * @typedef {object} BBSeries\n * @property {string[]} labels Array chart slices labels\n * @property {Dataset[]} datasets Array of chart datasets\n */\n\n /**\n * Dataset object for chart data\n * @typedef {object} Dataset\n * @property {number[]} data Array of data points for chart slices\n */\n\n/**\n * Dataset object for chart data\n * @typedef {object} AssetClass\n * @property {string} name name of asset class\n * @property {number} valuePct value that represents percentage of asset\n */\n\n /**\n * Dataset object for chart data\n * @typedef {object} attorney\n * @property {string} id id of a portfolio manager\n * @property {string} name name of a portfolio manager\n */\n\n /**\n * Dataset object for chart data\n * @typedef {object} manager\n * @property {string} id id of a portfolio manager\n * @property {string} name name of a portfolio manager\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-wm-portfolio-summary-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_91__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-portfolio-summary-http-ng\"\n// module id = 91\n// module chunks = 21","module.exports = __WEBPACK_EXTERNAL_MODULE_92__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 92\n// module chunks = 21","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 93\n// module chunks = 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37","/* eslint-disable no-param-reassign */\nimport { fromHttpError } from 'lib-bb-model-errors';\nimport BbStorageKeys from './constants';\n\n/**\n * Model factory for model-wm-portfolio-summary-ng\n *\n * @inner\n * @type {function}\n *\n * @return {Object}\n */\nexport default function portfolioSummaryModel(\n  portfoliosData,\n  bbStorage\n) {\n  /**\n   * @name portfolioSummaryModel#load\n   * @type {function}\n   *\n   * @description\n   * Load portfolios.\n   * @param {?object} params Optional configuration object.\n   * @returns {Promise.<Portfolios, ModelError>}\n   * A Promise resolving to object with Portfolios.\n   */\n  function load(params) {\n    return portfoliosData.getPortfoliosummary(params)\n      .then((response) => ({\n        totalCount: parseInt(response.headers('x-total-count'), 10) || 0,\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadPortfoliosOrder\n   * @type {function}\n   *\n   * @description\n   * Load portfolios order.\n   * @returns {Promise.<Array<string>, ModelError>}\n   * A Promise resolving to array with Portfolios IBANs.\n   */\n  function loadPortfoliosOrder() {\n    return portfoliosData.getPortfoliosummaryOrder()\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#savePortfoliosOrder\n   * @type {function}\n   *\n   * @description\n   * Load portfolios order.\n   * @param {Array.<string>} order Array of portfolios IBANs\n   * @returns {Promise.<Array<string>, ModelError>}\n   * A Promise resolving to array with Portfolios IBANs.\n   */\n  function savePortfoliosOrder(order) {\n    return portfoliosData.postPortfoliosummaryClientOrderRecord({ portfolios: order })\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#savePortfolioAlias\n   * @type {function}\n   *\n   * @description\n   * Save portfolio with new alias name.\n   * @param {string} IBAN Changed portfolio IBAN\n   * @param {string} alias New alias name\n   */\n  function savePortfolioAlias(IBAN, alias) {\n    return portfoliosData.postPortfoliosummaryAliasRecord({ IBAN, alias })\n      .then((response) => ({\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadPortfolioSummaryRecord\n   * @type {function}\n   *\n   * @description\n   * Load specific portfolio\n   * @param {string} portfolioId ID of portfolio to load\n   * @returns {Promise.<Portfolio, ModelError>}\n   * A Promise resolving to object with Portfolio\n   */\n  function loadPortfolioSummaryRecord(portfolioId) {\n    return portfoliosData.getPortfoliosummaryRecord(portfolioId)\n      .then((response) => ({\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadPortfolioPositions\n   * @type {function}\n   *\n   * @description\n   * Load portfolio positions.\n   * @param {string} portfolioId ID of portfolio to load\n   * @returns {Promise.<Positions, ModelError>}\n   * A Promise resolving to object with Portfolio positions.\n   */\n  function loadPortfolioPositions(portfolioId) {\n    return portfoliosData.getPortfoliosummaryPositions(portfolioId)\n      .then((response) => ({\n        data: response.data,\n      }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n\n  /**\n   * @public\n   * @name portfolioSummaryModel#getSelectedPortfolioId\n   * @type {function}\n   *\n   * @description\n   * Get current selected portfolio id.\n   *\n   * @returns {Promise.<string, ModelError>} A Promise with portfolio id.\n   */\n  const getSelectedPortfolioId = () =>\n    bbStorage.getItem(BbStorageKeys.PORTFOLIO_ID_SELECTED);\n\n\n  /**\n   * @public\n   * @name portfolioSummaryModel#getSelectedCustomList\n   * @type {function}\n   *\n   * @description\n   * Get current selected custom list\n   *\n   * @returns {Promise.<string, ModelError>} A Promise with custom list\n   */\n  const getCustomListSelected = () => bbStorage.getItem(BbStorageKeys.CUSTOM_LIST_SELECTED);\n\n\n  /**\n   * @name portfolioSummaryModel#loadAllocationClasses\n   * @type {function}\n   *\n   * @description\n   * Load allocation classes.\n   * @param {string} portfolioId ID of portfolio to load\n   * @returns {Promise.<Allocations, ModelError>}\n   * A Promise resolving to object with Allocation classes.\n   */\n  function loadAllocationClasses(portfolioId) {\n    return portfoliosData\n      .getPortfoliosummaryAllocationsAsset(portfolioId)\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadAllocationCurrencies\n   * @type {function}\n   *\n   * @description\n   * Load allocation currencies.\n   * @param {string} portfolioId ID of portfolio to load\n   * @returns {Promise.<Allocations, ModelError>}\n   * A Promise resolving to object with Allocation currencies.\n   */\n  function loadAllocationCurrencies(portfolioId) {\n    return portfoliosData\n      .getPortfoliosummaryAllocationsCurrency(portfolioId)\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadTransactions\n   * @type {function}\n   *\n   * @description\n   * Load portfolio transactions.\n   * @param {number} portfolioId ID of portfolio to load\n   * @param {string} params Filter params\n   * @returns {Promise.<PortfolioTransactions, ModelError>}\n   * A Promise resolving to object with Portfolio transactions.\n   */\n  function loadTransactions(portfolioId, params) {\n    return portfoliosData\n      .getPortfoliosummaryTransactions(portfolioId, params)\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadTransactionDetails\n   * @type {function}\n   *\n   * @description\n   * Load portfolio transaction detailed data.\n   * @param {number} portfolioId ID of portfolio to load\n   * @param {number} transactionId ID of transaction to load\n   * @param {string} params Filter params\n   * @returns {Promise.<PortfolioTransaction, ModelError>}\n   * A Promise resolving to object with Portfolio transaction.\n   */\n  function loadTransactionDetails(portfolioId, transactionId, params) {\n    return portfoliosData\n      .getPortfoliosummaryTransactionsRecord(portfolioId, transactionId, params)\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadTransactionsFilterOptions\n   * @type {function}\n   *\n   * @description\n   * Load filter options for portfolio transactions` filter.\n   *\n   * @param {number} portfolioId ID to load data for\n   * @returns {Promise.<PortfolioTransactionsFilterOptions, ModelError>}\n   * A Promise resolving to object with Portfolio transactions` filter options.\n   */\n  function loadTransactionsFilterOptions(portfolioId) {\n    return portfoliosData\n      .getPortfoliosummaryTransactionFilterOptions(portfolioId)\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadPerformanceValuation\n   * @type {function}\n   *\n   * @description\n   * Load performance valuation data.\n   * @param {string} portfolioId ID of portfolio to load\n   * @param {granularity} Granularity of data to load\n   * @param {fromDate} Date to load data from\n   * @param {toDate} Date to load data to\n   * @returns {Promise.<ValuationData, ModelError>}\n   * A Promise resolving to object with Performance valuation data.\n   */\n  function loadPerformanceValuation(portfolioId, granularity, fromDate, toDate) {\n    return portfoliosData\n      .getPortfoliosummaryValuationChart(portfolioId, {\n        granularity,\n        fromDate,\n        toDate,\n      })\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#loadPerformanceChart\n   * @type {function}\n   *\n   * @description\n   * Load data for portfolio performance chart.\n   *\n   * @param {number} portfolioId ID to load data for\n   * @returns {Promise.<PortfolioPerformance, ModelError>}\n   * A Promise resolving to object with Portfolio performance chart data.\n   */\n  function loadPerformanceChart(portfolioId, fromDate, toDate) {\n    return portfoliosData\n      .getPortfoliosummaryPerformanceChart(portfolioId, { fromDate, toDate })\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#setPortfolioIdSelected\n   * @type {function}\n   *\n   * @description\n   * Set current selected portfolio id\n   *\n   * @param {string} portfolioId portfolio id to set selected\n   */\n  const setPortfolioIdSelected = (portfolioId) => {\n    if (portfolioId) {\n      bbStorage.setItem(BbStorageKeys.PORTFOLIO_ID_SELECTED, portfolioId);\n    } else {\n      bbStorage.removeItem(BbStorageKeys.PORTFOLIO_ID_SELECTED);\n    }\n  };\n\n  /**\n   * @name portfolioSummaryModel#setCustomListSelected\n   * @type {function}\n   *\n   * @description\n   * Set current selected custom list\n   *\n   * @param {string} customList custom list to set selected\n   */\n  const setCustomListSelected = (customList) => {\n    if (customList) {\n      bbStorage.setItem(BbStorageKeys.CUSTOM_LIST_SELECTED, customList);\n    }\n  };\n\n  /**\n   * @name portfolioSummaryModel#loadCustomList\n   * @type {function}\n   *\n   * @description\n   * Load custom lists.\n   * @returns {Promise.<CustomList, ModelError>}\n   * A Promise resolving to object with Custom lists.\n   */\n  function loadCustomList() {\n    return portfoliosData\n      .getPortfoliosummaryCustomList()\n      .then(response => ({ data: response.data }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#createCustomList\n   * @type {function}\n   *\n   * @description\n   * Create custom list.\n   * @param {object} requestData request body data\n   * @returns {Promise.<CustomList, ModelError>}\n   * A Promise resolving to object with Custom list.\n   */\n  function createCustomList(requestData) {\n    return portfoliosData\n      .postPortfoliosummaryCustomListRecord(requestData)\n      .then((response) => ({ data: response.data }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#setPortfoliosToCustomList\n   * @type {function}\n   *\n   * @description\n   * Add portfolios to custom list\n   *\n   * @param {string} uuid Identifier of custom list\n   * @param {array} portfolios List of portfolio ids\n   *\n   * @returns {Promise.<string>}\n   * Uuid of custom list\n   */\n  function setPortfoliosToCustomList(uuid, portfolios) {\n    return portfoliosData\n      .postPortfoliosummaryCustomListPortfolioRecord(uuid, { portfolios })\n      .then((response) => ({ data: response.data }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#deleteCustomList\n   * @type {function}\n   *\n   * @description\n   * Delete custom list.\n   * @param {string} uuid customlist uuid\n   * @returns {Promise.<string, ModelError>}\n   */\n  function deleteCustomList(uuid) {\n    return portfoliosData\n      .deletePortfoliosummaryCustomListRecord(uuid)\n      .then((response) => ({ data: response.data }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#deletePortfoliosFromCustomList\n   * @type {function}\n   *\n   * @description\n   * Delete portfolios from custom list.\n   * @param {array.<string>} portfolios List of portfolios ids to remove from custom list\n   * @param {string} uuid customlist uuid\n   * @returns {Promise.<string, ModelError>}\n   */\n  function deletePortfoliosFromCustomList(portfolios, uuid) {\n    return portfoliosData\n      .deletePortfoliosummaryCustomListPortfolioRecord(uuid, portfolios.join(','))\n      .then((response) => ({ data: response.data }))\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#renameCustomList\n   * @type {function}\n   *\n   * @description\n   * Rename custom list.\n   * @param {object} uuid customlist uuid\n   * @param {object} list object with a list name property\n   * @returns {Promise.<string, ModelError>}\n   */\n  function renameCustomList(uuid, list) {\n    return portfoliosData\n      .putPortfoliosummaryCustomListRecord(uuid, list)\n      .then(({ data }) => data)\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel#updateFavoriteStatusOfPortfolio\n   * @type {function}\n   *\n   * @description\n   * Update `favorite` status of portfolio.\n   * @param {string} IBAN Portfolio IBAN\n   * @param {boolean} isFavorite Flag that stands for 'favorite' status of portfolio\n   * @returns {Promise.<string, ModelError>}\n   */\n  function updateFavoriteStatusOfPortfolio(IBAN, isFavorite) {\n    const doChange = () => (\n      isFavorite\n        ? portfoliosData.putPortfoliosummaryFavoritesRecord({ IBAN })\n        : portfoliosData.deletePortfoliosummaryFavoritesRecord(IBAN)\n    );\n\n    return doChange()\n      .then(({ data }) => data)\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name portfolioSummaryModel\n   * @type {Object}\n   */\n  return {\n    load,\n    loadPortfoliosOrder,\n    savePortfoliosOrder,\n    loadPortfolioPositions,\n    loadPortfolioSummaryRecord,\n    loadAllocationClasses,\n    loadAllocationCurrencies,\n    loadPerformanceValuation,\n    loadPerformanceChart,\n    setPortfolioIdSelected,\n    setCustomListSelected,\n    getSelectedPortfolioId,\n    getCustomListSelected,\n    loadTransactions,\n    loadTransactionDetails,\n    loadTransactionsFilterOptions,\n    loadCustomList,\n    createCustomList,\n    setPortfoliosToCustomList,\n    deleteCustomList,\n    renameCustomList,\n    deletePortfoliosFromCustomList,\n    updateFavoriteStatusOfPortfolio,\n    savePortfolioAlias,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model-wm-portfolio-summary-ng/scripts/portfolio-summary.js","/**\n * bbStorage keys enum\n * @type {object}\n */\nconst BbStorageKeys = {\n  PORTFOLIO_ID_SELECTED: 'bb.portfolioId.selected',\n  CUSTOM_LIST_SELECTED: 'bb.customList.selected',\n};\n\nexport default BbStorageKeys;\n\n\n\n// WEBPACK FOOTER //\n// ./model-wm-portfolio-summary-ng/scripts/constants.js"],"sourceRoot":""}